<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1254" onload="init(evt)" viewBox="0 0 1200 1254" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1237"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1237"> </text>
<g id="frames">
<g>
<title>all (1,904 samples, 100.00%)</title><rect x="10.0" y="1203.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="1214.0">all</text>
</g>
<g>
<title>[NIO Selector #0 tid=23811] (384 samples, 20.17%)</title><rect x="10.0" y="1187.0" width="238.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="13.0" y="1198.0">[NIO Selector #0 tid=23811]</text>
</g>
<g>
<title>[unknown_Java] (3 samples, 0.16%)</title><rect x="10.0" y="1171.0" width="1.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (380 samples, 19.96%)</title><rect x="11.9" y="1171.0" width="235.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.9" y="1182.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (1 samples, 0.05%)</title><rect x="12.5" y="1155.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="15.5" y="1166.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (1 samples, 0.05%)</title><rect x="12.5" y="1139.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="15.5" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.05%)</title><rect x="12.5" y="1123.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.5" y="1134.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (238 samples, 12.50%)</title><rect x="13.1" y="1155.0" width="147.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="16.1" y="1166.0">one/nio/net/JavaSel..</text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.05%)</title><rect x="13.1" y="1139.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="16.1" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (237 samples, 12.45%)</title><rect x="13.7" y="1139.0" width="146.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="16.7" y="1150.0">sun/nio/ch/Selecto..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (237 samples, 12.45%)</title><rect x="13.7" y="1123.0" width="146.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.7" y="1134.0">sun/nio/ch/Selecto..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (237 samples, 12.45%)</title><rect x="13.7" y="1107.0" width="146.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.7" y="1118.0">sun/nio/ch/KQueueS..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (228 samples, 11.97%)</title><rect x="13.7" y="1091.0" width="141.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.7" y="1102.0">sun/nio/ch/KQueue...</text>
</g>
<g>
<title>kevent (223 samples, 11.71%)</title><rect x="16.8" y="1075.0" width="138.2" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="19.8" y="1086.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (6 samples, 0.32%)</title><rect x="155.0" y="1091.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="158.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.05%)</title><rect x="155.0" y="1075.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="158.0" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (5 samples, 0.26%)</title><rect x="155.6" y="1075.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="158.6" y="1086.0"></text>
</g>
<g>
<title>java/util/HashSet.add (4 samples, 0.21%)</title><rect x="155.6" y="1059.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="158.6" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.21%)</title><rect x="155.6" y="1043.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="158.6" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.21%)</title><rect x="155.6" y="1027.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="158.6" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.11%)</title><rect x="156.9" y="1011.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="159.9" y="1022.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.05%)</title><rect x="158.1" y="1059.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="161.1" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.05%)</title><rect x="158.1" y="1043.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="161.1" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.05%)</title><rect x="158.1" y="1027.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="161.1" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.05%)</title><rect x="158.7" y="1091.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="161.7" y="1102.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.05%)</title><rect x="158.7" y="1075.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="161.7" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (1 samples, 0.05%)</title><rect x="159.4" y="1091.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="162.4" y="1102.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (1 samples, 0.05%)</title><rect x="159.4" y="1075.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="162.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.05%)</title><rect x="159.4" y="1059.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="162.4" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.05%)</title><rect x="160.0" y="1091.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="163.0" y="1102.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.05%)</title><rect x="160.0" y="1075.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="163.0" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.05%)</title><rect x="160.0" y="1059.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="163.0" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.05%)</title><rect x="160.0" y="1043.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="163.0" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.05%)</title><rect x="160.0" y="1027.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="163.0" y="1038.0"></text>
</g>
<g>
<title>one/nio/net/Session.handleException (1 samples, 0.05%)</title><rect x="160.6" y="1155.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="163.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/commons/logging/impl/Log4JLogger.error (1 samples, 0.05%)</title><rect x="160.6" y="1139.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="163.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.log (1 samples, 0.05%)</title><rect x="160.6" y="1123.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="163.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.forcedLog (1 samples, 0.05%)</title><rect x="160.6" y="1107.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="163.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/log4j/spi/LoggingEvent.&lt;init&gt; (1 samples, 0.05%)</title><rect x="160.6" y="1091.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="163.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.05%)</title><rect x="160.6" y="1075.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="163.6" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.05%)</title><rect x="160.6" y="1059.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="163.6" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.05%)</title><rect x="160.6" y="1043.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="163.6" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.05%)</title><rect x="160.6" y="1027.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="163.6" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.05%)</title><rect x="160.6" y="1011.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="163.6" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.05%)</title><rect x="160.6" y="995.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="163.6" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/loader/Resource.getBytes (1 samples, 0.05%)</title><rect x="160.6" y="979.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="163.6" y="990.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (139 samples, 7.30%)</title><rect x="161.2" y="1155.0" width="86.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="164.2" y="1166.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (138 samples, 7.25%)</title><rect x="161.8" y="1139.0" width="85.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="164.8" y="1150.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (109 samples, 5.72%)</title><rect x="161.8" y="1123.0" width="67.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="164.8" y="1134.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (95 samples, 4.99%)</title><rect x="163.1" y="1107.0" width="58.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="166.1" y="1118.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (95 samples, 4.99%)</title><rect x="163.1" y="1091.0" width="58.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="166.1" y="1102.0">one/ni..</text>
</g>
<g>
<title>RequestHandler0_status.handleRequest (93 samples, 4.88%)</title><rect x="163.1" y="1075.0" width="57.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="166.1" y="1086.0">Reques..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (91 samples, 4.78%)</title><rect x="163.1" y="1059.0" width="56.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="166.1" y="1070.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (88 samples, 4.62%)</title><rect x="163.7" y="1043.0" width="54.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="166.7" y="1054.0">one/n..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (4 samples, 0.21%)</title><rect x="163.7" y="1027.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="166.7" y="1038.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.16%)</title><rect x="164.3" y="1011.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="167.3" y="1022.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.05%)</title><rect x="164.3" y="995.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="167.3" y="1006.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.11%)</title><rect x="164.9" y="995.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="167.9" y="1006.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.11%)</title><rect x="164.9" y="979.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="167.9" y="990.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (84 samples, 4.41%)</title><rect x="166.2" y="1027.0" width="52.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="169.2" y="1038.0">one/n..</text>
</g>
<g>
<title>one/nio/net/Session.write (84 samples, 4.41%)</title><rect x="166.2" y="1011.0" width="52.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="169.2" y="1022.0">one/n..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (84 samples, 4.41%)</title><rect x="166.2" y="995.0" width="52.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="169.2" y="1006.0">one/n..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (84 samples, 4.41%)</title><rect x="166.2" y="979.0" width="52.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="169.2" y="990.0">one/n..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.05%)</title><rect x="166.2" y="963.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="169.2" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (83 samples, 4.36%)</title><rect x="166.8" y="963.0" width="51.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="169.8" y="974.0">sun/n..</text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.isBlocking (1 samples, 0.05%)</title><rect x="167.4" y="947.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="170.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.05%)</title><rect x="168.0" y="947.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="171.0" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (80 samples, 4.20%)</title><rect x="168.7" y="947.0" width="49.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="171.7" y="958.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (80 samples, 4.20%)</title><rect x="168.7" y="931.0" width="49.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="171.7" y="942.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (79 samples, 4.15%)</title><rect x="168.7" y="915.0" width="48.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="171.7" y="926.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (79 samples, 4.15%)</title><rect x="168.7" y="899.0" width="48.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="171.7" y="910.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (79 samples, 4.15%)</title><rect x="168.7" y="883.0" width="48.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="171.7" y="894.0">sun/..</text>
</g>
<g>
<title>write (77 samples, 4.04%)</title><rect x="169.9" y="867.0" width="47.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="172.9" y="878.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.05%)</title><rect x="217.6" y="915.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="220.6" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.05%)</title><rect x="217.6" y="899.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="220.6" y="910.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (1 samples, 0.05%)</title><rect x="218.2" y="1043.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="221.2" y="1054.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.05%)</title><rect x="218.2" y="1027.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="221.2" y="1038.0"></text>
</g>
<g>
<title>one/nio/server/Server.incRequestsProcessed (1 samples, 0.05%)</title><rect x="218.9" y="1043.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="221.9" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.incrementAndGet (1 samples, 0.05%)</title><rect x="218.9" y="1027.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="221.9" y="1038.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.status (2 samples, 0.11%)</title><rect x="219.5" y="1059.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="222.5" y="1070.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (2 samples, 0.11%)</title><rect x="219.5" y="1043.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="222.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.11%)</title><rect x="219.5" y="1027.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="222.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.05%)</title><rect x="220.1" y="1011.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="223.1" y="1022.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.05%)</title><rect x="220.1" y="995.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="223.1" y="1006.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="220.1" y="979.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="223.1" y="990.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.05%)</title><rect x="220.7" y="1075.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="223.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.05%)</title><rect x="220.7" y="1059.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="223.7" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.05%)</title><rect x="220.7" y="1043.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="223.7" y="1054.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.05%)</title><rect x="220.7" y="1027.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="223.7" y="1038.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.handleDefault (1 samples, 0.05%)</title><rect x="221.3" y="1075.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="224.3" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.entity (1 samples, 0.05%)</title><rect x="221.3" y="1059.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="224.3" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.executeAsync (1 samples, 0.05%)</title><rect x="221.3" y="1043.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="224.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.05%)</title><rect x="221.3" y="1027.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="224.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.05%)</title><rect x="221.3" y="1011.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="224.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.05%)</title><rect x="221.3" y="995.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="224.3" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.05%)</title><rect x="221.3" y="979.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="224.3" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.05%)</title><rect x="221.3" y="963.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="224.3" y="974.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (3 samples, 0.16%)</title><rect x="222.0" y="1107.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="225.0" y="1118.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.05%)</title><rect x="222.0" y="1091.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="225.0" y="1102.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.11%)</title><rect x="222.6" y="1091.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="225.6" y="1102.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.11%)</title><rect x="222.6" y="1075.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="225.6" y="1086.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (2 samples, 0.11%)</title><rect x="223.8" y="1107.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="226.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.11%)</title><rect x="223.8" y="1091.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="226.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.11%)</title><rect x="223.8" y="1075.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="226.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.05%)</title><rect x="223.8" y="1059.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="226.8" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.05%)</title><rect x="223.8" y="1043.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="226.8" y="1054.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.05%)</title><rect x="224.4" y="1059.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="227.4" y="1070.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (2 samples, 0.11%)</title><rect x="225.1" y="1107.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="228.1" y="1118.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.11%)</title><rect x="226.3" y="1107.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="229.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.11%)</title><rect x="226.3" y="1091.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="229.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.11%)</title><rect x="226.3" y="1075.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="229.3" y="1086.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.05%)</title><rect x="226.9" y="1059.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="229.9" y="1070.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.05%)</title><rect x="226.9" y="1043.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="229.9" y="1054.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.05%)</title><rect x="226.9" y="1027.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="229.9" y="1038.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (1 samples, 0.05%)</title><rect x="226.9" y="1011.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="229.9" y="1022.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.16%)</title><rect x="227.5" y="1107.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="230.5" y="1118.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.16%)</title><rect x="227.5" y="1091.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="230.5" y="1102.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (29 samples, 1.52%)</title><rect x="229.4" y="1123.0" width="18.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="232.4" y="1134.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (29 samples, 1.52%)</title><rect x="229.4" y="1107.0" width="18.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="232.4" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (29 samples, 1.52%)</title><rect x="229.4" y="1091.0" width="18.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="232.4" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.26%)</title><rect x="229.4" y="1075.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="232.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.26%)</title><rect x="229.4" y="1059.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="232.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (5 samples, 0.26%)</title><rect x="229.4" y="1043.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="232.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.26%)</title><rect x="229.4" y="1027.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="232.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.26%)</title><rect x="229.4" y="1011.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="232.4" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (5 samples, 0.26%)</title><rect x="229.4" y="995.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="232.4" y="1006.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.11%)</title><rect x="230.6" y="979.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="233.6" y="990.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkSize (1 samples, 0.05%)</title><rect x="231.9" y="979.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="234.9" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (24 samples, 1.26%)</title><rect x="232.5" y="1075.0" width="14.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="235.5" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (24 samples, 1.26%)</title><rect x="232.5" y="1059.0" width="14.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="235.5" y="1070.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.11%)</title><rect x="232.5" y="1043.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="235.5" y="1054.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.11%)</title><rect x="232.5" y="1027.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="235.5" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.11%)</title><rect x="232.5" y="1011.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="235.5" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.11%)</title><rect x="232.5" y="995.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.5" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.11%)</title><rect x="232.5" y="979.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="235.5" y="990.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (1 samples, 0.05%)</title><rect x="233.1" y="963.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="236.1" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (22 samples, 1.16%)</title><rect x="233.7" y="1043.0" width="13.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.7" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (22 samples, 1.16%)</title><rect x="233.7" y="1027.0" width="13.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="236.7" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (22 samples, 1.16%)</title><rect x="233.7" y="1011.0" width="13.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="236.7" y="1022.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.11%)</title><rect x="234.3" y="995.0" width="1.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="237.3" y="1006.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.11%)</title><rect x="234.3" y="979.0" width="1.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="237.3" y="990.0"></text>
</g>
<g>
<title>read (19 samples, 1.00%)</title><rect x="235.6" y="995.0" width="11.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="238.6" y="1006.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.05%)</title><rect x="247.4" y="1171.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="250.4" y="1182.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=24323] (303 samples, 15.91%)</title><rect x="248.0" y="1187.0" width="187.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="251.0" y="1198.0">[NIO Selector #1 tid=243..</text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.05%)</title><rect x="248.0" y="1171.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="251.0" y="1182.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.05%)</title><rect x="248.0" y="1155.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="251.0" y="1166.0"></text>
</g>
<g>
<title>_res (1 samples, 0.05%)</title><rect x="248.0" y="1139.0" width="0.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="251.0" y="1150.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (301 samples, 15.81%)</title><rect x="248.6" y="1171.0" width="186.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="251.6" y="1182.0">one/nio/server/SelectorT..</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (1 samples, 0.05%)</title><rect x="249.8" y="1155.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="252.8" y="1166.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (1 samples, 0.05%)</title><rect x="250.5" y="1155.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="253.5" y="1166.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (1 samples, 0.05%)</title><rect x="250.5" y="1139.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="253.5" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.05%)</title><rect x="250.5" y="1123.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="253.5" y="1134.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (175 samples, 9.19%)</title><rect x="251.1" y="1155.0" width="108.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="254.1" y="1166.0">one/nio/net/J..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (3 samples, 0.16%)</title><rect x="251.1" y="1139.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="254.1" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (2 samples, 0.11%)</title><rect x="251.7" y="1123.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="254.7" y="1134.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.11%)</title><rect x="251.7" y="1107.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="254.7" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.05%)</title><rect x="252.3" y="1091.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="255.3" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.05%)</title><rect x="252.3" y="1075.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="255.3" y="1086.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (1 samples, 0.05%)</title><rect x="252.9" y="1139.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="255.9" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.05%)</title><rect x="252.9" y="1123.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="255.9" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (1 samples, 0.05%)</title><rect x="252.9" y="1107.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="255.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.05%)</title><rect x="252.9" y="1091.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="255.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.05%)</title><rect x="252.9" y="1075.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="255.9" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (171 samples, 8.98%)</title><rect x="253.6" y="1139.0" width="105.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="256.6" y="1150.0">sun/nio/ch/Se..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (171 samples, 8.98%)</title><rect x="253.6" y="1123.0" width="105.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="256.6" y="1134.0">sun/nio/ch/Se..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (170 samples, 8.93%)</title><rect x="254.2" y="1107.0" width="105.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="257.2" y="1118.0">sun/nio/ch/KQ..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (160 samples, 8.40%)</title><rect x="254.2" y="1091.0" width="99.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="257.2" y="1102.0">sun/nio/ch/K..</text>
</g>
<g>
<title>kevent (155 samples, 8.14%)</title><rect x="257.3" y="1075.0" width="96.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="260.3" y="1086.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (6 samples, 0.32%)</title><rect x="353.3" y="1091.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="356.3" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.11%)</title><rect x="354.0" y="1075.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="357.0" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.16%)</title><rect x="355.2" y="1075.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="358.2" y="1086.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.16%)</title><rect x="355.2" y="1059.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="358.2" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.16%)</title><rect x="355.2" y="1043.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="358.2" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.16%)</title><rect x="355.2" y="1027.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="358.2" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.11%)</title><rect x="355.2" y="1011.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="358.2" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$Node.&lt;init&gt; (1 samples, 0.05%)</title><rect x="355.8" y="995.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="358.8" y="1006.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.05%)</title><rect x="356.4" y="1011.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="359.4" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.05%)</title><rect x="357.1" y="1091.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="360.1" y="1102.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.05%)</title><rect x="357.1" y="1075.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="360.1" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (2 samples, 0.11%)</title><rect x="357.7" y="1091.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="360.7" y="1102.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (2 samples, 0.11%)</title><rect x="357.7" y="1075.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="360.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.11%)</title><rect x="357.7" y="1059.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="360.7" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.05%)</title><rect x="358.9" y="1091.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="361.9" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.remove (1 samples, 0.05%)</title><rect x="358.9" y="1075.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="361.9" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.05%)</title><rect x="358.9" y="1059.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="361.9" y="1070.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (122 samples, 6.41%)</title><rect x="359.5" y="1155.0" width="75.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="362.5" y="1166.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (122 samples, 6.41%)</title><rect x="359.5" y="1139.0" width="75.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="362.5" y="1150.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (92 samples, 4.83%)</title><rect x="359.5" y="1123.0" width="57.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="362.5" y="1134.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (81 samples, 4.25%)</title><rect x="363.3" y="1107.0" width="50.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="366.3" y="1118.0">one/n..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (81 samples, 4.25%)</title><rect x="363.3" y="1091.0" width="50.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="366.3" y="1102.0">one/n..</text>
</g>
<g>
<title>RequestHandler0_status.handleRequest (78 samples, 4.10%)</title><rect x="363.3" y="1075.0" width="48.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="366.3" y="1086.0">Requ..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (72 samples, 3.78%)</title><rect x="363.3" y="1059.0" width="44.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="366.3" y="1070.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (72 samples, 3.78%)</title><rect x="363.3" y="1043.0" width="44.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="366.3" y="1054.0">one/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6 samples, 0.32%)</title><rect x="363.3" y="1027.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="366.3" y="1038.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.32%)</title><rect x="363.3" y="1011.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="366.3" y="1022.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.11%)</title><rect x="363.3" y="995.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="366.3" y="1006.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.21%)</title><rect x="364.5" y="995.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="367.5" y="1006.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.21%)</title><rect x="364.5" y="979.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="367.5" y="990.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (66 samples, 3.47%)</title><rect x="367.0" y="1027.0" width="40.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="370.0" y="1038.0">one..</text>
</g>
<g>
<title>one/nio/net/Session.write (66 samples, 3.47%)</title><rect x="367.0" y="1011.0" width="40.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="370.0" y="1022.0">one..</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.05%)</title><rect x="367.0" y="995.0" width="0.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="370.0" y="1006.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (64 samples, 3.36%)</title><rect x="367.6" y="995.0" width="39.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="370.6" y="1006.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (64 samples, 3.36%)</title><rect x="367.6" y="979.0" width="39.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="370.6" y="990.0">one..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (63 samples, 3.31%)</title><rect x="368.2" y="963.0" width="39.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="371.2" y="974.0">sun..</text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.isBlocking (1 samples, 0.05%)</title><rect x="368.2" y="947.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="371.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.05%)</title><rect x="368.8" y="947.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="371.8" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (61 samples, 3.20%)</title><rect x="369.5" y="947.0" width="37.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="372.5" y="958.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (61 samples, 3.20%)</title><rect x="369.5" y="931.0" width="37.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="372.5" y="942.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (58 samples, 3.05%)</title><rect x="369.5" y="915.0" width="35.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="372.5" y="926.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (58 samples, 3.05%)</title><rect x="369.5" y="899.0" width="35.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="372.5" y="910.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (58 samples, 3.05%)</title><rect x="369.5" y="883.0" width="35.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="372.5" y="894.0">sun..</text>
</g>
<g>
<title>write (54 samples, 2.84%)</title><rect x="371.9" y="867.0" width="33.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="374.9" y="878.0">wr..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.16%)</title><rect x="405.4" y="915.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="408.4" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.11%)</title><rect x="405.4" y="899.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="408.4" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.11%)</title><rect x="405.4" y="883.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="408.4" y="894.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="406.0" y="867.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="409.0" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.05%)</title><rect x="406.6" y="899.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="409.6" y="910.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.05%)</title><rect x="406.6" y="883.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="409.6" y="894.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.05%)</title><rect x="406.6" y="867.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="409.6" y="878.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.05%)</title><rect x="407.3" y="995.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="410.3" y="1006.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.05%)</title><rect x="407.3" y="979.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="410.3" y="990.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.05%)</title><rect x="407.3" y="963.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="410.3" y="974.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (1 samples, 0.05%)</title><rect x="407.9" y="1059.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="410.9" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.status (5 samples, 0.26%)</title><rect x="408.5" y="1059.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="411.5" y="1070.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (4 samples, 0.21%)</title><rect x="409.1" y="1043.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="412.1" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.11%)</title><rect x="409.1" y="1027.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="412.1" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.11%)</title><rect x="409.1" y="1011.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="412.1" y="1022.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.11%)</title><rect x="410.4" y="1027.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="413.4" y="1038.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.handleDefault (3 samples, 0.16%)</title><rect x="411.6" y="1075.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="414.6" y="1086.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.05%)</title><rect x="411.6" y="1059.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="414.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.05%)</title><rect x="411.6" y="1043.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="414.6" y="1054.0"></text>
</g>
<g>
<title>RequestHandler0_status.handleRequest (1 samples, 0.05%)</title><rect x="411.6" y="1027.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="414.6" y="1038.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.entity (2 samples, 0.11%)</title><rect x="412.2" y="1059.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="415.2" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.executeAsync (2 samples, 0.11%)</title><rect x="412.2" y="1043.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="415.2" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.11%)</title><rect x="412.2" y="1027.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="415.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 0.11%)</title><rect x="412.2" y="1011.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="415.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.enqueue (1 samples, 0.05%)</title><rect x="412.2" y="995.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="415.2" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.05%)</title><rect x="412.8" y="995.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="415.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.05%)</title><rect x="412.8" y="979.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="415.8" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.05%)</title><rect x="412.8" y="963.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="415.8" y="974.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.11%)</title><rect x="413.5" y="1107.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="416.5" y="1118.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.05%)</title><rect x="413.5" y="1091.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="416.5" y="1102.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.05%)</title><rect x="414.1" y="1091.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="417.1" y="1102.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.05%)</title><rect x="414.1" y="1075.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="417.1" y="1086.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (2 samples, 0.11%)</title><rect x="414.7" y="1107.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="417.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.11%)</title><rect x="414.7" y="1091.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="417.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.11%)</title><rect x="414.7" y="1075.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="417.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.05%)</title><rect x="414.7" y="1059.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="417.7" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.05%)</title><rect x="414.7" y="1043.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="417.7" y="1054.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.05%)</title><rect x="415.3" y="1059.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="418.3" y="1070.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (1 samples, 0.05%)</title><rect x="415.9" y="1107.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="418.9" y="1118.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (30 samples, 1.58%)</title><rect x="416.6" y="1123.0" width="18.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="419.6" y="1134.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (30 samples, 1.58%)</title><rect x="416.6" y="1107.0" width="18.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="419.6" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (30 samples, 1.58%)</title><rect x="416.6" y="1091.0" width="18.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="419.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.26%)</title><rect x="416.6" y="1075.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="419.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.26%)</title><rect x="416.6" y="1059.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="419.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (5 samples, 0.26%)</title><rect x="416.6" y="1043.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="419.6" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.26%)</title><rect x="416.6" y="1027.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="419.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.26%)</title><rect x="416.6" y="1011.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="419.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (5 samples, 0.26%)</title><rect x="416.6" y="995.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="419.6" y="1006.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.05%)</title><rect x="417.2" y="979.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="420.2" y="990.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkSize (2 samples, 0.11%)</title><rect x="417.8" y="979.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="420.8" y="990.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.05%)</title><rect x="419.0" y="979.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="422.0" y="990.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.05%)</title><rect x="419.0" y="963.0" width="0.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="422.0" y="974.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.05%)</title><rect x="419.0" y="947.0" width="0.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="422.0" y="958.0"></text>
</g>
<g>
<title>_res (1 samples, 0.05%)</title><rect x="419.0" y="931.0" width="0.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="422.0" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (25 samples, 1.31%)</title><rect x="419.7" y="1075.0" width="15.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="422.7" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (25 samples, 1.31%)</title><rect x="419.7" y="1059.0" width="15.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="422.7" y="1070.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.05%)</title><rect x="419.7" y="1043.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="422.7" y="1054.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.05%)</title><rect x="419.7" y="1027.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="422.7" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.05%)</title><rect x="419.7" y="1011.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="422.7" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.05%)</title><rect x="419.7" y="995.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="422.7" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (1 samples, 0.05%)</title><rect x="419.7" y="979.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="422.7" y="990.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (1 samples, 0.05%)</title><rect x="419.7" y="963.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="422.7" y="974.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (1 samples, 0.05%)</title><rect x="419.7" y="947.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="422.7" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (24 samples, 1.26%)</title><rect x="420.3" y="1043.0" width="14.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="423.3" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (24 samples, 1.26%)</title><rect x="420.3" y="1027.0" width="14.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="423.3" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (24 samples, 1.26%)</title><rect x="420.3" y="1011.0" width="14.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="423.3" y="1022.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.05%)</title><rect x="420.9" y="995.0" width="0.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="423.9" y="1006.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.05%)</title><rect x="420.9" y="979.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="423.9" y="990.0"></text>
</g>
<g>
<title>read (22 samples, 1.16%)</title><rect x="421.5" y="995.0" width="13.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="424.5" y="1006.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.05%)</title><rect x="435.1" y="1171.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="438.1" y="1182.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=24835] (556 samples, 29.20%)</title><rect x="435.8" y="1187.0" width="344.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="438.8" y="1198.0">[NIO Selector #2 tid=24835]</text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.11%)</title><rect x="435.8" y="1171.0" width="1.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="438.8" y="1182.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (554 samples, 29.10%)</title><rect x="437.0" y="1171.0" width="343.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="440.0" y="1182.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (1 samples, 0.05%)</title><rect x="438.2" y="1155.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="441.2" y="1166.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (1 samples, 0.05%)</title><rect x="438.2" y="1139.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="441.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.05%)</title><rect x="438.2" y="1123.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="441.2" y="1134.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (314 samples, 16.49%)</title><rect x="438.9" y="1155.0" width="194.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="441.9" y="1166.0">one/nio/net/JavaSelector...</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (5 samples, 0.26%)</title><rect x="438.9" y="1139.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="441.9" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.11%)</title><rect x="439.5" y="1123.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="442.5" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.11%)</title><rect x="439.5" y="1107.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="442.5" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (2 samples, 0.11%)</title><rect x="440.7" y="1123.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="443.7" y="1134.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.11%)</title><rect x="440.7" y="1107.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="443.7" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.11%)</title><rect x="440.7" y="1091.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="443.7" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (2 samples, 0.11%)</title><rect x="440.7" y="1075.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="443.7" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.05%)</title><rect x="441.3" y="1059.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="444.3" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (308 samples, 16.18%)</title><rect x="442.0" y="1139.0" width="190.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="445.0" y="1150.0">sun/nio/ch/SelectorImpl.s..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (308 samples, 16.18%)</title><rect x="442.0" y="1123.0" width="190.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="445.0" y="1134.0">sun/nio/ch/SelectorImpl.l..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (307 samples, 16.12%)</title><rect x="442.6" y="1107.0" width="190.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="445.6" y="1118.0">sun/nio/ch/KQueueSelector..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (297 samples, 15.60%)</title><rect x="442.6" y="1091.0" width="184.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="445.6" y="1102.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (2 samples, 0.11%)</title><rect x="445.7" y="1075.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="448.7" y="1086.0"></text>
</g>
<g>
<title>kevent (290 samples, 15.23%)</title><rect x="446.9" y="1075.0" width="179.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="449.9" y="1086.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (5 samples, 0.26%)</title><rect x="626.6" y="1091.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="629.6" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.getFilter (1 samples, 0.05%)</title><rect x="626.6" y="1075.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="629.6" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getShort (1 samples, 0.05%)</title><rect x="626.6" y="1059.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="629.6" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (4 samples, 0.21%)</title><rect x="627.3" y="1075.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="630.3" y="1086.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.16%)</title><rect x="627.3" y="1059.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="630.3" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.16%)</title><rect x="627.3" y="1043.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="630.3" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.16%)</title><rect x="627.3" y="1027.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="630.3" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.11%)</title><rect x="627.9" y="1011.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="630.9" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$Node.&lt;init&gt; (1 samples, 0.05%)</title><rect x="628.5" y="995.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="631.5" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.nioReadyOps (1 samples, 0.05%)</title><rect x="629.1" y="1059.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="632.1" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.05%)</title><rect x="629.7" y="1091.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="632.7" y="1102.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.05%)</title><rect x="629.7" y="1075.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="632.7" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (2 samples, 0.11%)</title><rect x="630.4" y="1091.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="633.4" y="1102.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (2 samples, 0.11%)</title><rect x="630.4" y="1075.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="633.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.05%)</title><rect x="630.4" y="1059.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="633.4" y="1070.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.05%)</title><rect x="631.0" y="1059.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="634.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.05%)</title><rect x="631.0" y="1043.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="634.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.05%)</title><rect x="631.0" y="1027.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="634.0" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (1 samples, 0.05%)</title><rect x="631.6" y="1091.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="634.6" y="1102.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (1 samples, 0.05%)</title><rect x="631.6" y="1075.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="634.6" y="1086.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.05%)</title><rect x="631.6" y="1059.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="634.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.05%)</title><rect x="631.6" y="1043.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="634.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.05%)</title><rect x="631.6" y="1027.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="634.6" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.05%)</title><rect x="632.2" y="1091.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="635.2" y="1102.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.05%)</title><rect x="632.2" y="1075.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="635.2" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.05%)</title><rect x="632.2" y="1059.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="635.2" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.05%)</title><rect x="632.2" y="1043.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="635.2" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.05%)</title><rect x="632.2" y="1027.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="635.2" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (1 samples, 0.05%)</title><rect x="632.8" y="1139.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="635.8" y="1150.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (1 samples, 0.05%)</title><rect x="632.8" y="1123.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="635.8" y="1134.0"></text>
</g>
<g>
<title>one/nio/net/Session.handleException (1 samples, 0.05%)</title><rect x="633.5" y="1155.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="636.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/commons/logging/impl/Log4JLogger.error (1 samples, 0.05%)</title><rect x="633.5" y="1139.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="636.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.log (1 samples, 0.05%)</title><rect x="633.5" y="1123.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="636.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.forcedLog (1 samples, 0.05%)</title><rect x="633.5" y="1107.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="636.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.05%)</title><rect x="633.5" y="1091.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="636.5" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.05%)</title><rect x="633.5" y="1075.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="636.5" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.05%)</title><rect x="633.5" y="1059.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="636.5" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.05%)</title><rect x="633.5" y="1043.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="636.5" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.05%)</title><rect x="633.5" y="1027.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="636.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.replace (1 samples, 0.05%)</title><rect x="633.5" y="1011.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="636.5" y="1022.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (236 samples, 12.39%)</title><rect x="634.1" y="1155.0" width="146.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="637.1" y="1166.0">one/nio/net/Sessio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (236 samples, 12.39%)</title><rect x="634.1" y="1139.0" width="146.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="637.1" y="1150.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (172 samples, 9.03%)</title><rect x="634.1" y="1123.0" width="106.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="637.1" y="1134.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (155 samples, 8.14%)</title><rect x="639.0" y="1107.0" width="96.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="642.0" y="1118.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (155 samples, 8.14%)</title><rect x="639.0" y="1091.0" width="96.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="642.0" y="1102.0">one/nio/htt..</text>
</g>
<g>
<title>RequestHandler0_status.handleRequest (153 samples, 8.04%)</title><rect x="639.7" y="1075.0" width="94.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="642.7" y="1086.0">RequestHand..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (150 samples, 7.88%)</title><rect x="639.7" y="1059.0" width="92.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="642.7" y="1070.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (149 samples, 7.83%)</title><rect x="639.7" y="1043.0" width="92.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="642.7" y="1054.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (12 samples, 0.63%)</title><rect x="639.7" y="1027.0" width="7.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="642.7" y="1038.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="640.3" y="1011.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="643.3" y="1022.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.05%)</title><rect x="640.9" y="1011.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="643.9" y="1022.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (9 samples, 0.47%)</title><rect x="641.5" y="1011.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="644.5" y="1022.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.16%)</title><rect x="642.1" y="995.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="645.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.11%)</title><rect x="642.8" y="979.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="645.8" y="990.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.05%)</title><rect x="643.4" y="963.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="646.4" y="974.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.26%)</title><rect x="644.0" y="995.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="647.0" y="1006.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.26%)</title><rect x="644.0" y="979.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="647.0" y="990.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.05%)</title><rect x="645.9" y="963.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="648.9" y="974.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.05%)</title><rect x="645.9" y="947.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="648.9" y="958.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.05%)</title><rect x="646.5" y="963.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="649.5" y="974.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (137 samples, 7.20%)</title><rect x="647.1" y="1027.0" width="84.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="650.1" y="1038.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/Session.write (136 samples, 7.14%)</title><rect x="647.7" y="1011.0" width="84.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="650.7" y="1022.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (134 samples, 7.04%)</title><rect x="647.7" y="995.0" width="83.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="650.7" y="1006.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (133 samples, 6.99%)</title><rect x="648.3" y="979.0" width="82.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="651.3" y="990.0">one/nio/n..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.05%)</title><rect x="648.3" y="963.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="651.3" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (132 samples, 6.93%)</title><rect x="649.0" y="963.0" width="81.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="652.0" y="974.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (132 samples, 6.93%)</title><rect x="649.0" y="947.0" width="81.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="652.0" y="958.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (132 samples, 6.93%)</title><rect x="649.0" y="931.0" width="81.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="652.0" y="942.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (130 samples, 6.83%)</title><rect x="649.0" y="915.0" width="80.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="652.0" y="926.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (130 samples, 6.83%)</title><rect x="649.0" y="899.0" width="80.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="652.0" y="910.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (130 samples, 6.83%)</title><rect x="649.0" y="883.0" width="80.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="652.0" y="894.0">sun/nio/c..</text>
</g>
<g>
<title>write (124 samples, 6.51%)</title><rect x="652.7" y="867.0" width="76.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="655.7" y="878.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.11%)</title><rect x="729.5" y="915.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="732.5" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.05%)</title><rect x="729.5" y="899.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="732.5" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.05%)</title><rect x="729.5" y="883.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="732.5" y="894.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="729.5" y="867.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="732.5" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.05%)</title><rect x="730.1" y="899.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="733.1" y="910.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.05%)</title><rect x="730.1" y="883.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="733.1" y="894.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.05%)</title><rect x="730.1" y="867.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="733.1" y="878.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.11%)</title><rect x="730.8" y="995.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="733.8" y="1006.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.05%)</title><rect x="730.8" y="979.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="733.8" y="990.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.05%)</title><rect x="730.8" y="963.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="733.8" y="974.0"></text>
</g>
<g>
<title>_res (1 samples, 0.05%)</title><rect x="730.8" y="947.0" width="0.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="733.8" y="958.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.05%)</title><rect x="731.4" y="979.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="734.4" y="990.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.05%)</title><rect x="732.0" y="1043.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="735.0" y="1054.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.status (3 samples, 0.16%)</title><rect x="732.6" y="1059.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="735.6" y="1070.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (3 samples, 0.16%)</title><rect x="732.6" y="1043.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="735.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (3 samples, 0.16%)</title><rect x="732.6" y="1027.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="735.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (2 samples, 0.11%)</title><rect x="733.2" y="1011.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="736.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (2 samples, 0.11%)</title><rect x="733.2" y="995.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="736.2" y="1006.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="733.9" y="979.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="736.9" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.handleDefault (1 samples, 0.05%)</title><rect x="734.5" y="1075.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="737.5" y="1086.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.05%)</title><rect x="734.5" y="1059.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="737.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.05%)</title><rect x="734.5" y="1043.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="737.5" y="1054.0"></text>
</g>
<g>
<title>RequestHandler0_status.handleRequest (1 samples, 0.05%)</title><rect x="734.5" y="1027.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="737.5" y="1038.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (5 samples, 0.26%)</title><rect x="735.1" y="1107.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="738.1" y="1118.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.11%)</title><rect x="735.1" y="1091.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="738.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.05%)</title><rect x="735.7" y="1075.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="738.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.05%)</title><rect x="735.7" y="1059.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="738.7" y="1070.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.05%)</title><rect x="735.7" y="1043.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="738.7" y="1054.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.16%)</title><rect x="736.3" y="1091.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="739.3" y="1102.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.16%)</title><rect x="736.3" y="1075.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="739.3" y="1086.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (1 samples, 0.05%)</title><rect x="737.6" y="1059.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="740.6" y="1070.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (3 samples, 0.16%)</title><rect x="738.2" y="1107.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="741.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.11%)</title><rect x="738.8" y="1091.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="741.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.11%)</title><rect x="738.8" y="1075.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="741.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/Character.digit (1 samples, 0.05%)</title><rect x="738.8" y="1059.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="741.8" y="1070.0"></text>
</g>
<g>
<title>java/lang/Character.digit (1 samples, 0.05%)</title><rect x="738.8" y="1043.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="741.8" y="1054.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.digit (1 samples, 0.05%)</title><rect x="738.8" y="1027.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="741.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.05%)</title><rect x="739.4" y="1059.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="742.4" y="1070.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.05%)</title><rect x="740.1" y="1107.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="743.1" y="1118.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.05%)</title><rect x="740.1" y="1091.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="743.1" y="1102.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (64 samples, 3.36%)</title><rect x="740.7" y="1123.0" width="39.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="743.7" y="1134.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (64 samples, 3.36%)</title><rect x="740.7" y="1107.0" width="39.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="743.7" y="1118.0">one..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.05%)</title><rect x="740.7" y="1091.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="743.7" y="1102.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="740.7" y="1075.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="743.7" y="1086.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="740.7" y="1059.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="743.7" y="1070.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="740.7" y="1043.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="743.7" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="740.7" y="1027.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="743.7" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (63 samples, 3.31%)</title><rect x="741.3" y="1091.0" width="39.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="744.3" y="1102.0">sun..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.42%)</title><rect x="741.3" y="1075.0" width="5.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="744.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (8 samples, 0.42%)</title><rect x="741.3" y="1059.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="744.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (5 samples, 0.26%)</title><rect x="741.3" y="1043.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="744.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.26%)</title><rect x="741.3" y="1027.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="744.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.26%)</title><rect x="741.3" y="1011.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="744.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (5 samples, 0.26%)</title><rect x="741.3" y="995.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="744.3" y="1006.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.05%)</title><rect x="742.5" y="979.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="745.5" y="990.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="743.2" y="979.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="746.2" y="990.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1 samples, 0.05%)</title><rect x="743.8" y="979.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="746.8" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.05%)</title><rect x="744.4" y="1043.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="747.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (1 samples, 0.05%)</title><rect x="744.4" y="1027.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="747.4" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.05%)</title><rect x="744.4" y="1011.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="747.4" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.05%)</title><rect x="744.4" y="995.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="747.4" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.11%)</title><rect x="745.0" y="1043.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="748.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.11%)</title><rect x="745.0" y="1027.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="748.0" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.11%)</title><rect x="745.0" y="1011.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="748.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.11%)</title><rect x="745.0" y="995.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="748.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.11%)</title><rect x="745.0" y="979.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="748.0" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (55 samples, 2.89%)</title><rect x="746.3" y="1075.0" width="34.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="749.3" y="1086.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (55 samples, 2.89%)</title><rect x="746.3" y="1059.0" width="34.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="749.3" y="1070.0">su..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (3 samples, 0.16%)</title><rect x="746.3" y="1043.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="749.3" y="1054.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3 samples, 0.16%)</title><rect x="746.3" y="1027.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="749.3" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.16%)</title><rect x="746.3" y="1011.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="749.3" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (3 samples, 0.16%)</title><rect x="746.3" y="995.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="749.3" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (3 samples, 0.16%)</title><rect x="746.3" y="979.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="749.3" y="990.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (3 samples, 0.16%)</title><rect x="746.3" y="963.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="749.3" y="974.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (3 samples, 0.16%)</title><rect x="746.3" y="947.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="749.3" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (52 samples, 2.73%)</title><rect x="748.1" y="1043.0" width="32.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="751.1" y="1054.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (52 samples, 2.73%)</title><rect x="748.1" y="1027.0" width="32.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="751.1" y="1038.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (52 samples, 2.73%)</title><rect x="748.1" y="1011.0" width="32.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="751.1" y="1022.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (4 samples, 0.21%)</title><rect x="748.7" y="995.0" width="2.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="751.7" y="1006.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.11%)</title><rect x="750.0" y="979.0" width="1.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="753.0" y="990.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.05%)</title><rect x="751.2" y="995.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="754.2" y="1006.0"></text>
</g>
<g>
<title>read (46 samples, 2.42%)</title><rect x="751.8" y="995.0" width="28.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="754.8" y="1006.0">read</text>
</g>
<g>
<title>[NIO Selector #3 tid=25603] (502 samples, 26.37%)</title><rect x="780.3" y="1187.0" width="311.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="783.3" y="1198.0">[NIO Selector #3 tid=25603]</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.05%)</title><rect x="780.3" y="1171.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="783.3" y="1182.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.05%)</title><rect x="780.3" y="1155.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="783.3" y="1166.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.05%)</title><rect x="780.3" y="1139.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="783.3" y="1150.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="780.3" y="1123.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="783.3" y="1134.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.05%)</title><rect x="780.3" y="1107.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="783.3" y="1118.0"></text>
</g>
<g>
<title>[unknown_Java] (5 samples, 0.26%)</title><rect x="781.0" y="1171.0" width="3.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="784.0" y="1182.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (496 samples, 26.05%)</title><rect x="784.1" y="1171.0" width="307.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="787.1" y="1182.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (1 samples, 0.05%)</title><rect x="784.1" y="1155.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="787.1" y="1166.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1 samples, 0.05%)</title><rect x="784.1" y="1139.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="787.1" y="1150.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (259 samples, 13.60%)</title><rect x="784.7" y="1155.0" width="160.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="787.7" y="1166.0">one/nio/net/JavaSele..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (1 samples, 0.05%)</title><rect x="784.7" y="1139.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="787.7" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.05%)</title><rect x="784.7" y="1123.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="787.7" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.05%)</title><rect x="784.7" y="1107.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="787.7" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (258 samples, 13.55%)</title><rect x="785.3" y="1139.0" width="159.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="788.3" y="1150.0">sun/nio/ch/SelectorI..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (258 samples, 13.55%)</title><rect x="785.3" y="1123.0" width="159.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="788.3" y="1134.0">sun/nio/ch/SelectorI..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (258 samples, 13.55%)</title><rect x="785.3" y="1107.0" width="159.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="788.3" y="1118.0">sun/nio/ch/KQueueSel..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (252 samples, 13.24%)</title><rect x="785.3" y="1091.0" width="156.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="788.3" y="1102.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>kevent (239 samples, 12.55%)</title><rect x="793.4" y="1075.0" width="148.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="796.4" y="1086.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (5 samples, 0.26%)</title><rect x="941.5" y="1091.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="944.5" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.11%)</title><rect x="941.5" y="1075.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="944.5" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.05%)</title><rect x="941.5" y="1059.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="944.5" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.05%)</title><rect x="942.1" y="1059.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="945.1" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.16%)</title><rect x="942.7" y="1075.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="945.7" y="1086.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.11%)</title><rect x="942.7" y="1059.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="945.7" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.11%)</title><rect x="942.7" y="1043.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="945.7" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.11%)</title><rect x="942.7" y="1027.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="945.7" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.05%)</title><rect x="942.7" y="1011.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="945.7" y="1022.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.05%)</title><rect x="943.3" y="1011.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="946.3" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.nioReadyOps (1 samples, 0.05%)</title><rect x="944.0" y="1059.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="947.0" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (1 samples, 0.05%)</title><rect x="944.6" y="1091.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="947.6" y="1102.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (1 samples, 0.05%)</title><rect x="944.6" y="1075.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="947.6" y="1086.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.05%)</title><rect x="944.6" y="1059.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="947.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.05%)</title><rect x="944.6" y="1043.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="947.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.05%)</title><rect x="944.6" y="1027.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="947.6" y="1038.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (236 samples, 12.39%)</title><rect x="945.2" y="1155.0" width="146.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="948.2" y="1166.0">one/nio/net/Sessio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (236 samples, 12.39%)</title><rect x="945.2" y="1139.0" width="146.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="948.2" y="1150.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (155 samples, 8.14%)</title><rect x="945.2" y="1123.0" width="96.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="948.2" y="1134.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (142 samples, 7.46%)</title><rect x="947.1" y="1107.0" width="88.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="950.1" y="1118.0">one/nio/ht..</text>
</g>
<g>
<title>g1_post_barrier_slow (1 samples, 0.05%)</title><rect x="947.1" y="1091.0" width="0.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="950.1" y="1102.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (141 samples, 7.41%)</title><rect x="947.7" y="1091.0" width="87.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="950.7" y="1102.0">one/nio/ht..</text>
</g>
<g>
<title>RequestHandler0_status.handleRequest (140 samples, 7.35%)</title><rect x="947.7" y="1075.0" width="86.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="950.7" y="1086.0">RequestHan..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (138 samples, 7.25%)</title><rect x="947.7" y="1059.0" width="85.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="950.7" y="1070.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (137 samples, 7.20%)</title><rect x="947.7" y="1043.0" width="84.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="950.7" y="1054.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (12 samples, 0.63%)</title><rect x="947.7" y="1027.0" width="7.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="950.7" y="1038.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (11 samples, 0.58%)</title><rect x="948.3" y="1011.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="951.3" y="1022.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.05%)</title><rect x="948.3" y="995.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="951.3" y="1006.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (6 samples, 0.32%)</title><rect x="948.9" y="995.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="951.9" y="1006.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.21%)</title><rect x="952.6" y="995.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="955.6" y="1006.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.21%)</title><rect x="952.6" y="979.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="955.6" y="990.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (125 samples, 6.57%)</title><rect x="955.1" y="1027.0" width="77.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="958.1" y="1038.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/Session.write (125 samples, 6.57%)</title><rect x="955.1" y="1011.0" width="77.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="958.1" y="1022.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (121 samples, 6.36%)</title><rect x="955.7" y="995.0" width="75.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="958.7" y="1006.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (121 samples, 6.36%)</title><rect x="955.7" y="979.0" width="75.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="958.7" y="990.0">one/nio/..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (121 samples, 6.36%)</title><rect x="955.7" y="963.0" width="75.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="958.7" y="974.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (121 samples, 6.36%)</title><rect x="955.7" y="947.0" width="75.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="958.7" y="958.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (121 samples, 6.36%)</title><rect x="955.7" y="931.0" width="75.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="958.7" y="942.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (118 samples, 6.20%)</title><rect x="955.7" y="915.0" width="73.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="958.7" y="926.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (118 samples, 6.20%)</title><rect x="955.7" y="899.0" width="73.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="958.7" y="910.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (118 samples, 6.20%)</title><rect x="955.7" y="883.0" width="73.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="958.7" y="894.0">sun/nio/..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.05%)</title><rect x="958.8" y="867.0" width="0.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="961.8" y="878.0"></text>
</g>
<g>
<title>write (112 samples, 5.88%)</title><rect x="959.5" y="867.0" width="69.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="962.5" y="878.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.16%)</title><rect x="1028.9" y="915.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1031.9" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.05%)</title><rect x="1029.5" y="899.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1032.5" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.05%)</title><rect x="1029.5" y="883.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1032.5" y="894.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="1029.5" y="867.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1032.5" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.05%)</title><rect x="1030.1" y="899.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1033.1" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (1 samples, 0.05%)</title><rect x="1030.1" y="883.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1033.1" y="894.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.16%)</title><rect x="1030.7" y="995.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1033.7" y="1006.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.05%)</title><rect x="1031.3" y="979.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1034.3" y="990.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.05%)</title><rect x="1031.3" y="963.0" width="0.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1034.3" y="974.0"></text>
</g>
<g>
<title>_res (1 samples, 0.05%)</title><rect x="1031.3" y="947.0" width="0.7" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1034.3" y="958.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.05%)</title><rect x="1032.0" y="979.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1035.0" y="990.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.05%)</title><rect x="1032.6" y="1043.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1035.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.05%)</title><rect x="1032.6" y="1027.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1035.6" y="1038.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.status (2 samples, 0.11%)</title><rect x="1033.2" y="1059.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1036.2" y="1070.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (2 samples, 0.11%)</title><rect x="1033.2" y="1043.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1036.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.05%)</title><rect x="1033.2" y="1027.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1036.2" y="1038.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1033.8" y="1027.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1036.8" y="1038.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.handleDefault (1 samples, 0.05%)</title><rect x="1034.4" y="1075.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1037.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.05%)</title><rect x="1034.4" y="1059.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1037.4" y="1070.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.11%)</title><rect x="1035.1" y="1107.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1038.1" y="1118.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.11%)</title><rect x="1035.1" y="1091.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1038.1" y="1102.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.11%)</title><rect x="1035.1" y="1075.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1038.1" y="1086.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (2 samples, 0.11%)</title><rect x="1036.3" y="1107.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1039.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.05%)</title><rect x="1036.3" y="1091.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1039.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.05%)</title><rect x="1036.3" y="1075.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1039.3" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.05%)</title><rect x="1036.3" y="1059.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1039.3" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.05%)</title><rect x="1036.3" y="1043.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1039.3" y="1054.0"></text>
</g>
<g>
<title>one/nio/http/Request.setBody (1 samples, 0.05%)</title><rect x="1036.9" y="1091.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1039.9" y="1102.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (1 samples, 0.05%)</title><rect x="1037.5" y="1107.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1040.5" y="1118.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.16%)</title><rect x="1038.2" y="1107.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1041.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.05%)</title><rect x="1038.2" y="1091.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1041.2" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.11%)</title><rect x="1038.8" y="1091.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1041.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.11%)</title><rect x="1038.8" y="1075.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1041.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.11%)</title><rect x="1038.8" y="1059.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1041.8" y="1070.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.11%)</title><rect x="1038.8" y="1043.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1041.8" y="1054.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (2 samples, 0.11%)</title><rect x="1038.8" y="1027.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1041.8" y="1038.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.11%)</title><rect x="1040.0" y="1107.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1043.0" y="1118.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (81 samples, 4.25%)</title><rect x="1041.3" y="1123.0" width="50.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1044.3" y="1134.0">one/n..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (81 samples, 4.25%)</title><rect x="1041.3" y="1107.0" width="50.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1044.3" y="1118.0">one/n..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.05%)</title><rect x="1041.3" y="1091.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1044.3" y="1102.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1041.3" y="1075.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1044.3" y="1086.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1041.3" y="1059.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1044.3" y="1070.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1041.3" y="1043.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1044.3" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="1041.3" y="1027.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1044.3" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="1041.3" y="1011.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1044.3" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.05%)</title><rect x="1041.3" y="995.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1044.3" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (80 samples, 4.20%)</title><rect x="1041.9" y="1091.0" width="49.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1044.9" y="1102.0">sun/n..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (11 samples, 0.58%)</title><rect x="1041.9" y="1075.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1044.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (11 samples, 0.58%)</title><rect x="1041.9" y="1059.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1044.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (10 samples, 0.53%)</title><rect x="1041.9" y="1043.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1044.9" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (10 samples, 0.53%)</title><rect x="1041.9" y="1027.0" width="6.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1044.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (10 samples, 0.53%)</title><rect x="1041.9" y="1011.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1044.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (10 samples, 0.53%)</title><rect x="1041.9" y="995.0" width="6.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1044.9" y="1006.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="1045.0" y="979.0" width="0.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1048.0" y="990.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (1 samples, 0.05%)</title><rect x="1045.6" y="979.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1048.6" y="990.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkSize (1 samples, 0.05%)</title><rect x="1046.2" y="979.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1049.2" y="990.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.05%)</title><rect x="1046.8" y="979.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1049.8" y="990.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.05%)</title><rect x="1046.8" y="963.0" width="0.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1049.8" y="974.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.05%)</title><rect x="1046.8" y="947.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1049.8" y="958.0"></text>
</g>
<g>
<title>_res (1 samples, 0.05%)</title><rect x="1046.8" y="931.0" width="0.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1049.8" y="942.0"></text>
</g>
<g>
<title>unsafe_arraycopy (1 samples, 0.05%)</title><rect x="1047.5" y="979.0" width="0.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1050.5" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.05%)</title><rect x="1048.1" y="1043.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1051.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.05%)</title><rect x="1048.1" y="1027.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1051.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.05%)</title><rect x="1048.1" y="1011.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1051.1" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.05%)</title><rect x="1048.1" y="995.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1051.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.05%)</title><rect x="1048.1" y="979.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1051.1" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (69 samples, 3.62%)</title><rect x="1048.7" y="1075.0" width="42.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1051.7" y="1086.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (69 samples, 3.62%)</title><rect x="1048.7" y="1059.0" width="42.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1051.7" y="1070.0">sun/..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (3 samples, 0.16%)</title><rect x="1048.7" y="1043.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1051.7" y="1054.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3 samples, 0.16%)</title><rect x="1048.7" y="1027.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1051.7" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.16%)</title><rect x="1048.7" y="1011.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1051.7" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (3 samples, 0.16%)</title><rect x="1048.7" y="995.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1051.7" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (3 samples, 0.16%)</title><rect x="1048.7" y="979.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1051.7" y="990.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (2 samples, 0.11%)</title><rect x="1049.3" y="963.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1052.3" y="974.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (2 samples, 0.11%)</title><rect x="1049.3" y="947.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1052.3" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (65 samples, 3.41%)</title><rect x="1050.6" y="1043.0" width="40.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1053.6" y="1054.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (65 samples, 3.41%)</title><rect x="1050.6" y="1027.0" width="40.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1053.6" y="1038.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (65 samples, 3.41%)</title><rect x="1050.6" y="1011.0" width="40.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1053.6" y="1022.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.05%)</title><rect x="1053.0" y="995.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1056.0" y="1006.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.05%)</title><rect x="1053.0" y="979.0" width="0.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1056.0" y="990.0"></text>
</g>
<g>
<title>read (60 samples, 3.15%)</title><rect x="1053.7" y="995.0" width="37.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1056.7" y="1006.0">read</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.05%)</title><rect x="1090.8" y="1043.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1093.8" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.05%)</title><rect x="1090.8" y="1027.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1093.8" y="1038.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.05%)</title><rect x="1090.8" y="1011.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1093.8" y="1022.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.05%)</title><rect x="1090.8" y="995.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1093.8" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="1090.8" y="979.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1093.8" y="990.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.05%)</title><rect x="1090.8" y="963.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1093.8" y="974.0"></text>
</g>
<g>
<title>[tid=12035] (1 samples, 0.05%)</title><rect x="1091.5" y="1187.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1094.5" y="1198.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.05%)</title><rect x="1091.5" y="1171.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1094.5" y="1182.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.05%)</title><rect x="1091.5" y="1155.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1094.5" y="1166.0"></text>
</g>
<g>
<title>_pthread_body (1 samples, 0.05%)</title><rect x="1091.5" y="1139.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1094.5" y="1150.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.05%)</title><rect x="1091.5" y="1123.0" width="0.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1094.5" y="1134.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.05%)</title><rect x="1091.5" y="1107.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1094.5" y="1118.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (1 samples, 0.05%)</title><rect x="1091.5" y="1091.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1094.5" y="1102.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (1 samples, 0.05%)</title><rect x="1091.5" y="1075.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1094.5" y="1086.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (1 samples, 0.05%)</title><rect x="1091.5" y="1059.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1094.5" y="1070.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.05%)</title><rect x="1091.5" y="1043.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1094.5" y="1054.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (1 samples, 0.05%)</title><rect x="1091.5" y="1027.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1094.5" y="1038.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (1 samples, 0.05%)</title><rect x="1091.5" y="1011.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1094.5" y="1022.0"></text>
</g>
<g>
<title>[tid=12291] (1 samples, 0.05%)</title><rect x="1092.1" y="1187.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1095.1" y="1198.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.05%)</title><rect x="1092.1" y="1171.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1095.1" y="1182.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.05%)</title><rect x="1092.1" y="1155.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1095.1" y="1166.0"></text>
</g>
<g>
<title>_pthread_body (1 samples, 0.05%)</title><rect x="1092.1" y="1139.0" width="0.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1095.1" y="1150.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.05%)</title><rect x="1092.1" y="1123.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1095.1" y="1134.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.05%)</title><rect x="1092.1" y="1107.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1095.1" y="1118.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.05%)</title><rect x="1092.1" y="1091.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1095.1" y="1102.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.05%)</title><rect x="1092.1" y="1075.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1095.1" y="1086.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.05%)</title><rect x="1092.1" y="1059.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1095.1" y="1070.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.05%)</title><rect x="1092.1" y="1043.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1095.1" y="1054.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (1 samples, 0.05%)</title><rect x="1092.1" y="1027.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1095.1" y="1038.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.05%)</title><rect x="1092.1" y="1011.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1095.1" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (1 samples, 0.05%)</title><rect x="1092.1" y="995.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1095.1" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::merge_per_thread_state_info(G1ParScanThreadStateSet*) (1 samples, 0.05%)</title><rect x="1092.1" y="979.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1095.1" y="990.0"></text>
</g>
<g>
<title>G1ParScanThreadStateSet::flush() (1 samples, 0.05%)</title><rect x="1092.1" y="963.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1095.1" y="974.0"></text>
</g>
<g>
<title>G1ParScanThreadState::~G1ParScanThreadState() (1 samples, 0.05%)</title><rect x="1092.1" y="947.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1095.1" y="958.0"></text>
</g>
<g>
<title>G1ParScanThreadState::~G1ParScanThreadState() (1 samples, 0.05%)</title><rect x="1092.1" y="931.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1095.1" y="942.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.05%)</title><rect x="1092.1" y="915.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1095.1" y="926.0"></text>
</g>
<g>
<title>tiny_free_no_lock (1 samples, 0.05%)</title><rect x="1092.1" y="899.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1095.1" y="910.0"></text>
</g>
<g>
<title>[tid=16387] (143 samples, 7.51%)</title><rect x="1092.7" y="1187.0" width="88.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1095.7" y="1198.0">[tid=16387]</text>
</g>
<g>
<title>thread_start (143 samples, 7.51%)</title><rect x="1092.7" y="1171.0" width="88.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1095.7" y="1182.0">thread_start</text>
</g>
<g>
<title>_pthread_start (143 samples, 7.51%)</title><rect x="1092.7" y="1155.0" width="88.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1095.7" y="1166.0">_pthread_s..</text>
</g>
<g>
<title>_pthread_body (143 samples, 7.51%)</title><rect x="1092.7" y="1139.0" width="88.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1095.7" y="1150.0">_pthread_b..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (143 samples, 7.51%)</title><rect x="1092.7" y="1123.0" width="88.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1095.7" y="1134.0">thread_nat..</text>
</g>
<g>
<title>Thread::call_run() (143 samples, 7.51%)</title><rect x="1092.7" y="1107.0" width="88.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1095.7" y="1118.0">Thread::ca..</text>
</g>
<g>
<title>JavaThread::run() (143 samples, 7.51%)</title><rect x="1092.7" y="1091.0" width="88.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1095.7" y="1102.0">JavaThread..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (143 samples, 7.51%)</title><rect x="1092.7" y="1075.0" width="88.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1095.7" y="1086.0">JavaThread..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (143 samples, 7.51%)</title><rect x="1092.7" y="1059.0" width="88.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1095.7" y="1070.0">CompileBro..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (142 samples, 7.46%)</title><rect x="1092.7" y="1043.0" width="88.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1095.7" y="1054.0">CompileBro..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (142 samples, 7.46%)</title><rect x="1092.7" y="1027.0" width="88.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1095.7" y="1038.0">C2Compiler..</text>
</g>
<g>
<title>Arena::~Arena() (2 samples, 0.11%)</title><rect x="1092.7" y="1011.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1095.7" y="1022.0"></text>
</g>
<g>
<title>Arena::destruct_contents() (2 samples, 0.11%)</title><rect x="1092.7" y="995.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1095.7" y="1006.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (2 samples, 0.11%)</title><rect x="1092.7" y="979.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1095.7" y="990.0"></text>
</g>
<g>
<title>free_large (2 samples, 0.11%)</title><rect x="1092.7" y="963.0" width="1.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1095.7" y="974.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (2 samples, 0.11%)</title><rect x="1092.7" y="947.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1095.7" y="958.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (2 samples, 0.11%)</title><rect x="1092.7" y="931.0" width="1.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1095.7" y="942.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (139 samples, 7.30%)</title><rect x="1093.9" y="1011.0" width="86.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1096.9" y="1022.0">Compile::C..</text>
</g>
<g>
<title>Compile::Code_Gen() (82 samples, 4.31%)</title><rect x="1093.9" y="995.0" width="50.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1096.9" y="1006.0">Compi..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.11%)</title><rect x="1093.9" y="979.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1096.9" y="990.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.11%)</title><rect x="1093.9" y="963.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1096.9" y="974.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.05%)</title><rect x="1094.6" y="947.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1097.6" y="958.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.05%)</title><rect x="1095.2" y="979.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1098.2" y="990.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.05%)</title><rect x="1095.2" y="963.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1098.2" y="974.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.05%)</title><rect x="1095.2" y="947.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1098.2" y="958.0"></text>
</g>
<g>
<title>DebugInformationRecorder::serialize_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.05%)</title><rect x="1095.2" y="931.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1098.2" y="942.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.05%)</title><rect x="1095.2" y="915.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1098.2" y="926.0"></text>
</g>
<g>
<title>DIR_Chunk* GrowableArray&lt;DIR_Chunk*&gt;::insert_sorted&lt;&amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;) (1 samples, 0.05%)</title><rect x="1095.2" y="899.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1098.2" y="910.0"></text>
</g>
<g>
<title>int GrowableArray&lt;DIR_Chunk*&gt;::find_sorted&lt;DIR_Chunk*, &amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;, bool&amp;) (1 samples, 0.05%)</title><rect x="1095.2" y="883.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1098.2" y="894.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.05%)</title><rect x="1095.2" y="867.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1098.2" y="878.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 0.32%)</title><rect x="1095.8" y="979.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1098.8" y="990.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (6 samples, 0.32%)</title><rect x="1095.8" y="963.0" width="3.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1098.8" y="974.0"></text>
</g>
<g>
<title>Matcher::collect_null_checks(Node*, Node*) (1 samples, 0.05%)</title><rect x="1096.4" y="947.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1099.4" y="958.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.05%)</title><rect x="1097.0" y="947.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1100.0" y="958.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.05%)</title><rect x="1097.0" y="931.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1100.0" y="942.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.05%)</title><rect x="1097.0" y="915.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1100.0" y="926.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.05%)</title><rect x="1097.0" y="899.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1100.0" y="910.0"></text>
</g>
<g>
<title>ChunkPool::free(Chunk*) (1 samples, 0.05%)</title><rect x="1097.0" y="883.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1100.0" y="894.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.16%)</title><rect x="1097.7" y="947.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1100.7" y="958.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (3 samples, 0.16%)</title><rect x="1097.7" y="931.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1100.7" y="942.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (3 samples, 0.16%)</title><rect x="1097.7" y="915.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1100.7" y="926.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (3 samples, 0.16%)</title><rect x="1097.7" y="899.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1100.7" y="910.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (3 samples, 0.16%)</title><rect x="1097.7" y="883.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1100.7" y="894.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.11%)</title><rect x="1098.3" y="867.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1101.3" y="878.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.05%)</title><rect x="1098.9" y="851.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1101.9" y="862.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.05%)</title><rect x="1098.9" y="835.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1101.9" y="846.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.05%)</title><rect x="1098.9" y="819.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1101.9" y="830.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.05%)</title><rect x="1098.9" y="803.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1101.9" y="814.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.05%)</title><rect x="1098.9" y="787.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1101.9" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (8 samples, 0.42%)</title><rect x="1099.5" y="979.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1102.5" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (8 samples, 0.42%)</title><rect x="1099.5" y="963.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1102.5" y="974.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.05%)</title><rect x="1099.5" y="947.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1102.5" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.05%)</title><rect x="1100.1" y="947.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1103.1" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.05%)</title><rect x="1100.1" y="931.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1103.1" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (2 samples, 0.11%)</title><rect x="1100.8" y="947.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1103.8" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::adjust_register_pressure(Node*, Block*, long*, bool) (1 samples, 0.05%)</title><rect x="1101.4" y="931.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1104.4" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.05%)</title><rect x="1102.0" y="947.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1105.0" y="958.0"></text>
</g>
<g>
<title>RegMask::AND(RegMask const&amp;) (1 samples, 0.05%)</title><rect x="1102.0" y="931.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1105.0" y="942.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.05%)</title><rect x="1102.6" y="947.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1105.6" y="958.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.05%)</title><rect x="1102.6" y="931.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1105.6" y="942.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.11%)</title><rect x="1103.2" y="947.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1106.2" y="958.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.11%)</title><rect x="1103.2" y="931.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1106.2" y="942.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.05%)</title><rect x="1103.2" y="915.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1106.2" y="926.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (1 samples, 0.05%)</title><rect x="1103.9" y="915.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1106.9" y="926.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.05%)</title><rect x="1103.9" y="899.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1106.9" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (64 samples, 3.36%)</title><rect x="1104.5" y="979.0" width="39.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1107.5" y="990.0">Pha..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 0.16%)</title><rect x="1104.5" y="963.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1107.5" y="974.0"></text>
</g>
<g>
<title>LiveRangeMap::find(Node const*) (1 samples, 0.05%)</title><rect x="1105.7" y="947.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1108.7" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.05%)</title><rect x="1106.3" y="963.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1109.3" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.05%)</title><rect x="1106.3" y="947.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1109.3" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.05%)</title><rect x="1106.3" y="931.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1109.3" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (5 samples, 0.26%)</title><rect x="1107.0" y="963.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1110.0" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.05%)</title><rect x="1107.6" y="947.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1110.6" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 0.16%)</title><rect x="1108.2" y="947.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1111.2" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.05%)</title><rect x="1109.4" y="931.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1112.4" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 0.32%)</title><rect x="1110.1" y="963.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1113.1" y="974.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.05%)</title><rect x="1113.2" y="947.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1116.2" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.05%)</title><rect x="1113.8" y="963.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1116.8" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (17 samples, 0.89%)</title><rect x="1114.4" y="963.0" width="10.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1117.4" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (2 samples, 0.11%)</title><rect x="1115.0" y="947.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1118.0" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.11%)</title><rect x="1115.0" y="931.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1118.0" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (9 samples, 0.47%)</title><rect x="1116.2" y="947.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1119.2" y="958.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.11%)</title><rect x="1116.2" y="931.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1119.2" y="942.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.05%)</title><rect x="1117.5" y="931.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1120.5" y="942.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.05%)</title><rect x="1118.1" y="931.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1121.1" y="942.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (5 samples, 0.26%)</title><rect x="1118.7" y="931.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1121.7" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (4 samples, 0.21%)</title><rect x="1121.8" y="947.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1124.8" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.11%)</title><rect x="1123.1" y="931.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1126.1" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_interference_from_copy(Block*, unsigned int, unsigned int, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.05%)</title><rect x="1124.3" y="947.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1127.3" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.05%)</title><rect x="1124.9" y="963.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1127.9" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.05%)</title><rect x="1124.9" y="947.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1127.9" y="958.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.05%)</title><rect x="1124.9" y="931.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1127.9" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (7 samples, 0.37%)</title><rect x="1125.5" y="963.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1128.5" y="974.0"></text>
</g>
<g>
<title>RegMask::AND(RegMask const&amp;) (1 samples, 0.05%)</title><rect x="1128.0" y="947.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1131.0" y="958.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.05%)</title><rect x="1128.6" y="947.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.6" y="958.0"></text>
</g>
<g>
<title>RegMask::is_bound(unsigned int) const (1 samples, 0.05%)</title><rect x="1129.3" y="947.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1132.3" y="958.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.05%)</title><rect x="1129.3" y="931.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1132.3" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (3 samples, 0.16%)</title><rect x="1129.9" y="963.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.9" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (7 samples, 0.37%)</title><rect x="1131.7" y="963.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1134.7" y="974.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.05%)</title><rect x="1133.0" y="947.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1136.0" y="958.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="1133.0" y="931.0" width="0.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1136.0" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.16%)</title><rect x="1133.6" y="947.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1136.6" y="958.0"></text>
</g>
<g>
<title>RegMask::find_first_elem() const (1 samples, 0.05%)</title><rect x="1135.5" y="947.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.5" y="958.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.05%)</title><rect x="1135.5" y="931.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1138.5" y="942.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.11%)</title><rect x="1136.1" y="963.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1139.1" y="974.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.11%)</title><rect x="1136.1" y="947.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1139.1" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.05%)</title><rect x="1136.7" y="931.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1139.7" y="942.0"></text>
</g>
<g>
<title>Block::has_uncommon_code() const (1 samples, 0.05%)</title><rect x="1136.7" y="915.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1139.7" y="926.0"></text>
</g>
<g>
<title>Block::end() const (1 samples, 0.05%)</title><rect x="1136.7" y="899.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1139.7" y="910.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.05%)</title><rect x="1137.3" y="963.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.3" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.05%)</title><rect x="1137.3" y="947.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1140.3" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.05%)</title><rect x="1137.3" y="931.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1140.3" y="942.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.05%)</title><rect x="1137.9" y="963.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1140.9" y="974.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.05%)</title><rect x="1137.9" y="947.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.9" y="958.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (9 samples, 0.47%)</title><rect x="1138.6" y="963.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1141.6" y="974.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.05%)</title><rect x="1141.7" y="947.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.7" y="958.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.11%)</title><rect x="1142.3" y="947.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1145.3" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.05%)</title><rect x="1142.9" y="931.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1145.9" y="942.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.05%)</title><rect x="1143.5" y="947.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1146.5" y="958.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (1 samples, 0.05%)</title><rect x="1143.5" y="931.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1146.5" y="942.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.05%)</title><rect x="1143.5" y="915.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.5" y="926.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1143.5" y="899.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.5" y="910.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 0.05%)</title><rect x="1144.1" y="979.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.1" y="990.0"></text>
</g>
<g>
<title>Compile::Optimize() (41 samples, 2.15%)</title><rect x="1144.8" y="995.0" width="25.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1147.8" y="1006.0">C..</text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (4 samples, 0.21%)</title><rect x="1144.8" y="979.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1147.8" y="990.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (3 samples, 0.16%)</title><rect x="1144.8" y="963.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.8" y="974.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (1 samples, 0.05%)</title><rect x="1144.8" y="947.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.8" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1144.8" y="931.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.8" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1144.8" y="915.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1147.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1144.8" y="899.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1144.8" y="883.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1144.8" y="867.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.8" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1144.8" y="851.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.8" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1144.8" y="835.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1147.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1144.8" y="819.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1147.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1144.8" y="803.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1144.8" y="787.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.8" y="798.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.05%)</title><rect x="1144.8" y="771.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.8" y="782.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.05%)</title><rect x="1144.8" y="755.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.8" y="766.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.05%)</title><rect x="1144.8" y="739.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1147.8" y="750.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.05%)</title><rect x="1144.8" y="723.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1147.8" y="734.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.05%)</title><rect x="1144.8" y="707.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1147.8" y="718.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.05%)</title><rect x="1144.8" y="691.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.8" y="702.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.05%)</title><rect x="1144.8" y="675.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.8" y="686.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.11%)</title><rect x="1145.4" y="947.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.4" y="958.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.05%)</title><rect x="1145.4" y="931.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.4" y="942.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.05%)</title><rect x="1146.0" y="931.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.0" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.05%)</title><rect x="1146.6" y="963.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.6" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.05%)</title><rect x="1146.6" y="947.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.6" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.05%)</title><rect x="1146.6" y="931.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.6" y="942.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.05%)</title><rect x="1146.6" y="915.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.6" y="926.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.05%)</title><rect x="1146.6" y="899.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.6" y="910.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.05%)</title><rect x="1147.2" y="979.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1150.2" y="990.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.05%)</title><rect x="1147.2" y="963.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.2" y="974.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.05%)</title><rect x="1147.2" y="947.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.2" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 0.16%)</title><rect x="1147.9" y="979.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.9" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 0.16%)</title><rect x="1147.9" y="963.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.9" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.05%)</title><rect x="1147.9" y="947.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.9" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.05%)</title><rect x="1148.5" y="947.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.5" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.05%)</title><rect x="1148.5" y="931.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.5" y="942.0"></text>
</g>
<g>
<title>GrowableArray&lt;PointsToNode*&gt;::append(PointsToNode* const&amp;) (1 samples, 0.05%)</title><rect x="1148.5" y="915.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.5" y="926.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.05%)</title><rect x="1149.1" y="947.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.1" y="958.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.05%)</title><rect x="1149.1" y="931.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.1" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (28 samples, 1.47%)</title><rect x="1149.7" y="979.0" width="17.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.7" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (7 samples, 0.37%)</title><rect x="1149.7" y="963.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.7" y="974.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.05%)</title><rect x="1153.4" y="947.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.4" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.05%)</title><rect x="1153.4" y="931.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.4" y="942.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.05%)</title><rect x="1153.4" y="915.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.4" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.26%)</title><rect x="1154.1" y="963.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1157.1" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (2 samples, 0.11%)</title><rect x="1155.9" y="947.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.9" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.11%)</title><rect x="1155.9" y="931.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1158.9" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 0.11%)</title><rect x="1155.9" y="915.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.9" y="926.0"></text>
</g>
<g>
<title>Node_Array::map(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1155.9" y="899.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.9" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.05%)</title><rect x="1156.5" y="899.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.5" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update_helper(Node*) const (1 samples, 0.05%)</title><rect x="1156.5" y="883.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.5" y="894.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.05%)</title><rect x="1156.5" y="867.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.5" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (9 samples, 0.47%)</title><rect x="1157.2" y="963.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.2" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (7 samples, 0.37%)</title><rect x="1158.4" y="947.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.4" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.05%)</title><rect x="1158.4" y="931.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.4" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.05%)</title><rect x="1158.4" y="915.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.4" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (5 samples, 0.26%)</title><rect x="1159.0" y="931.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.0" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.11%)</title><rect x="1159.0" y="915.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.0" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (1 samples, 0.05%)</title><rect x="1159.0" y="899.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.0" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.05%)</title><rect x="1159.0" y="883.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.0" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.05%)</title><rect x="1159.6" y="899.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.6" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.05%)</title><rect x="1159.6" y="883.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.6" y="894.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.05%)</title><rect x="1159.6" y="867.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.6" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.05%)</title><rect x="1160.3" y="915.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.3" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.05%)</title><rect x="1160.3" y="899.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.3" y="910.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.05%)</title><rect x="1160.3" y="883.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.3" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 0.11%)</title><rect x="1160.9" y="915.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.9" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.11%)</title><rect x="1160.9" y="899.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.9" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.05%)</title><rect x="1162.1" y="931.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1165.1" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.05%)</title><rect x="1162.1" y="915.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.1" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.16%)</title><rect x="1162.7" y="963.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.7" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.05%)</title><rect x="1164.0" y="947.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.0" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 0.11%)</title><rect x="1164.6" y="963.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.6" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.05%)</title><rect x="1165.2" y="947.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.2" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.05%)</title><rect x="1165.2" y="931.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.2" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.05%)</title><rect x="1165.2" y="915.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.2" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.05%)</title><rect x="1165.2" y="899.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.2" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.11%)</title><rect x="1165.8" y="963.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.8" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.11%)</title><rect x="1165.8" y="947.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.8" y="958.0"></text>
</g>
<g>
<title>AddNode::Value(PhaseGVN*) const (1 samples, 0.05%)</title><rect x="1165.8" y="931.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.8" y="942.0"></text>
</g>
<g>
<title>AddNode::add_of_identity(Type const*, Type const*) const (1 samples, 0.05%)</title><rect x="1165.8" y="915.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.8" y="926.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.05%)</title><rect x="1165.8" y="899.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.8" y="910.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.05%)</title><rect x="1165.8" y="883.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.8" y="894.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.05%)</title><rect x="1165.8" y="867.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.8" y="878.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.05%)</title><rect x="1165.8" y="851.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.8" y="862.0"></text>
</g>
<g>
<title>TypeInt::eq(Type const*) const (1 samples, 0.05%)</title><rect x="1165.8" y="835.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.8" y="846.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1166.4" y="931.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.4" y="942.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1166.4" y="915.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.4" y="926.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1166.4" y="899.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.4" y="910.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.05%)</title><rect x="1166.4" y="883.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.4" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.21%)</title><rect x="1167.1" y="979.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.1" y="990.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseGVN*) const (1 samples, 0.05%)</title><rect x="1167.1" y="963.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.1" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.16%)</title><rect x="1167.7" y="963.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.7" y="974.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.05%)</title><rect x="1167.7" y="947.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.7" y="958.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.05%)</title><rect x="1167.7" y="931.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.7" y="942.0"></text>
</g>
<g>
<title>NodeHash::hash_insert(Node*) (1 samples, 0.05%)</title><rect x="1167.7" y="915.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.7" y="926.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.05%)</title><rect x="1167.7" y="899.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.7" y="910.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.05%)</title><rect x="1167.7" y="883.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.7" y="894.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.05%)</title><rect x="1167.7" y="867.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.7" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.05%)</title><rect x="1168.3" y="947.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.3" y="958.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1168.9" y="947.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.9" y="958.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.05%)</title><rect x="1169.5" y="979.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.5" y="990.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_arraycopy_node(ArrayCopyNode*) (1 samples, 0.05%)</title><rect x="1169.5" y="963.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.5" y="974.0"></text>
</g>
<g>
<title>ConstraintCastNode::Value(PhaseGVN*) const (1 samples, 0.05%)</title><rect x="1169.5" y="947.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.5" y="958.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.05%)</title><rect x="1169.5" y="931.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.5" y="942.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.05%)</title><rect x="1169.5" y="915.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.5" y="926.0"></text>
</g>
<g>
<title>TypeAryPtr::xmeet_helper(Type const*) const (1 samples, 0.05%)</title><rect x="1169.5" y="899.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.5" y="910.0"></text>
</g>
<g>
<title>CompileWrapper::CompileWrapper(Compile*) (1 samples, 0.05%)</title><rect x="1170.2" y="995.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.2" y="1006.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (1 samples, 0.05%)</title><rect x="1170.2" y="979.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.2" y="990.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.05%)</title><rect x="1170.2" y="963.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.2" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (14 samples, 0.74%)</title><rect x="1170.8" y="995.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.8" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (14 samples, 0.74%)</title><rect x="1170.8" y="979.0" width="8.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.8" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (14 samples, 0.74%)</title><rect x="1170.8" y="963.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.8" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (14 samples, 0.74%)</title><rect x="1170.8" y="947.0" width="8.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.8" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (12 samples, 0.63%)</title><rect x="1170.8" y="931.0" width="7.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.8" y="942.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (3 samples, 0.16%)</title><rect x="1170.8" y="915.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.8" y="926.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (3 samples, 0.16%)</title><rect x="1170.8" y="899.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.8" y="910.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (3 samples, 0.16%)</title><rect x="1170.8" y="883.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.8" y="894.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (3 samples, 0.16%)</title><rect x="1170.8" y="867.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.8" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (3 samples, 0.16%)</title><rect x="1170.8" y="851.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.8" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (3 samples, 0.16%)</title><rect x="1170.8" y="835.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.8" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (3 samples, 0.16%)</title><rect x="1170.8" y="819.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.8" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (3 samples, 0.16%)</title><rect x="1170.8" y="803.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.8" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::compute_exceptions() (1 samples, 0.05%)</title><rect x="1170.8" y="787.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.8" y="798.0"></text>
</g>
<g>
<title>GrowableArray&lt;ciTypeFlow::Block*&gt;::append(ciTypeFlow::Block* const&amp;) (1 samples, 0.05%)</title><rect x="1170.8" y="771.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.8" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (2 samples, 0.11%)</title><rect x="1171.4" y="787.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.4" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.05%)</title><rect x="1171.4" y="771.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.4" y="782.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.05%)</title><rect x="1171.4" y="755.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.4" y="766.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.05%)</title><rect x="1171.4" y="739.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.4" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.05%)</title><rect x="1171.4" y="723.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.4" y="734.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.05%)</title><rect x="1171.4" y="707.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.4" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1171.4" y="691.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.4" y="702.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.05%)</title><rect x="1171.4" y="675.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.4" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.05%)</title><rect x="1172.0" y="771.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.0" y="782.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.05%)</title><rect x="1172.0" y="755.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.0" y="766.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1172.0" y="739.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.0" y="750.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.05%)</title><rect x="1172.0" y="723.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.0" y="734.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (1 samples, 0.05%)</title><rect x="1172.0" y="707.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.0" y="718.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (1 samples, 0.05%)</title><rect x="1172.0" y="691.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.0" y="702.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.05%)</title><rect x="1172.0" y="675.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.0" y="686.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(LinkInfo const&amp;, methodHandle const&amp;, char const*, Thread*) (1 samples, 0.05%)</title><rect x="1172.0" y="659.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.0" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.32%)</title><rect x="1172.6" y="915.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.6" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.32%)</title><rect x="1172.6" y="899.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.6" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.32%)</title><rect x="1172.6" y="883.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.6" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.32%)</title><rect x="1172.6" y="867.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.6" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.26%)</title><rect x="1172.6" y="851.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.6" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.26%)</title><rect x="1172.6" y="835.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.6" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.26%)</title><rect x="1172.6" y="819.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.26%)</title><rect x="1172.6" y="803.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.26%)</title><rect x="1172.6" y="787.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.26%)</title><rect x="1172.6" y="771.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.6" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1172.6" y="755.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.6" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1172.6" y="739.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1172.6" y="723.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1172.6" y="707.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1172.6" y="691.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.6" y="702.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.05%)</title><rect x="1172.6" y="675.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.6" y="686.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.05%)</title><rect x="1172.6" y="659.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.6" y="670.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.05%)</title><rect x="1172.6" y="643.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.6" y="654.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.05%)</title><rect x="1172.6" y="627.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.6" y="638.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.05%)</title><rect x="1172.6" y="611.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.6" y="622.0"></text>
</g>
<g>
<title>ciMethod::has_compiled_code() (1 samples, 0.05%)</title><rect x="1172.6" y="595.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.6" y="606.0"></text>
</g>
<g>
<title>ciMethod::instructions_size() (1 samples, 0.05%)</title><rect x="1172.6" y="579.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.6" y="590.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.21%)</title><rect x="1173.3" y="755.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.3" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.21%)</title><rect x="1173.3" y="739.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.3" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.21%)</title><rect x="1173.3" y="723.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.21%)</title><rect x="1173.3" y="707.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.21%)</title><rect x="1173.3" y="691.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.21%)</title><rect x="1173.3" y="675.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.3" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.21%)</title><rect x="1173.3" y="659.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.3" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.21%)</title><rect x="1173.3" y="643.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.21%)</title><rect x="1173.3" y="627.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.21%)</title><rect x="1173.3" y="611.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.21%)</title><rect x="1173.3" y="595.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.3" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.21%)</title><rect x="1173.3" y="579.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.3" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.21%)</title><rect x="1173.3" y="563.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.21%)</title><rect x="1173.3" y="547.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.21%)</title><rect x="1173.3" y="531.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.21%)</title><rect x="1173.3" y="515.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.3" y="526.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.05%)</title><rect x="1173.3" y="499.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.3" y="510.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.05%)</title><rect x="1173.3" y="483.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.3" y="494.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.05%)</title><rect x="1173.3" y="467.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.3" y="478.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.05%)</title><rect x="1173.3" y="451.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.3" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.05%)</title><rect x="1173.3" y="435.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.3" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.05%)</title><rect x="1173.3" y="419.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.3" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1173.3" y="403.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.3" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1173.3" y="387.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.3" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.05%)</title><rect x="1173.3" y="371.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.3" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.05%)</title><rect x="1173.3" y="355.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.3" y="366.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.05%)</title><rect x="1173.3" y="339.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.3" y="350.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1173.3" y="323.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.3" y="334.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.05%)</title><rect x="1173.3" y="307.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.3" y="318.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(LinkInfo const&amp;) (1 samples, 0.05%)</title><rect x="1173.3" y="291.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.3" y="302.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.05%)</title><rect x="1173.3" y="275.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.3" y="286.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(LinkInfo const&amp;, Thread*) (1 samples, 0.05%)</title><rect x="1173.3" y="259.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.3" y="270.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.05%)</title><rect x="1173.3" y="243.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.3" y="254.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.05%)</title><rect x="1173.3" y="227.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.3" y="238.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.05%)</title><rect x="1173.3" y="211.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.3" y="222.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.05%)</title><rect x="1173.3" y="195.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.3" y="206.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.05%)</title><rect x="1173.3" y="179.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1176.3" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1173.9" y="499.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.9" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1173.9" y="483.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1173.9" y="467.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1173.9" y="451.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1173.9" y="435.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.9" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1173.9" y="419.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.9" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1173.9" y="403.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1173.9" y="387.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1173.9" y="371.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.05%)</title><rect x="1173.9" y="355.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.9" y="366.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.05%)</title><rect x="1173.9" y="339.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.9" y="350.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.05%)</title><rect x="1173.9" y="323.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.9" y="334.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.05%)</title><rect x="1173.9" y="307.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.9" y="318.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.05%)</title><rect x="1173.9" y="291.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.9" y="302.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="1173.9" y="275.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1176.9" y="286.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.11%)</title><rect x="1174.5" y="499.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.5" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.11%)</title><rect x="1174.5" y="483.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.5" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.11%)</title><rect x="1174.5" y="467.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.11%)</title><rect x="1174.5" y="451.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.11%)</title><rect x="1174.5" y="435.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.11%)</title><rect x="1174.5" y="419.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.5" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.11%)</title><rect x="1174.5" y="403.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.5" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.11%)</title><rect x="1174.5" y="387.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.5" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.11%)</title><rect x="1174.5" y="371.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.11%)</title><rect x="1174.5" y="355.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.11%)</title><rect x="1174.5" y="339.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.11%)</title><rect x="1174.5" y="323.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.5" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.11%)</title><rect x="1174.5" y="307.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.5" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.11%)</title><rect x="1174.5" y="291.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.11%)</title><rect x="1174.5" y="275.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.11%)</title><rect x="1174.5" y="259.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.11%)</title><rect x="1174.5" y="243.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.5" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.11%)</title><rect x="1174.5" y="227.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.5" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.11%)</title><rect x="1174.5" y="211.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.5" y="222.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.05%)</title><rect x="1174.5" y="195.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.5" y="206.0"></text>
</g>
<g>
<title>GraphKit::null_check_receiver_before_call(ciMethod*) (1 samples, 0.05%)</title><rect x="1174.5" y="179.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.5" y="190.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.05%)</title><rect x="1174.5" y="163.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.5" y="174.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.05%)</title><rect x="1174.5" y="147.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.5" y="158.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.05%)</title><rect x="1174.5" y="131.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.5" y="142.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.05%)</title><rect x="1174.5" y="115.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.5" y="126.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="1174.5" y="99.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1177.5" y="110.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1175.1" y="195.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1175.1" y="179.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1175.1" y="163.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.1" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1175.1" y="147.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.1" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1175.1" y="131.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.1" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1175.1" y="115.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.1" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1175.1" y="99.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.1" y="110.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1175.1" y="83.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.1" y="94.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1175.1" y="67.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.1" y="78.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool) (1 samples, 0.05%)</title><rect x="1175.1" y="51.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.1" y="62.0"></text>
</g>
<g>
<title>TypeInstPtr::cast_to_ptr_type(TypePtr::PTR) const (1 samples, 0.05%)</title><rect x="1175.1" y="35.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.1" y="46.0"></text>
</g>
<g>
<title>PhaseGVN::transform(Node*) (1 samples, 0.05%)</title><rect x="1175.7" y="851.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.7" y="862.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.16%)</title><rect x="1176.4" y="915.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.4" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.16%)</title><rect x="1176.4" y="899.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.4" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.16%)</title><rect x="1176.4" y="883.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.4" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.16%)</title><rect x="1176.4" y="867.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.16%)</title><rect x="1176.4" y="851.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.16%)</title><rect x="1176.4" y="835.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.4" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.16%)</title><rect x="1176.4" y="819.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.4" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.16%)</title><rect x="1176.4" y="803.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.16%)</title><rect x="1176.4" y="787.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.16%)</title><rect x="1176.4" y="771.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.16%)</title><rect x="1176.4" y="755.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.4" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.16%)</title><rect x="1176.4" y="739.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.4" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.16%)</title><rect x="1176.4" y="723.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.16%)</title><rect x="1176.4" y="707.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.16%)</title><rect x="1176.4" y="691.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.16%)</title><rect x="1176.4" y="675.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.4" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1176.4" y="659.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.4" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1176.4" y="643.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.4" y="654.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.05%)</title><rect x="1176.4" y="627.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.4" y="638.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.05%)</title><rect x="1176.4" y="611.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.4" y="622.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.11%)</title><rect x="1177.0" y="659.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.0" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.11%)</title><rect x="1177.0" y="643.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.0" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.11%)</title><rect x="1177.0" y="627.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.11%)</title><rect x="1177.0" y="611.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.11%)</title><rect x="1177.0" y="595.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.11%)</title><rect x="1177.0" y="579.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.0" y="590.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.11%)</title><rect x="1177.0" y="563.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.0" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.11%)</title><rect x="1177.0" y="547.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.0" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.11%)</title><rect x="1177.0" y="531.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.11%)</title><rect x="1177.0" y="515.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.11%)</title><rect x="1177.0" y="499.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.11%)</title><rect x="1177.0" y="483.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.0" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.11%)</title><rect x="1177.0" y="467.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.0" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.11%)</title><rect x="1177.0" y="451.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.11%)</title><rect x="1177.0" y="435.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.11%)</title><rect x="1177.0" y="419.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.11%)</title><rect x="1177.0" y="403.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.0" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.11%)</title><rect x="1177.0" y="387.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.0" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.11%)</title><rect x="1177.0" y="371.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.11%)</title><rect x="1177.0" y="355.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.11%)</title><rect x="1177.0" y="339.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.11%)</title><rect x="1177.0" y="323.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.0" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.11%)</title><rect x="1177.0" y="307.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.0" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.11%)</title><rect x="1177.0" y="291.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.11%)</title><rect x="1177.0" y="275.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.11%)</title><rect x="1177.0" y="259.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1177.0" y="243.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.0" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1177.0" y="227.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.0" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1177.0" y="211.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1177.0" y="195.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1177.0" y="179.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.0" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1177.0" y="163.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.0" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1177.0" y="147.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.0" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1177.0" y="131.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.0" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1177.0" y="115.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.0" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1177.0" y="99.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.0" y="110.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1177.0" y="83.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.0" y="94.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.05%)</title><rect x="1177.0" y="67.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.0" y="78.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1177.0" y="51.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.0" y="62.0"></text>
</g>
<g>
<title>MethodHandles::signature_polymorphic_name_id(Klass*, Symbol*) (1 samples, 0.05%)</title><rect x="1177.0" y="35.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.0" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.05%)</title><rect x="1177.6" y="243.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.6" y="254.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.05%)</title><rect x="1177.6" y="227.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.6" y="238.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.05%)</title><rect x="1177.6" y="211.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.11%)</title><rect x="1178.2" y="931.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.2" y="942.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (2 samples, 0.11%)</title><rect x="1178.2" y="915.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.2" y="926.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (2 samples, 0.11%)</title><rect x="1178.2" y="899.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.2" y="910.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (2 samples, 0.11%)</title><rect x="1178.2" y="883.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.2" y="894.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (2 samples, 0.11%)</title><rect x="1178.2" y="867.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.2" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (2 samples, 0.11%)</title><rect x="1178.2" y="851.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.2" y="862.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (2 samples, 0.11%)</title><rect x="1178.2" y="835.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.2" y="846.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.05%)</title><rect x="1179.5" y="995.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.5" y="1006.0"></text>
</g>
<g>
<title>NodeHash::remove_useless_nodes(VectorSet&amp;) (1 samples, 0.05%)</title><rect x="1179.5" y="979.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.5" y="990.0"></text>
</g>
<g>
<title>Compile::~Compile() (1 samples, 0.05%)</title><rect x="1180.1" y="1011.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.1" y="1022.0"></text>
</g>
<g>
<title>Arena::~Arena() (1 samples, 0.05%)</title><rect x="1180.1" y="995.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.1" y="1006.0"></text>
</g>
<g>
<title>Arena::destruct_contents() (1 samples, 0.05%)</title><rect x="1180.1" y="979.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.1" y="990.0"></text>
</g>
<g>
<title>ChunkPool::free(Chunk*) (1 samples, 0.05%)</title><rect x="1180.1" y="963.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.1" y="974.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.05%)</title><rect x="1180.1" y="947.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1183.1" y="958.0"></text>
</g>
<g>
<title>CompileBroker::possibly_add_compiler_threads() (1 samples, 0.05%)</title><rect x="1180.7" y="1043.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.7" y="1054.0"></text>
</g>
<g>
<title>_block_invoke.modules (1 samples, 0.05%)</title><rect x="1180.7" y="1027.0" width="0.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1183.7" y="1038.0"></text>
</g>
<g>
<title>[tid=22019] (1 samples, 0.05%)</title><rect x="1181.3" y="1187.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1184.3" y="1198.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.05%)</title><rect x="1181.3" y="1171.0" width="0.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1184.3" y="1182.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.05%)</title><rect x="1181.3" y="1155.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1184.3" y="1166.0"></text>
</g>
<g>
<title>_pthread_body (1 samples, 0.05%)</title><rect x="1181.3" y="1139.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1184.3" y="1150.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.05%)</title><rect x="1181.3" y="1123.0" width="0.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1184.3" y="1134.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.05%)</title><rect x="1181.3" y="1107.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.3" y="1118.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.05%)</title><rect x="1181.3" y="1091.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.3" y="1102.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.05%)</title><rect x="1181.3" y="1075.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.3" y="1086.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.05%)</title><rect x="1181.3" y="1059.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.3" y="1070.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.05%)</title><rect x="1181.3" y="1043.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.3" y="1054.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.05%)</title><rect x="1181.3" y="1027.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.3" y="1038.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.05%)</title><rect x="1181.3" y="1011.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1184.3" y="1022.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.05%)</title><rect x="1181.3" y="995.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.3" y="1006.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.05%)</title><rect x="1181.3" y="979.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.3" y="990.0"></text>
</g>
<g>
<title>nmethod::metadata_at(int) const (1 samples, 0.05%)</title><rect x="1181.3" y="963.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.3" y="974.0"></text>
</g>
<g>
<title>nmethod::metadata_addr_at(int) const (1 samples, 0.05%)</title><rect x="1181.3" y="947.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.3" y="958.0"></text>
</g>
<g>
<title>[tid=38915] (1 samples, 0.05%)</title><rect x="1181.9" y="1187.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1184.9" y="1198.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.05%)</title><rect x="1181.9" y="1171.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1184.9" y="1182.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.05%)</title><rect x="1181.9" y="1155.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1184.9" y="1166.0"></text>
</g>
<g>
<title>_pthread_body (1 samples, 0.05%)</title><rect x="1181.9" y="1139.0" width="0.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1184.9" y="1150.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.05%)</title><rect x="1181.9" y="1123.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1184.9" y="1134.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.05%)</title><rect x="1181.9" y="1107.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.9" y="1118.0"></text>
</g>
<g>
<title>GangWorker::loop() (1 samples, 0.05%)</title><rect x="1181.9" y="1091.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.9" y="1102.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (1 samples, 0.05%)</title><rect x="1181.9" y="1075.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.9" y="1086.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (1 samples, 0.05%)</title><rect x="1181.9" y="1059.0" width="0.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1184.9" y="1070.0"></text>
</g>
<g>
<title>[tid=39171] (1 samples, 0.05%)</title><rect x="1182.6" y="1187.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1185.6" y="1198.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.05%)</title><rect x="1182.6" y="1171.0" width="0.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1185.6" y="1182.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.05%)</title><rect x="1182.6" y="1155.0" width="0.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1185.6" y="1166.0"></text>
</g>
<g>
<title>_pthread_body (1 samples, 0.05%)</title><rect x="1182.6" y="1139.0" width="0.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1185.6" y="1150.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.05%)</title><rect x="1182.6" y="1123.0" width="0.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1185.6" y="1134.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.05%)</title><rect x="1182.6" y="1107.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.6" y="1118.0"></text>
</g>
<g>
<title>GangWorker::loop() (1 samples, 0.05%)</title><rect x="1182.6" y="1091.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.6" y="1102.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (1 samples, 0.05%)</title><rect x="1182.6" y="1075.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.6" y="1086.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (1 samples, 0.05%)</title><rect x="1182.6" y="1059.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.6" y="1070.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.05%)</title><rect x="1182.6" y="1043.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.6" y="1054.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.05%)</title><rect x="1182.6" y="1027.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.6" y="1038.0"></text>
</g>
<g>
<title>G1CLDScanClosure::do_cld(ClassLoaderData*) (1 samples, 0.05%)</title><rect x="1182.6" y="1011.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.6" y="1022.0"></text>
</g>
<g>
<title>ClassLoaderData::ChunkedHandleList::oops_do(OopClosure*) (1 samples, 0.05%)</title><rect x="1182.6" y="995.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.6" y="1006.0"></text>
</g>
<g>
<title>void G1ParCopyClosure&lt;(G1Barrier)1, (G1Mark)0&gt;::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.05%)</title><rect x="1182.6" y="979.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.6" y="990.0"></text>
</g>
<g>
<title>[tid=42243] (9 samples, 0.47%)</title><rect x="1183.2" y="1187.0" width="5.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1186.2" y="1198.0"></text>
</g>
<g>
<title>thread_start (9 samples, 0.47%)</title><rect x="1183.2" y="1171.0" width="5.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1186.2" y="1182.0"></text>
</g>
<g>
<title>_pthread_start (9 samples, 0.47%)</title><rect x="1183.2" y="1155.0" width="5.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1186.2" y="1166.0"></text>
</g>
<g>
<title>_pthread_body (9 samples, 0.47%)</title><rect x="1183.2" y="1139.0" width="5.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1186.2" y="1150.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (9 samples, 0.47%)</title><rect x="1183.2" y="1123.0" width="5.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1186.2" y="1134.0"></text>
</g>
<g>
<title>Thread::call_run() (9 samples, 0.47%)</title><rect x="1183.2" y="1107.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.2" y="1118.0"></text>
</g>
<g>
<title>WatcherThread::run() (9 samples, 0.47%)</title><rect x="1183.2" y="1091.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.2" y="1102.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.05%)</title><rect x="1183.2" y="1075.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.2" y="1086.0"></text>
</g>
<g>
<title>StatSampler::collect_sample() (1 samples, 0.05%)</title><rect x="1183.2" y="1059.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.2" y="1070.0"></text>
</g>
<g>
<title>PerfLongVariant::sample() (1 samples, 0.05%)</title><rect x="1183.2" y="1043.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.2" y="1054.0"></text>
</g>
<g>
<title>StatSampler::collect_sample() (1 samples, 0.05%)</title><rect x="1183.8" y="1075.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.8" y="1086.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (7 samples, 0.37%)</title><rect x="1184.4" y="1075.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.4" y="1086.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (7 samples, 0.37%)</title><rect x="1184.4" y="1059.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.4" y="1070.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (6 samples, 0.32%)</title><rect x="1184.4" y="1043.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.4" y="1054.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (6 samples, 0.32%)</title><rect x="1184.4" y="1027.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.4" y="1038.0"></text>
</g>
<g>
<title>__gettimeofday (1 samples, 0.05%)</title><rect x="1184.4" y="1011.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1187.4" y="1022.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.21%)</title><rect x="1185.0" y="1011.0" width="2.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1188.0" y="1022.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.05%)</title><rect x="1187.5" y="1011.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1190.5" y="1022.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.05%)</title><rect x="1188.1" y="1043.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.1" y="1054.0"></text>
</g>
<g>
<title>[tid=43011] (2 samples, 0.11%)</title><rect x="1188.8" y="1187.0" width="1.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1191.8" y="1198.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.11%)</title><rect x="1188.8" y="1171.0" width="1.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1191.8" y="1182.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.11%)</title><rect x="1188.8" y="1155.0" width="1.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1191.8" y="1166.0"></text>
</g>
<g>
<title>_pthread_body (2 samples, 0.11%)</title><rect x="1188.8" y="1139.0" width="1.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1191.8" y="1150.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.11%)</title><rect x="1188.8" y="1123.0" width="1.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1191.8" y="1134.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.11%)</title><rect x="1188.8" y="1107.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.8" y="1118.0"></text>
</g>
<g>
<title>JavaThread::run() (2 samples, 0.11%)</title><rect x="1188.8" y="1091.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.8" y="1102.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (2 samples, 0.11%)</title><rect x="1188.8" y="1075.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.8" y="1086.0"></text>
</g>
<g>
<title>NMethodSweeper::sweeper_loop() (2 samples, 0.11%)</title><rect x="1188.8" y="1059.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.8" y="1070.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (2 samples, 0.11%)</title><rect x="1188.8" y="1043.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.8" y="1054.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (2 samples, 0.11%)</title><rect x="1188.8" y="1027.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.8" y="1038.0"></text>
</g>
<g>
<title>CodeBlobIterator&lt;CompiledMethod, CompiledMethodFilter&gt;::next() (2 samples, 0.11%)</title><rect x="1188.8" y="1011.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.8" y="1022.0"></text>
</g>
<g>
<title>CodeBlobIterator&lt;CompiledMethod, CompiledMethodFilter&gt;::next_blob() (2 samples, 0.11%)</title><rect x="1188.8" y="995.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.8" y="1006.0"></text>
</g>
<g>
<title>CodeHeap::next(void*) const (2 samples, 0.11%)</title><rect x="1188.8" y="979.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.8" y="990.0"></text>
</g>
</g>
</svg>
