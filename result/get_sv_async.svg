<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="966" onload="init(evt)" viewBox="0 0 1200 966" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="949"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="949"> </text>
<g id="frames">
<g>
<title>all (5,515 samples, 100.00%)</title><rect x="10.0" y="915.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="926.0">all</text>
</g>
<g>
<title>[NIO Selector #1 tid=39683] (1,116 samples, 20.24%)</title><rect x="10.0" y="899.0" width="238.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="13.0" y="910.0">[NIO Selector #1 tid=39683]</text>
</g>
<g>
<title>[unknown_Java] (7 samples, 0.13%)</title><rect x="10.2" y="883.0" width="1.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="13.2" y="894.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,107 samples, 20.07%)</title><rect x="11.7" y="883.0" width="236.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="14.7" y="894.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (3 samples, 0.05%)</title><rect x="12.8" y="867.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.8" y="878.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (2 samples, 0.04%)</title><rect x="13.0" y="851.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="16.0" y="862.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (733 samples, 13.29%)</title><rect x="13.4" y="867.0" width="156.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="16.4" y="878.0">one/nio/net/JavaSele..</text>
</g>
<g>
<title>_res (2 samples, 0.04%)</title><rect x="13.6" y="851.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="16.6" y="862.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (4 samples, 0.07%)</title><rect x="14.1" y="851.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="17.1" y="862.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (3 samples, 0.05%)</title><rect x="15.1" y="851.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="18.1" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (718 samples, 13.02%)</title><rect x="15.8" y="851.0" width="153.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="18.8" y="862.0">sun/nio/ch/Selector..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (718 samples, 13.02%)</title><rect x="15.8" y="835.0" width="153.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.8" y="846.0">sun/nio/ch/Selector..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (716 samples, 12.98%)</title><rect x="16.2" y="819.0" width="153.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.2" y="830.0">sun/nio/ch/KQueueSe..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (685 samples, 12.42%)</title><rect x="16.8" y="803.0" width="146.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="19.8" y="814.0">sun/nio/ch/KQueue...</text>
</g>
<g>
<title>JNI_OnLoad (2 samples, 0.04%)</title><rect x="25.4" y="787.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="28.4" y="798.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (4 samples, 0.07%)</title><rect x="25.8" y="787.0" width="0.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="28.8" y="798.0"></text>
</g>
<g>
<title>kevent (639 samples, 11.59%)</title><rect x="26.7" y="787.0" width="136.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="29.7" y="798.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (11 samples, 0.20%)</title><rect x="163.4" y="803.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="166.4" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (4 samples, 0.07%)</title><rect x="164.9" y="787.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="167.9" y="798.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.05%)</title><rect x="164.9" y="771.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="167.9" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.05%)</title><rect x="164.9" y="755.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="167.9" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.05%)</title><rect x="164.9" y="739.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="167.9" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.04%)</title><rect x="165.8" y="803.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="168.8" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (10 samples, 0.18%)</title><rect x="166.2" y="803.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="169.2" y="814.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (10 samples, 0.18%)</title><rect x="166.2" y="787.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="169.2" y="798.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (8 samples, 0.15%)</title><rect x="166.4" y="771.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="169.4" y="782.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (8 samples, 0.15%)</title><rect x="166.4" y="755.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="169.4" y="766.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (8 samples, 0.15%)</title><rect x="166.4" y="739.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="169.4" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (2 samples, 0.04%)</title><rect x="168.3" y="803.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="171.3" y="814.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (2 samples, 0.04%)</title><rect x="168.3" y="787.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="171.3" y="798.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.04%)</title><rect x="168.3" y="771.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="171.3" y="782.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.04%)</title><rect x="168.3" y="755.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="171.3" y="766.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.04%)</title><rect x="168.3" y="739.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="171.3" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (3 samples, 0.05%)</title><rect x="168.8" y="803.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="171.8" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (4 samples, 0.07%)</title><rect x="169.4" y="851.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="172.4" y="862.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (4 samples, 0.07%)</title><rect x="169.4" y="835.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="172.4" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (4 samples, 0.07%)</title><rect x="169.4" y="819.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="172.4" y="830.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (366 samples, 6.64%)</title><rect x="170.3" y="867.0" width="78.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="173.3" y="878.0">one/nio/n..</text>
</g>
<g>
<title>gettimeofday (2 samples, 0.04%)</title><rect x="172.0" y="851.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="175.0" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (352 samples, 6.38%)</title><rect x="172.4" y="851.0" width="75.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="175.4" y="862.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (189 samples, 3.43%)</title><rect x="172.6" y="835.0" width="40.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="175.6" y="846.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (146 samples, 2.65%)</title><rect x="173.0" y="819.0" width="31.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="176.0" y="830.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (143 samples, 2.59%)</title><rect x="173.7" y="803.0" width="30.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="176.7" y="814.0">on..</text>
</g>
<g>
<title>one/nio/http/PathMapper.find (7 samples, 0.13%)</title><rect x="174.1" y="787.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="177.1" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.13%)</title><rect x="174.1" y="771.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="177.1" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (6 samples, 0.11%)</title><rect x="174.3" y="755.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="177.3" y="766.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.07%)</title><rect x="174.8" y="739.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="177.8" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (3 samples, 0.05%)</title><rect x="175.0" y="723.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="178.0" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.04%)</title><rect x="175.6" y="787.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="178.6" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.handleDefault (132 samples, 2.39%)</title><rect x="176.0" y="787.0" width="28.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="179.0" y="798.0">ru..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendError (23 samples, 0.42%)</title><rect x="176.0" y="771.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="179.0" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (6 samples, 0.11%)</title><rect x="176.7" y="755.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="179.7" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (6 samples, 0.11%)</title><rect x="176.7" y="739.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="179.7" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (6 samples, 0.11%)</title><rect x="176.7" y="723.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="179.7" y="734.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (6 samples, 0.11%)</title><rect x="176.7" y="707.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="179.7" y="718.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (6 samples, 0.11%)</title><rect x="176.7" y="691.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="179.7" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.04%)</title><rect x="176.7" y="675.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="179.7" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (4 samples, 0.07%)</title><rect x="177.1" y="675.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="180.1" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (8 samples, 0.15%)</title><rect x="178.0" y="755.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="181.0" y="766.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.05%)</title><rect x="178.8" y="739.0" width="0.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="181.8" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session.scheduleClose (3 samples, 0.05%)</title><rect x="179.7" y="755.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="182.7" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session.close (3 samples, 0.05%)</title><rect x="179.7" y="739.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="182.7" y="750.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.unregister (2 samples, 0.04%)</title><rect x="179.7" y="723.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="182.7" y="734.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.disable (2 samples, 0.04%)</title><rect x="179.7" y="707.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="182.7" y="718.0"></text>
</g>
<g>
<title>one/nio/server/Server.incRequestsRejected (2 samples, 0.04%)</title><rect x="180.3" y="755.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="183.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.incrementAndGet (2 samples, 0.04%)</title><rect x="180.3" y="739.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="183.3" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.entity (109 samples, 1.98%)</title><rect x="181.0" y="771.0" width="23.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="184.0" y="782.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.executeAsync (107 samples, 1.94%)</title><rect x="181.4" y="755.0" width="22.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="184.4" y="766.0">r..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (106 samples, 1.92%)</title><rect x="181.6" y="739.0" width="22.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="184.6" y="750.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (106 samples, 1.92%)</title><rect x="181.6" y="723.0" width="22.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="184.6" y="734.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (106 samples, 1.92%)</title><rect x="181.6" y="707.0" width="22.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="184.6" y="718.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (17 samples, 0.31%)</title><rect x="181.8" y="691.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="184.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (17 samples, 0.31%)</title><rect x="181.8" y="675.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="184.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (17 samples, 0.31%)</title><rect x="181.8" y="659.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="184.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (17 samples, 0.31%)</title><rect x="181.8" y="643.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="184.8" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (17 samples, 0.31%)</title><rect x="181.8" y="627.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="184.8" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (88 samples, 1.60%)</title><rect x="185.4" y="691.0" width="18.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="188.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (88 samples, 1.60%)</title><rect x="185.4" y="675.0" width="18.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="188.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (87 samples, 1.58%)</title><rect x="185.7" y="659.0" width="18.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="188.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (87 samples, 1.58%)</title><rect x="185.7" y="643.0" width="18.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="188.7" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (87 samples, 1.58%)</title><rect x="185.7" y="627.0" width="18.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="188.7" y="638.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.04%)</title><rect x="186.3" y="611.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="189.3" y="622.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (77 samples, 1.40%)</title><rect x="187.2" y="611.0" width="16.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="190.2" y="622.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.04%)</title><rect x="187.6" y="595.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="190.6" y="606.0"></text>
</g>
<g>
<title>Chunk::next() const (2 samples, 0.04%)</title><rect x="187.6" y="579.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="190.6" y="590.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.04%)</title><rect x="188.2" y="595.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="191.2" y="606.0"></text>
</g>
<g>
<title>Thread::current_or_null() (2 samples, 0.04%)</title><rect x="188.7" y="595.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="191.7" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.04%)</title><rect x="189.1" y="595.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="192.1" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (5 samples, 0.09%)</title><rect x="189.5" y="595.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="192.5" y="606.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.04%)</title><rect x="189.7" y="579.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="192.7" y="590.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="189.7" y="563.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="192.7" y="574.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.04%)</title><rect x="189.7" y="547.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="192.7" y="558.0"></text>
</g>
<g>
<title>SafepointMechanism::should_block(Thread*) (2 samples, 0.04%)</title><rect x="190.2" y="579.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="193.2" y="590.0"></text>
</g>
<g>
<title>SafepointMechanism::uses_thread_local_poll() (2 samples, 0.04%)</title><rect x="190.2" y="563.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="193.2" y="574.0"></text>
</g>
<g>
<title>__psynch_cvsignal (54 samples, 0.98%)</title><rect x="191.0" y="595.0" width="11.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="194.0" y="606.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.04%)</title><rect x="202.8" y="595.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="205.8" y="606.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.04%)</title><rect x="203.2" y="595.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="206.2" y="606.0"></text>
</g>
<g>
<title>addr_from_java(long) (2 samples, 0.04%)</title><rect x="203.6" y="611.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="206.6" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (17 samples, 0.31%)</title><rect x="204.3" y="819.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="207.3" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (5 samples, 0.09%)</title><rect x="204.3" y="803.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="207.3" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.09%)</title><rect x="204.3" y="787.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="207.3" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.09%)</title><rect x="204.3" y="771.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="207.3" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (5 samples, 0.09%)</title><rect x="204.3" y="755.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="207.3" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (12 samples, 0.22%)</title><rect x="205.3" y="803.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="208.3" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (21 samples, 0.38%)</title><rect x="207.9" y="819.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="210.9" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.05%)</title><rect x="211.8" y="803.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="214.8" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.04%)</title><rect x="212.0" y="787.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="215.0" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.05%)</title><rect x="212.4" y="819.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="215.4" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.05%)</title><rect x="212.4" y="803.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="215.4" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (2 samples, 0.04%)</title><rect x="212.6" y="787.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="215.6" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (162 samples, 2.94%)</title><rect x="213.0" y="835.0" width="34.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="216.0" y="846.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (162 samples, 2.94%)</title><rect x="213.0" y="819.0" width="34.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="216.0" y="830.0">on..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (13 samples, 0.24%)</title><rect x="213.0" y="803.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="216.0" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (13 samples, 0.24%)</title><rect x="213.0" y="787.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="216.0" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (13 samples, 0.24%)</title><rect x="213.0" y="771.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="216.0" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.13%)</title><rect x="213.3" y="755.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="216.3" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.04%)</title><rect x="213.7" y="739.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="216.7" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.04%)</title><rect x="213.7" y="723.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="216.7" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.05%)</title><rect x="214.1" y="739.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="217.1" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="214.3" y="723.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="217.3" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteOrder.nativeOrder (4 samples, 0.07%)</title><rect x="214.8" y="755.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="217.8" y="766.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="215.0" y="739.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="218.0" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (149 samples, 2.70%)</title><rect x="215.8" y="803.0" width="31.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="218.8" y="814.0">su..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (10 samples, 0.18%)</title><rect x="216.0" y="787.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="219.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (10 samples, 0.18%)</title><rect x="216.0" y="771.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="219.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.04%)</title><rect x="216.0" y="755.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="219.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.04%)</title><rect x="216.0" y="739.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="219.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.04%)</title><rect x="216.0" y="723.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="219.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.04%)</title><rect x="216.0" y="707.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="219.0" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.04%)</title><rect x="216.0" y="691.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="219.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (3 samples, 0.05%)</title><rect x="216.5" y="755.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="219.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.09%)</title><rect x="217.1" y="755.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="220.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.09%)</title><rect x="217.1" y="739.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="220.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.05%)</title><rect x="217.5" y="723.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="220.5" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (138 samples, 2.50%)</title><rect x="218.2" y="787.0" width="29.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="221.2" y="798.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (138 samples, 2.50%)</title><rect x="218.2" y="771.0" width="29.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="221.2" y="782.0">su..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (3 samples, 0.05%)</title><rect x="218.2" y="755.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="221.2" y="766.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3 samples, 0.05%)</title><rect x="218.2" y="739.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="221.2" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.05%)</title><rect x="218.2" y="723.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="221.2" y="734.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (3 samples, 0.05%)</title><rect x="218.2" y="707.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="221.2" y="718.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (3 samples, 0.05%)</title><rect x="218.2" y="691.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="221.2" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (3 samples, 0.05%)</title><rect x="218.2" y="675.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="221.2" y="686.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (2 samples, 0.04%)</title><rect x="218.4" y="659.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="221.4" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (134 samples, 2.43%)</title><rect x="218.8" y="755.0" width="28.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="221.8" y="766.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (133 samples, 2.41%)</title><rect x="219.0" y="739.0" width="28.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="222.0" y="750.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (133 samples, 2.41%)</title><rect x="219.0" y="723.0" width="28.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="222.0" y="734.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (5 samples, 0.09%)</title><rect x="219.7" y="707.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="222.7" y="718.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.04%)</title><rect x="220.3" y="691.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="223.3" y="702.0"></text>
</g>
<g>
<title>convertReturnVal (2 samples, 0.04%)</title><rect x="220.8" y="707.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="223.8" y="718.0"></text>
</g>
<g>
<title>read (123 samples, 2.23%)</title><rect x="221.2" y="707.0" width="26.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="224.2" y="718.0">r..</text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.07%)</title><rect x="247.7" y="851.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="250.7" y="862.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (3 samples, 0.05%)</title><rect x="247.9" y="835.0" width="0.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="250.9" y="846.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=39171] (681 samples, 12.35%)</title><rect x="248.8" y="899.0" width="145.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="251.8" y="910.0">[NIO Selector #2 t..</text>
</g>
<g>
<title>[unknown_Java] (3 samples, 0.05%)</title><rect x="248.8" y="883.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="251.8" y="894.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (677 samples, 12.28%)</title><rect x="249.4" y="883.0" width="144.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="252.4" y="894.0">one/nio/server/Sel..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (434 samples, 7.87%)</title><rect x="250.7" y="867.0" width="92.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="253.7" y="878.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (4 samples, 0.07%)</title><rect x="250.7" y="851.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="253.7" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (426 samples, 7.72%)</title><rect x="252.0" y="851.0" width="91.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="255.0" y="862.0">sun/nio/ch/..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (426 samples, 7.72%)</title><rect x="252.0" y="835.0" width="91.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="255.0" y="846.0">sun/nio/ch/..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (3 samples, 0.05%)</title><rect x="252.2" y="819.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="255.2" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (422 samples, 7.65%)</title><rect x="252.8" y="819.0" width="90.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="255.8" y="830.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (395 samples, 7.16%)</title><rect x="252.8" y="803.0" width="84.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="255.8" y="814.0">sun/nio/ch..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (4 samples, 0.07%)</title><rect x="258.4" y="787.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="261.4" y="798.0"></text>
</g>
<g>
<title>kevent (365 samples, 6.62%)</title><rect x="259.3" y="787.0" width="78.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="262.3" y="798.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (11 samples, 0.20%)</title><rect x="337.4" y="803.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="340.4" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (5 samples, 0.09%)</title><rect x="338.6" y="787.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="341.6" y="798.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.04%)</title><rect x="338.9" y="771.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="341.9" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.04%)</title><rect x="338.9" y="755.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="341.9" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.04%)</title><rect x="338.9" y="739.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="341.9" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.translateAndSetReadyOps (2 samples, 0.04%)</title><rect x="339.3" y="771.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="342.3" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateAndSetReadyOps (2 samples, 0.04%)</title><rect x="339.3" y="755.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="342.3" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateReadyOps (2 samples, 0.04%)</title><rect x="339.3" y="739.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="342.3" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (8 samples, 0.15%)</title><rect x="339.9" y="803.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="342.9" y="814.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (8 samples, 0.15%)</title><rect x="339.9" y="787.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="342.9" y="798.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (7 samples, 0.13%)</title><rect x="340.1" y="771.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="343.1" y="782.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (7 samples, 0.13%)</title><rect x="340.1" y="755.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="343.1" y="766.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (7 samples, 0.13%)</title><rect x="340.1" y="739.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="343.1" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (5 samples, 0.09%)</title><rect x="341.6" y="803.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="344.6" y="814.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (5 samples, 0.09%)</title><rect x="341.6" y="787.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="344.6" y="798.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (5 samples, 0.09%)</title><rect x="341.6" y="771.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="344.6" y="782.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (5 samples, 0.09%)</title><rect x="341.6" y="755.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="344.6" y="766.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (5 samples, 0.09%)</title><rect x="341.6" y="739.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="344.6" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.04%)</title><rect x="342.7" y="803.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="345.7" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (2 samples, 0.04%)</title><rect x="343.1" y="851.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="346.1" y="862.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (2 samples, 0.04%)</title><rect x="343.1" y="835.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="346.1" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (2 samples, 0.04%)</title><rect x="343.1" y="819.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="346.1" y="830.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (237 samples, 4.30%)</title><rect x="343.6" y="867.0" width="50.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="346.6" y="878.0">one/n..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (227 samples, 4.12%)</title><rect x="345.1" y="851.0" width="48.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="348.1" y="862.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (117 samples, 2.12%)</title><rect x="345.1" y="835.0" width="25.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="348.1" y="846.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (92 samples, 1.67%)</title><rect x="345.5" y="819.0" width="19.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="348.5" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (91 samples, 1.65%)</title><rect x="345.7" y="803.0" width="19.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="348.7" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (3 samples, 0.05%)</title><rect x="345.7" y="787.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="348.7" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.04%)</title><rect x="346.3" y="787.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="349.3" y="798.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.04%)</title><rect x="346.3" y="771.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="349.3" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.04%)</title><rect x="346.3" y="755.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="349.3" y="766.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.04%)</title><rect x="346.3" y="739.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="349.3" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.handleDefault (86 samples, 1.56%)</title><rect x="346.8" y="787.0" width="18.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="349.8" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendError (12 samples, 0.22%)</title><rect x="346.8" y="771.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="349.8" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (9 samples, 0.16%)</title><rect x="347.0" y="755.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="350.0" y="766.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.04%)</title><rect x="347.8" y="739.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="350.8" y="750.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.05%)</title><rect x="348.3" y="739.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="351.3" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.entity (74 samples, 1.34%)</title><rect x="349.3" y="771.0" width="15.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="352.3" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.04%)</title><rect x="349.6" y="755.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="352.6" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.executeAsync (71 samples, 1.29%)</title><rect x="350.0" y="755.0" width="15.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="353.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (71 samples, 1.29%)</title><rect x="350.0" y="739.0" width="15.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="353.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (70 samples, 1.27%)</title><rect x="350.0" y="723.0" width="15.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="353.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (69 samples, 1.25%)</title><rect x="350.0" y="707.0" width="14.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="353.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (11 samples, 0.20%)</title><rect x="350.0" y="691.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="353.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (11 samples, 0.20%)</title><rect x="350.0" y="675.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="353.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (10 samples, 0.18%)</title><rect x="350.2" y="659.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="353.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (10 samples, 0.18%)</title><rect x="350.2" y="643.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="353.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (10 samples, 0.18%)</title><rect x="350.2" y="627.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="353.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (58 samples, 1.05%)</title><rect x="352.3" y="691.0" width="12.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="355.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (58 samples, 1.05%)</title><rect x="352.3" y="675.0" width="12.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="355.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (56 samples, 1.02%)</title><rect x="352.8" y="659.0" width="11.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="355.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (56 samples, 1.02%)</title><rect x="352.8" y="643.0" width="11.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="355.8" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (56 samples, 1.02%)</title><rect x="352.8" y="627.0" width="11.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="355.8" y="638.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.04%)</title><rect x="353.2" y="611.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="356.2" y="622.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (51 samples, 0.92%)</title><rect x="353.8" y="611.0" width="10.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="356.8" y="622.0"></text>
</g>
<g>
<title>Chunk::next() const (2 samples, 0.04%)</title><rect x="354.1" y="595.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="357.1" y="606.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.04%)</title><rect x="354.9" y="595.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="357.9" y="606.0"></text>
</g>
<g>
<title>Thread::current() (3 samples, 0.05%)</title><rect x="355.3" y="595.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="358.3" y="606.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (3 samples, 0.05%)</title><rect x="355.3" y="579.0" width="0.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="358.3" y="590.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.07%)</title><rect x="356.0" y="595.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="359.0" y="606.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.05%)</title><rect x="356.2" y="579.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="359.2" y="590.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.05%)</title><rect x="356.2" y="563.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="359.2" y="574.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="356.4" y="547.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="359.4" y="558.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.04%)</title><rect x="356.4" y="531.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="359.4" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (4 samples, 0.07%)</title><rect x="356.8" y="595.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="359.8" y="606.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.05%)</title><rect x="356.8" y="579.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="359.8" y="590.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.05%)</title><rect x="356.8" y="563.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="359.8" y="574.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.05%)</title><rect x="356.8" y="547.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="359.8" y="558.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (2 samples, 0.04%)</title><rect x="357.0" y="531.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="360.0" y="542.0"></text>
</g>
<g>
<title>__psynch_cvsignal (26 samples, 0.47%)</title><rect x="357.9" y="595.0" width="5.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="360.9" y="606.0"></text>
</g>
<g>
<title>pthread_mutex_lock (4 samples, 0.07%)</title><rect x="363.9" y="595.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="366.9" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (12 samples, 0.22%)</title><rect x="365.2" y="819.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="368.2" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (9 samples, 0.16%)</title><rect x="365.2" y="803.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="368.2" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (9 samples, 0.16%)</title><rect x="365.2" y="787.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="368.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (9 samples, 0.16%)</title><rect x="365.2" y="771.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="368.2" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (9 samples, 0.16%)</title><rect x="365.2" y="755.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="368.2" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (3 samples, 0.05%)</title><rect x="367.1" y="803.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="370.1" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7 samples, 0.13%)</title><rect x="367.7" y="819.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="370.7" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.07%)</title><rect x="368.4" y="803.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="371.4" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.05%)</title><rect x="368.6" y="787.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="371.6" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.07%)</title><rect x="369.2" y="819.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="372.2" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.07%)</title><rect x="369.2" y="803.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="372.2" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (3 samples, 0.05%)</title><rect x="369.5" y="787.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="372.5" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (110 samples, 1.99%)</title><rect x="370.1" y="835.0" width="23.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="373.1" y="846.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (110 samples, 1.99%)</title><rect x="370.1" y="819.0" width="23.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="373.1" y="830.0">o..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.09%)</title><rect x="370.1" y="803.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="373.1" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.09%)</title><rect x="370.1" y="787.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="373.1" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.09%)</title><rect x="370.1" y="771.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="373.1" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="370.5" y="755.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="373.5" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (105 samples, 1.90%)</title><rect x="371.2" y="803.0" width="22.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="374.2" y="814.0">s..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (13 samples, 0.24%)</title><rect x="371.4" y="787.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="374.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (13 samples, 0.24%)</title><rect x="371.4" y="771.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="374.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.04%)</title><rect x="371.8" y="755.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="374.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (2 samples, 0.04%)</title><rect x="371.8" y="739.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="374.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (9 samples, 0.16%)</title><rect x="372.2" y="755.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="375.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (8 samples, 0.15%)</title><rect x="372.5" y="739.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="375.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (6 samples, 0.11%)</title><rect x="372.7" y="723.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="375.7" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (90 samples, 1.63%)</title><rect x="374.4" y="787.0" width="19.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="377.4" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (90 samples, 1.63%)</title><rect x="374.4" y="771.0" width="19.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="377.4" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (90 samples, 1.63%)</title><rect x="374.4" y="755.0" width="19.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="377.4" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (90 samples, 1.63%)</title><rect x="374.4" y="739.0" width="19.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="377.4" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (90 samples, 1.63%)</title><rect x="374.4" y="723.0" width="19.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="377.4" y="734.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (3 samples, 0.05%)</title><rect x="374.6" y="707.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="377.6" y="718.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.04%)</title><rect x="374.8" y="691.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="377.8" y="702.0"></text>
</g>
<g>
<title>read (84 samples, 1.52%)</title><rect x="375.7" y="707.0" width="17.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="378.7" y="718.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.05%)</title><rect x="393.6" y="851.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="396.6" y="862.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.04%)</title><rect x="393.6" y="835.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="396.6" y="846.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.04%)</title><rect x="393.6" y="819.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="396.6" y="830.0"></text>
</g>
<g>
<title>_res (2 samples, 0.04%)</title><rect x="393.6" y="803.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="396.6" y="814.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=25347] (592 samples, 10.73%)</title><rect x="394.5" y="899.0" width="126.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="397.5" y="910.0">[NIO Selector #3..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.04%)</title><rect x="394.9" y="883.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="397.9" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.04%)</title><rect x="394.9" y="867.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="397.9" y="878.0"></text>
</g>
<g>
<title>[unknown_Java] (3 samples, 0.05%)</title><rect x="395.3" y="883.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="398.3" y="894.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (585 samples, 10.61%)</title><rect x="396.0" y="883.0" width="125.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="399.0" y="894.0">one/nio/server/..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (376 samples, 6.82%)</title><rect x="397.5" y="867.0" width="80.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="400.5" y="878.0">one/nio/n..</text>
</g>
<g>
<title>_res (2 samples, 0.04%)</title><rect x="398.1" y="851.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="401.1" y="862.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (3 samples, 0.05%)</title><rect x="398.6" y="851.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="401.6" y="862.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.04%)</title><rect x="399.2" y="851.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="402.2" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (365 samples, 6.62%)</title><rect x="399.6" y="851.0" width="78.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="402.6" y="862.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (365 samples, 6.62%)</title><rect x="399.6" y="835.0" width="78.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="402.6" y="846.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (365 samples, 6.62%)</title><rect x="399.6" y="819.0" width="78.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="402.6" y="830.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (344 samples, 6.24%)</title><rect x="400.3" y="803.0" width="73.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="403.3" y="814.0">sun/nio/..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (3 samples, 0.05%)</title><rect x="404.3" y="787.0" width="0.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="407.3" y="798.0"></text>
</g>
<g>
<title>kevent (322 samples, 5.84%)</title><rect x="405.0" y="787.0" width="68.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="408.0" y="798.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (6 samples, 0.11%)</title><rect x="473.9" y="803.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="476.9" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.05%)</title><rect x="474.5" y="787.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="477.5" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (3 samples, 0.05%)</title><rect x="475.2" y="803.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="478.2" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (3 samples, 0.05%)</title><rect x="475.8" y="803.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="478.8" y="814.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (3 samples, 0.05%)</title><rect x="475.8" y="787.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="478.8" y="798.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.05%)</title><rect x="475.8" y="771.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="478.8" y="782.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.05%)</title><rect x="475.8" y="755.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="478.8" y="766.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (3 samples, 0.05%)</title><rect x="475.8" y="739.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="478.8" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (4 samples, 0.07%)</title><rect x="476.4" y="803.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="479.4" y="814.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (4 samples, 0.07%)</title><rect x="476.4" y="787.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="479.4" y="798.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (4 samples, 0.07%)</title><rect x="476.4" y="771.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="479.4" y="782.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (4 samples, 0.07%)</title><rect x="476.4" y="755.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="479.4" y="766.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (4 samples, 0.07%)</title><rect x="476.4" y="739.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="479.4" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.04%)</title><rect x="477.3" y="803.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="480.3" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.implDereg (2 samples, 0.04%)</title><rect x="477.3" y="787.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="480.3" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (202 samples, 3.66%)</title><rect x="477.9" y="867.0" width="43.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="480.9" y="878.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (195 samples, 3.54%)</title><rect x="479.2" y="851.0" width="41.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="482.2" y="862.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (99 samples, 1.80%)</title><rect x="479.2" y="835.0" width="21.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="482.2" y="846.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (82 samples, 1.49%)</title><rect x="479.6" y="819.0" width="17.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="482.6" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (78 samples, 1.41%)</title><rect x="480.5" y="803.0" width="16.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="483.5" y="814.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.04%)</title><rect x="480.7" y="787.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="483.7" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.04%)</title><rect x="480.7" y="771.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="483.7" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.handleDefault (75 samples, 1.36%)</title><rect x="481.1" y="787.0" width="16.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="484.1" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendError (11 samples, 0.20%)</title><rect x="481.1" y="771.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="484.1" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (5 samples, 0.09%)</title><rect x="481.1" y="755.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="484.1" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (5 samples, 0.09%)</title><rect x="481.1" y="739.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="484.1" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (5 samples, 0.09%)</title><rect x="481.1" y="723.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="484.1" y="734.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (5 samples, 0.09%)</title><rect x="481.1" y="707.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="484.1" y="718.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (5 samples, 0.09%)</title><rect x="481.1" y="691.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="484.1" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.04%)</title><rect x="481.1" y="675.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="484.1" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="481.1" y="659.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="484.1" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="481.1" y="643.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="484.1" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (3 samples, 0.05%)</title><rect x="481.6" y="675.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="484.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.04%)</title><rect x="481.8" y="659.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="484.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.04%)</title><rect x="481.8" y="643.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="484.8" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (4 samples, 0.07%)</title><rect x="482.2" y="755.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="485.2" y="766.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="482.6" y="739.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="485.6" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.toBytes (2 samples, 0.04%)</title><rect x="483.1" y="755.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="486.1" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.04%)</title><rect x="483.1" y="739.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="486.1" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.entity (64 samples, 1.16%)</title><rect x="483.5" y="771.0" width="13.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="486.5" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.executeAsync (62 samples, 1.12%)</title><rect x="483.9" y="755.0" width="13.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="486.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (62 samples, 1.12%)</title><rect x="483.9" y="739.0" width="13.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="486.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (62 samples, 1.12%)</title><rect x="483.9" y="723.0" width="13.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="486.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (55 samples, 1.00%)</title><rect x="483.9" y="707.0" width="11.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="486.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (5 samples, 0.09%)</title><rect x="483.9" y="691.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="486.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (4 samples, 0.07%)</title><rect x="483.9" y="675.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="486.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 0.05%)</title><rect x="484.1" y="659.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="487.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.13%)</title><rect x="485.0" y="691.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="488.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (7 samples, 0.13%)</title><rect x="485.0" y="675.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="488.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (7 samples, 0.13%)</title><rect x="485.0" y="659.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="488.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (7 samples, 0.13%)</title><rect x="485.0" y="643.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="488.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (7 samples, 0.13%)</title><rect x="485.0" y="627.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="488.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (43 samples, 0.78%)</title><rect x="486.5" y="691.0" width="9.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="489.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (43 samples, 0.78%)</title><rect x="486.5" y="675.0" width="9.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="489.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (42 samples, 0.76%)</title><rect x="486.5" y="659.0" width="9.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="489.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (41 samples, 0.74%)</title><rect x="486.7" y="643.0" width="8.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="489.7" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (41 samples, 0.74%)</title><rect x="486.7" y="627.0" width="8.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="489.7" y="638.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.04%)</title><rect x="486.9" y="611.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="489.9" y="622.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (36 samples, 0.65%)</title><rect x="487.3" y="611.0" width="7.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="490.3" y="622.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.04%)</title><rect x="488.0" y="595.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="491.0" y="606.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (2 samples, 0.04%)</title><rect x="488.0" y="579.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="491.0" y="590.0"></text>
</g>
<g>
<title>Thread::current() (4 samples, 0.07%)</title><rect x="488.4" y="595.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="491.4" y="606.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (4 samples, 0.07%)</title><rect x="488.4" y="579.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="491.4" y="590.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (3 samples, 0.05%)</title><rect x="489.5" y="595.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="492.5" y="606.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.04%)</title><rect x="489.7" y="579.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="492.7" y="590.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="489.7" y="563.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="492.7" y="574.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.04%)</title><rect x="489.7" y="547.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="492.7" y="558.0"></text>
</g>
<g>
<title>__psynch_cvsignal (20 samples, 0.36%)</title><rect x="490.3" y="595.0" width="4.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="493.3" y="606.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.04%)</title><rect x="494.6" y="595.0" width="0.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="497.6" y="606.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (2 samples, 0.04%)</title><rect x="494.6" y="579.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="497.6" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.13%)</title><rect x="495.7" y="707.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="498.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (7 samples, 0.13%)</title><rect x="495.7" y="691.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="498.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (7 samples, 0.13%)</title><rect x="495.7" y="675.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="498.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (7 samples, 0.13%)</title><rect x="495.7" y="659.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="498.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (7 samples, 0.13%)</title><rect x="495.7" y="643.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="498.7" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (7 samples, 0.13%)</title><rect x="495.7" y="627.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="498.7" y="638.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (7 samples, 0.13%)</title><rect x="495.7" y="611.0" width="1.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="498.7" y="622.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (6 samples, 0.11%)</title><rect x="495.7" y="595.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="498.7" y="606.0"></text>
</g>
<g>
<title>__psynch_cvwait (6 samples, 0.11%)</title><rect x="495.7" y="579.0" width="1.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="498.7" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (7 samples, 0.13%)</title><rect x="497.2" y="819.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="500.2" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.05%)</title><rect x="497.2" y="803.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="500.2" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.05%)</title><rect x="497.2" y="787.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="500.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.05%)</title><rect x="497.2" y="771.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="500.2" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.05%)</title><rect x="497.2" y="755.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="500.2" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (4 samples, 0.07%)</title><rect x="497.8" y="803.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="500.8" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (8 samples, 0.15%)</title><rect x="498.7" y="819.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="501.7" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.05%)</title><rect x="499.8" y="803.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="502.8" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.04%)</title><rect x="500.0" y="787.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="503.0" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (96 samples, 1.74%)</title><rect x="500.4" y="835.0" width="20.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="503.4" y="846.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (96 samples, 1.74%)</title><rect x="500.4" y="819.0" width="20.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="503.4" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.07%)</title><rect x="500.4" y="803.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="503.4" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="500.4" y="787.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="503.4" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="500.4" y="771.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="503.4" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="500.8" y="755.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="503.8" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (92 samples, 1.67%)</title><rect x="501.3" y="803.0" width="19.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="504.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.11%)</title><rect x="501.3" y="787.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="504.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.11%)</title><rect x="501.3" y="771.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="504.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.04%)</title><rect x="501.3" y="755.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="504.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (2 samples, 0.04%)</title><rect x="501.3" y="739.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="504.3" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (2 samples, 0.04%)</title><rect x="501.3" y="723.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="504.3" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.set (2 samples, 0.04%)</title><rect x="501.3" y="707.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="504.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.07%)</title><rect x="501.7" y="755.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="504.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.07%)</title><rect x="501.7" y="739.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="504.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (4 samples, 0.07%)</title><rect x="501.7" y="723.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="504.7" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (86 samples, 1.56%)</title><rect x="502.5" y="787.0" width="18.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="505.5" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (86 samples, 1.56%)</title><rect x="502.5" y="771.0" width="18.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="505.5" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (10 samples, 0.18%)</title><rect x="502.8" y="755.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="505.8" y="766.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (10 samples, 0.18%)</title><rect x="502.8" y="739.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="505.8" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (10 samples, 0.18%)</title><rect x="502.8" y="723.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="505.8" y="734.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (10 samples, 0.18%)</title><rect x="502.8" y="707.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="505.8" y="718.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (10 samples, 0.18%)</title><rect x="502.8" y="691.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="505.8" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (9 samples, 0.16%)</title><rect x="503.0" y="675.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="506.0" y="686.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (8 samples, 0.15%)</title><rect x="503.2" y="659.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="506.2" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (75 samples, 1.36%)</title><rect x="504.9" y="755.0" width="16.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="507.9" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (75 samples, 1.36%)</title><rect x="504.9" y="739.0" width="16.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="507.9" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (75 samples, 1.36%)</title><rect x="504.9" y="723.0" width="16.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="507.9" y="734.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (5 samples, 0.09%)</title><rect x="505.5" y="707.0" width="1.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="508.5" y="718.0"></text>
</g>
<g>
<title>read (67 samples, 1.21%)</title><rect x="506.6" y="707.0" width="14.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="509.6" y="718.0"></text>
</g>
<g>
<title>[tid=12803] (6 samples, 0.11%)</title><rect x="521.4" y="899.0" width="1.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="524.4" y="910.0"></text>
</g>
<g>
<title>thread_start (6 samples, 0.11%)</title><rect x="521.4" y="883.0" width="1.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="524.4" y="894.0"></text>
</g>
<g>
<title>_pthread_start (6 samples, 0.11%)</title><rect x="521.4" y="867.0" width="1.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="524.4" y="878.0"></text>
</g>
<g>
<title>_pthread_body (6 samples, 0.11%)</title><rect x="521.4" y="851.0" width="1.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="524.4" y="862.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (6 samples, 0.11%)</title><rect x="521.4" y="835.0" width="1.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="524.4" y="846.0"></text>
</g>
<g>
<title>Thread::call_run() (6 samples, 0.11%)</title><rect x="521.4" y="819.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="524.4" y="830.0"></text>
</g>
<g>
<title>VMThread::run() (6 samples, 0.11%)</title><rect x="521.4" y="803.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="524.4" y="814.0"></text>
</g>
<g>
<title>VMThread::loop() (6 samples, 0.11%)</title><rect x="521.4" y="787.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="524.4" y="798.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.04%)</title><rect x="521.4" y="771.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="524.4" y="782.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.04%)</title><rect x="521.4" y="755.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="524.4" y="766.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.04%)</title><rect x="521.4" y="739.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="524.4" y="750.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.04%)</title><rect x="521.4" y="723.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="524.4" y="734.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.04%)</title><rect x="522.2" y="771.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="525.2" y="782.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.04%)</title><rect x="522.2" y="755.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="525.2" y="766.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (2 samples, 0.04%)</title><rect x="522.2" y="739.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="525.2" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.04%)</title><rect x="522.2" y="723.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="525.2" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (2 samples, 0.04%)</title><rect x="522.2" y="707.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="525.2" y="718.0"></text>
</g>
<g>
<title>[tid=19459] (6 samples, 0.11%)</title><rect x="522.7" y="899.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="525.7" y="910.0"></text>
</g>
<g>
<title>thread_start (6 samples, 0.11%)</title><rect x="522.7" y="883.0" width="1.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="525.7" y="894.0"></text>
</g>
<g>
<title>_pthread_start (6 samples, 0.11%)</title><rect x="522.7" y="867.0" width="1.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="525.7" y="878.0"></text>
</g>
<g>
<title>_pthread_body (6 samples, 0.11%)</title><rect x="522.7" y="851.0" width="1.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="525.7" y="862.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (6 samples, 0.11%)</title><rect x="522.7" y="835.0" width="1.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="525.7" y="846.0"></text>
</g>
<g>
<title>Thread::call_run() (6 samples, 0.11%)</title><rect x="522.7" y="819.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="525.7" y="830.0"></text>
</g>
<g>
<title>GangWorker::loop() (6 samples, 0.11%)</title><rect x="522.7" y="803.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="525.7" y="814.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (3 samples, 0.05%)</title><rect x="522.7" y="787.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="525.7" y="798.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (2 samples, 0.04%)</title><rect x="522.9" y="771.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="525.9" y="782.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (2 samples, 0.04%)</title><rect x="522.9" y="755.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="525.9" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (2 samples, 0.04%)</title><rect x="522.9" y="739.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="525.9" y="750.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (2 samples, 0.04%)</title><rect x="522.9" y="723.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="525.9" y="734.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_buffer(CardTableEntryClosure*, BufferNode*, bool, unsigned int) (2 samples, 0.04%)</title><rect x="522.9" y="707.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="525.9" y="718.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.04%)</title><rect x="522.9" y="691.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="525.9" y="702.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (2 samples, 0.04%)</title><rect x="522.9" y="675.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="525.9" y="686.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (2 samples, 0.04%)</title><rect x="522.9" y="659.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="525.9" y="670.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (2 samples, 0.04%)</title><rect x="522.9" y="643.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="525.9" y="654.0"></text>
</g>
<g>
<title>[tid=22787] (3 samples, 0.05%)</title><rect x="523.9" y="899.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="526.9" y="910.0"></text>
</g>
<g>
<title>thread_start (3 samples, 0.05%)</title><rect x="523.9" y="883.0" width="0.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="526.9" y="894.0"></text>
</g>
<g>
<title>_pthread_start (3 samples, 0.05%)</title><rect x="523.9" y="867.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="526.9" y="878.0"></text>
</g>
<g>
<title>_pthread_body (3 samples, 0.05%)</title><rect x="523.9" y="851.0" width="0.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="526.9" y="862.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.05%)</title><rect x="523.9" y="835.0" width="0.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="526.9" y="846.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 0.05%)</title><rect x="523.9" y="819.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="526.9" y="830.0"></text>
</g>
<g>
<title>JavaThread::run() (3 samples, 0.05%)</title><rect x="523.9" y="803.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="526.9" y="814.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (3 samples, 0.05%)</title><rect x="523.9" y="787.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="526.9" y="798.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (3 samples, 0.05%)</title><rect x="523.9" y="771.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="526.9" y="782.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.04%)</title><rect x="524.2" y="755.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="527.2" y="766.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.04%)</title><rect x="524.2" y="739.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="527.2" y="750.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (2 samples, 0.04%)</title><rect x="524.2" y="723.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="527.2" y="734.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.04%)</title><rect x="524.2" y="707.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="527.2" y="718.0"></text>
</g>
<g>
<title>[tid=26627] (6 samples, 0.11%)</title><rect x="524.6" y="899.0" width="1.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="527.6" y="910.0"></text>
</g>
<g>
<title>thread_start (6 samples, 0.11%)</title><rect x="524.6" y="883.0" width="1.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="527.6" y="894.0"></text>
</g>
<g>
<title>_pthread_start (6 samples, 0.11%)</title><rect x="524.6" y="867.0" width="1.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="527.6" y="878.0"></text>
</g>
<g>
<title>_pthread_body (6 samples, 0.11%)</title><rect x="524.6" y="851.0" width="1.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="527.6" y="862.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (6 samples, 0.11%)</title><rect x="524.6" y="835.0" width="1.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="527.6" y="846.0"></text>
</g>
<g>
<title>Thread::call_run() (6 samples, 0.11%)</title><rect x="524.6" y="819.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="527.6" y="830.0"></text>
</g>
<g>
<title>GangWorker::loop() (6 samples, 0.11%)</title><rect x="524.6" y="803.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="527.6" y="814.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (5 samples, 0.09%)</title><rect x="524.6" y="787.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="527.6" y="798.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (5 samples, 0.09%)</title><rect x="524.6" y="771.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="527.6" y="782.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (5 samples, 0.09%)</title><rect x="524.6" y="755.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="527.6" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (5 samples, 0.09%)</title><rect x="524.6" y="739.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="527.6" y="750.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (5 samples, 0.09%)</title><rect x="524.6" y="723.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="527.6" y="734.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_buffer(CardTableEntryClosure*, BufferNode*, bool, unsigned int) (5 samples, 0.09%)</title><rect x="524.6" y="707.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="527.6" y="718.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 0.09%)</title><rect x="524.6" y="691.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="527.6" y="702.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (5 samples, 0.09%)</title><rect x="524.6" y="675.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="527.6" y="686.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (5 samples, 0.09%)</title><rect x="524.6" y="659.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="527.6" y="670.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (5 samples, 0.09%)</title><rect x="524.6" y="643.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="527.6" y="654.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (4 samples, 0.07%)</title><rect x="524.8" y="627.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="527.8" y="638.0"></text>
</g>
<g>
<title>[tid=26883] (6 samples, 0.11%)</title><rect x="525.9" y="899.0" width="1.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="528.9" y="910.0"></text>
</g>
<g>
<title>thread_start (6 samples, 0.11%)</title><rect x="525.9" y="883.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="528.9" y="894.0"></text>
</g>
<g>
<title>_pthread_start (6 samples, 0.11%)</title><rect x="525.9" y="867.0" width="1.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="528.9" y="878.0"></text>
</g>
<g>
<title>_pthread_body (6 samples, 0.11%)</title><rect x="525.9" y="851.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="528.9" y="862.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (6 samples, 0.11%)</title><rect x="525.9" y="835.0" width="1.2" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="528.9" y="846.0"></text>
</g>
<g>
<title>Thread::call_run() (6 samples, 0.11%)</title><rect x="525.9" y="819.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="528.9" y="830.0"></text>
</g>
<g>
<title>GangWorker::loop() (6 samples, 0.11%)</title><rect x="525.9" y="803.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="528.9" y="814.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (5 samples, 0.09%)</title><rect x="525.9" y="787.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="528.9" y="798.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.05%)</title><rect x="525.9" y="771.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="528.9" y="782.0"></text>
</g>
<g>
<title>OWSTTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.05%)</title><rect x="525.9" y="755.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="528.9" y="766.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.05%)</title><rect x="525.9" y="739.0" width="0.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="528.9" y="750.0"></text>
</g>
<g>
<title>[tid=41731] (6 samples, 0.11%)</title><rect x="527.1" y="899.0" width="1.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="530.1" y="910.0"></text>
</g>
<g>
<title>thread_start (6 samples, 0.11%)</title><rect x="527.1" y="883.0" width="1.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="530.1" y="894.0"></text>
</g>
<g>
<title>_pthread_start (6 samples, 0.11%)</title><rect x="527.1" y="867.0" width="1.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="530.1" y="878.0"></text>
</g>
<g>
<title>_pthread_body (6 samples, 0.11%)</title><rect x="527.1" y="851.0" width="1.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="530.1" y="862.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (6 samples, 0.11%)</title><rect x="527.1" y="835.0" width="1.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="530.1" y="846.0"></text>
</g>
<g>
<title>Thread::call_run() (6 samples, 0.11%)</title><rect x="527.1" y="819.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="530.1" y="830.0"></text>
</g>
<g>
<title>WatcherThread::run() (5 samples, 0.09%)</title><rect x="527.4" y="803.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="530.4" y="814.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (4 samples, 0.07%)</title><rect x="527.6" y="787.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="530.6" y="798.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (4 samples, 0.07%)</title><rect x="527.6" y="771.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="530.6" y="782.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (4 samples, 0.07%)</title><rect x="527.6" y="755.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="530.6" y="766.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 0.07%)</title><rect x="527.6" y="739.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="530.6" y="750.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.05%)</title><rect x="527.6" y="723.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="530.6" y="734.0"></text>
</g>
<g>
<title>[tid=42755] (16 samples, 0.29%)</title><rect x="528.6" y="899.0" width="3.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="531.6" y="910.0"></text>
</g>
<g>
<title>thread_start (16 samples, 0.29%)</title><rect x="528.6" y="883.0" width="3.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="531.6" y="894.0"></text>
</g>
<g>
<title>_pthread_start (16 samples, 0.29%)</title><rect x="528.6" y="867.0" width="3.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="531.6" y="878.0"></text>
</g>
<g>
<title>_pthread_body (16 samples, 0.29%)</title><rect x="528.6" y="851.0" width="3.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="531.6" y="862.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (16 samples, 0.29%)</title><rect x="528.6" y="835.0" width="3.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="531.6" y="846.0"></text>
</g>
<g>
<title>Thread::call_run() (16 samples, 0.29%)</title><rect x="528.6" y="819.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="531.6" y="830.0"></text>
</g>
<g>
<title>JavaThread::run() (16 samples, 0.29%)</title><rect x="528.6" y="803.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="531.6" y="814.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (16 samples, 0.29%)</title><rect x="528.6" y="787.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="531.6" y="798.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (16 samples, 0.29%)</title><rect x="528.6" y="771.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="531.6" y="782.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (16 samples, 0.29%)</title><rect x="528.6" y="755.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="531.6" y="766.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (15 samples, 0.27%)</title><rect x="528.9" y="739.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="531.9" y="750.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (15 samples, 0.27%)</title><rect x="528.9" y="723.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="531.9" y="734.0"></text>
</g>
<g>
<title>Compilation::compile_method() (15 samples, 0.27%)</title><rect x="528.9" y="707.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="531.9" y="718.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (15 samples, 0.27%)</title><rect x="528.9" y="691.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="531.9" y="702.0"></text>
</g>
<g>
<title>Compilation::build_hir() (6 samples, 0.11%)</title><rect x="528.9" y="675.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="531.9" y="686.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (6 samples, 0.11%)</title><rect x="528.9" y="659.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="531.9" y="670.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (6 samples, 0.11%)</title><rect x="528.9" y="643.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="531.9" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (6 samples, 0.11%)</title><rect x="528.9" y="627.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="531.9" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (4 samples, 0.07%)</title><rect x="529.3" y="611.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="532.3" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (4 samples, 0.07%)</title><rect x="529.3" y="595.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="532.3" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (4 samples, 0.07%)</title><rect x="529.3" y="579.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="532.3" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (4 samples, 0.07%)</title><rect x="529.3" y="563.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="532.3" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (4 samples, 0.07%)</title><rect x="529.3" y="547.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="532.3" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (4 samples, 0.07%)</title><rect x="529.3" y="531.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="532.3" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (4 samples, 0.07%)</title><rect x="529.3" y="515.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="532.3" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (4 samples, 0.07%)</title><rect x="529.3" y="499.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="532.3" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (3 samples, 0.05%)</title><rect x="529.3" y="483.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="532.3" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (3 samples, 0.05%)</title><rect x="529.3" y="467.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="532.3" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.04%)</title><rect x="529.3" y="451.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="532.3" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.04%)</title><rect x="529.3" y="435.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="532.3" y="446.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (2 samples, 0.04%)</title><rect x="530.1" y="675.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="533.1" y="686.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (7 samples, 0.13%)</title><rect x="530.6" y="675.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="533.6" y="686.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (6 samples, 0.11%)</title><rect x="530.8" y="659.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="533.8" y="670.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (2 samples, 0.04%)</title><rect x="530.8" y="643.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="533.8" y="654.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (2 samples, 0.04%)</title><rect x="530.8" y="627.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="533.8" y="638.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (2 samples, 0.04%)</title><rect x="530.8" y="611.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="533.8" y="622.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (2 samples, 0.04%)</title><rect x="530.8" y="595.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="533.8" y="606.0"></text>
</g>
<g>
<title>LinearScanWalker::free_collect_inactive_fixed(Interval*) (2 samples, 0.04%)</title><rect x="530.8" y="579.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="533.8" y="590.0"></text>
</g>
<g>
<title>[tid=43267] (195 samples, 3.54%)</title><rect x="532.1" y="899.0" width="41.7" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="535.1" y="910.0">[ti..</text>
</g>
<g>
<title>thread_start (195 samples, 3.54%)</title><rect x="532.1" y="883.0" width="41.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="535.1" y="894.0">thr..</text>
</g>
<g>
<title>_pthread_start (195 samples, 3.54%)</title><rect x="532.1" y="867.0" width="41.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="535.1" y="878.0">_pt..</text>
</g>
<g>
<title>_pthread_body (195 samples, 3.54%)</title><rect x="532.1" y="851.0" width="41.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="535.1" y="862.0">_pt..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (195 samples, 3.54%)</title><rect x="532.1" y="835.0" width="41.7" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="535.1" y="846.0">thr..</text>
</g>
<g>
<title>Thread::call_run() (195 samples, 3.54%)</title><rect x="532.1" y="819.0" width="41.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="535.1" y="830.0">Thr..</text>
</g>
<g>
<title>JavaThread::run() (195 samples, 3.54%)</title><rect x="532.1" y="803.0" width="41.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="535.1" y="814.0">Jav..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (195 samples, 3.54%)</title><rect x="532.1" y="787.0" width="41.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="535.1" y="798.0">Jav..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (195 samples, 3.54%)</title><rect x="532.1" y="771.0" width="41.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="535.1" y="782.0">Com..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (195 samples, 3.54%)</title><rect x="532.1" y="755.0" width="41.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="535.1" y="766.0">Com..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (194 samples, 3.52%)</title><rect x="532.1" y="739.0" width="41.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="535.1" y="750.0">C2C..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (194 samples, 3.52%)</title><rect x="532.1" y="723.0" width="41.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="535.1" y="734.0">Com..</text>
</g>
<g>
<title>Compile::Code_Gen() (110 samples, 1.99%)</title><rect x="532.1" y="707.0" width="23.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="535.1" y="718.0">C..</text>
</g>
<g>
<title>Compile::Output() (5 samples, 0.09%)</title><rect x="532.1" y="691.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="535.1" y="702.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 0.05%)</title><rect x="532.1" y="675.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="535.1" y="686.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.04%)</title><rect x="532.7" y="675.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="535.7" y="686.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.04%)</title><rect x="532.7" y="659.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="535.7" y="670.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.04%)</title><rect x="533.1" y="691.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="536.1" y="702.0"></text>
</g>
<g>
<title>Matcher::match() (13 samples, 0.24%)</title><rect x="533.6" y="691.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="536.6" y="702.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (12 samples, 0.22%)</title><rect x="533.8" y="675.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="536.8" y="686.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.04%)</title><rect x="533.8" y="659.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="536.8" y="670.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (6 samples, 0.11%)</title><rect x="534.4" y="659.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="537.4" y="670.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (3 samples, 0.05%)</title><rect x="534.8" y="643.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="537.8" y="654.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (2 samples, 0.04%)</title><rect x="534.8" y="627.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="537.8" y="638.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (3 samples, 0.05%)</title><rect x="535.7" y="659.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="538.7" y="670.0"></text>
</g>
<g>
<title>Compile::current() (3 samples, 0.05%)</title><rect x="535.7" y="643.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="538.7" y="654.0"></text>
</g>
<g>
<title>ciEnv::current() (2 samples, 0.04%)</title><rect x="535.9" y="627.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="538.9" y="638.0"></text>
</g>
<g>
<title>CompilerThread::current() (2 samples, 0.04%)</title><rect x="535.9" y="611.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="538.9" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (12 samples, 0.22%)</title><rect x="536.8" y="691.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="539.8" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (11 samples, 0.20%)</title><rect x="537.0" y="675.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="540.0" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (4 samples, 0.07%)</title><rect x="537.0" y="659.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="540.0" y="670.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.04%)</title><rect x="538.3" y="659.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="541.3" y="670.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="538.3" y="643.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="541.3" y="654.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.04%)</title><rect x="538.7" y="659.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="541.7" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (75 samples, 1.36%)</title><rect x="539.3" y="691.0" width="16.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="542.3" y="702.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 0.05%)</title><rect x="540.0" y="675.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="543.0" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (7 samples, 0.13%)</title><rect x="540.6" y="675.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="543.6" y="686.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.04%)</title><rect x="541.1" y="659.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="544.1" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (11 samples, 0.20%)</title><rect x="542.1" y="675.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="545.1" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (13 samples, 0.24%)</title><rect x="544.5" y="675.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="547.5" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (10 samples, 0.18%)</title><rect x="544.7" y="659.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="547.7" y="670.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.04%)</title><rect x="544.7" y="643.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="547.7" y="654.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (3 samples, 0.05%)</title><rect x="545.1" y="643.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="548.1" y="654.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (5 samples, 0.09%)</title><rect x="545.8" y="643.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="548.8" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (2 samples, 0.04%)</title><rect x="546.8" y="659.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="549.8" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::de_ssa() (2 samples, 0.04%)</title><rect x="547.5" y="675.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="550.5" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (9 samples, 0.16%)</title><rect x="547.9" y="675.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="550.9" y="686.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (3 samples, 0.05%)</title><rect x="549.0" y="659.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="552.0" y="670.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.04%)</title><rect x="549.0" y="643.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="552.0" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (8 samples, 0.15%)</title><rect x="550.0" y="675.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="553.0" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (4 samples, 0.07%)</title><rect x="550.9" y="659.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="553.9" y="670.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 0.05%)</title><rect x="552.0" y="675.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="555.0" y="686.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (2 samples, 0.04%)</title><rect x="552.0" y="659.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="555.0" y="670.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (3 samples, 0.05%)</title><rect x="553.0" y="675.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="556.0" y="686.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.04%)</title><rect x="553.0" y="659.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="556.0" y="670.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (7 samples, 0.13%)</title><rect x="553.7" y="675.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="556.7" y="686.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.05%)</title><rect x="554.5" y="659.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="557.5" y="670.0"></text>
</g>
<g>
<title>Compile::Optimize() (57 samples, 1.03%)</title><rect x="555.6" y="707.0" width="12.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="558.6" y="718.0"></text>
</g>
<g>
<title>Compile::optimize_loops(PhaseIterGVN&amp;, LoopOptsMode) (17 samples, 0.31%)</title><rect x="555.8" y="691.0" width="3.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="558.8" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (17 samples, 0.31%)</title><rect x="555.8" y="675.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="558.8" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.04%)</title><rect x="556.0" y="659.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="559.0" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (8 samples, 0.15%)</title><rect x="556.7" y="659.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="559.7" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (8 samples, 0.15%)</title><rect x="556.7" y="643.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="559.7" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (7 samples, 0.13%)</title><rect x="556.7" y="627.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="559.7" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (6 samples, 0.11%)</title><rect x="556.9" y="611.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="559.9" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (4 samples, 0.07%)</title><rect x="556.9" y="595.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="559.9" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (2 samples, 0.04%)</title><rect x="557.7" y="595.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="560.7" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (3 samples, 0.05%)</title><rect x="558.4" y="659.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="561.4" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.04%)</title><rect x="558.6" y="643.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="561.6" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.04%)</title><rect x="559.7" y="691.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="562.7" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.04%)</title><rect x="559.7" y="675.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="562.7" y="686.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.04%)</title><rect x="560.1" y="691.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="563.1" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (23 samples, 0.42%)</title><rect x="560.5" y="691.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="563.5" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (5 samples, 0.09%)</title><rect x="561.2" y="675.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="564.2" y="686.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.04%)</title><rect x="561.6" y="659.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="564.6" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.05%)</title><rect x="562.2" y="675.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="565.2" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (2 samples, 0.04%)</title><rect x="562.2" y="659.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="565.2" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 0.13%)</title><rect x="562.9" y="675.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="565.9" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (7 samples, 0.13%)</title><rect x="562.9" y="659.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="565.9" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (5 samples, 0.09%)</title><rect x="562.9" y="643.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="565.9" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (4 samples, 0.07%)</title><rect x="563.1" y="627.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="566.1" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (3 samples, 0.05%)</title><rect x="563.1" y="611.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="566.1" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (2 samples, 0.04%)</title><rect x="563.3" y="595.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="566.3" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.04%)</title><rect x="565.0" y="675.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="568.0" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.04%)</title><rect x="565.0" y="659.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="568.0" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (9 samples, 0.16%)</title><rect x="565.7" y="691.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="568.7" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 0.15%)</title><rect x="565.7" y="675.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="568.7" y="686.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (2 samples, 0.04%)</title><rect x="566.1" y="659.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="569.1" y="670.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.04%)</title><rect x="566.7" y="659.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="569.7" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (25 samples, 0.45%)</title><rect x="568.0" y="707.0" width="5.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="571.0" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (25 samples, 0.45%)</title><rect x="568.0" y="691.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="571.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (25 samples, 0.45%)</title><rect x="568.0" y="675.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="571.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (25 samples, 0.45%)</title><rect x="568.0" y="659.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="571.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (25 samples, 0.45%)</title><rect x="568.0" y="643.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="571.0" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (19 samples, 0.34%)</title><rect x="568.4" y="627.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="571.4" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (19 samples, 0.34%)</title><rect x="568.4" y="611.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="571.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (18 samples, 0.33%)</title><rect x="568.7" y="595.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="571.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (18 samples, 0.33%)</title><rect x="568.7" y="579.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="571.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (15 samples, 0.27%)</title><rect x="568.7" y="563.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="571.7" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (12 samples, 0.22%)</title><rect x="568.7" y="547.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="571.7" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 0.22%)</title><rect x="568.7" y="531.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="571.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 0.22%)</title><rect x="568.7" y="515.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="571.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (12 samples, 0.22%)</title><rect x="568.7" y="499.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="571.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.16%)</title><rect x="568.9" y="483.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="571.9" y="494.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.04%)</title><rect x="568.9" y="467.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="571.9" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.09%)</title><rect x="569.5" y="467.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="572.5" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.09%)</title><rect x="569.5" y="451.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="572.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.09%)</title><rect x="569.5" y="435.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="572.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.07%)</title><rect x="569.5" y="419.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="572.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.05%)</title><rect x="569.5" y="403.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="572.5" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="569.5" y="387.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="572.5" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="569.5" y="371.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="572.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="569.5" y="355.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="572.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="569.5" y="339.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="572.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="569.5" y="323.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="572.5" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="569.5" y="307.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="572.5" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="569.5" y="291.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="572.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="569.5" y="275.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="572.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="569.5" y="259.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="572.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="569.5" y="243.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="572.5" y="254.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.05%)</title><rect x="571.2" y="547.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="574.2" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.05%)</title><rect x="571.2" y="531.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="574.2" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.05%)</title><rect x="571.2" y="515.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="574.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.05%)</title><rect x="571.2" y="499.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="574.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.05%)</title><rect x="571.2" y="483.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="574.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.05%)</title><rect x="571.2" y="467.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="574.2" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.05%)</title><rect x="571.2" y="451.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="574.2" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.05%)</title><rect x="571.2" y="435.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="574.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.05%)</title><rect x="571.2" y="419.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="574.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.05%)</title><rect x="571.2" y="403.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="574.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.05%)</title><rect x="571.2" y="387.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="574.2" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.05%)</title><rect x="571.2" y="371.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="574.2" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.05%)</title><rect x="571.2" y="355.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="574.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.05%)</title><rect x="571.2" y="339.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="574.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.05%)</title><rect x="571.2" y="323.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="574.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.05%)</title><rect x="571.2" y="307.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="574.2" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.05%)</title><rect x="571.2" y="291.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="574.2" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.05%)</title><rect x="571.2" y="275.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="574.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.05%)</title><rect x="571.2" y="259.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="574.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.05%)</title><rect x="571.2" y="243.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="574.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.05%)</title><rect x="571.2" y="227.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="574.2" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.05%)</title><rect x="571.2" y="211.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="574.2" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.05%)</title><rect x="571.2" y="195.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="574.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="571.2" y="179.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="574.2" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="571.2" y="163.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="574.2" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="571.2" y="147.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="574.2" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="571.2" y="131.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="574.2" y="142.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="571.2" y="115.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="574.2" y="126.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="571.2" y="99.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="574.2" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="571.2" y="83.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="574.2" y="94.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="571.2" y="67.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="574.2" y="78.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="571.2" y="51.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="574.2" y="62.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="571.2" y="35.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="574.2" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.04%)</title><rect x="572.1" y="563.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="575.1" y="574.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.07%)</title><rect x="572.5" y="627.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="575.5" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.07%)</title><rect x="572.5" y="611.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="575.5" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.07%)</title><rect x="572.5" y="595.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="575.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.07%)</title><rect x="572.5" y="579.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="575.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.07%)</title><rect x="572.5" y="563.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="575.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.07%)</title><rect x="572.5" y="547.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="575.5" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.07%)</title><rect x="572.5" y="531.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="575.5" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.07%)</title><rect x="572.5" y="515.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="575.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.07%)</title><rect x="572.5" y="499.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="575.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.07%)</title><rect x="572.5" y="483.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="575.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.07%)</title><rect x="572.5" y="467.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="575.5" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.05%)</title><rect x="572.7" y="451.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="575.7" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.05%)</title><rect x="572.7" y="435.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="575.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.05%)</title><rect x="572.7" y="419.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="575.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.05%)</title><rect x="572.7" y="403.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="575.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.05%)</title><rect x="572.7" y="387.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="575.7" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="572.7" y="371.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="575.7" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="572.7" y="355.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="575.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="572.7" y="339.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="575.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="572.7" y="323.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="575.7" y="334.0"></text>
</g>
<g>
<title>[tid=4615] (4 samples, 0.07%)</title><rect x="573.8" y="899.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="576.8" y="910.0"></text>
</g>
<g>
<title>thread_start (4 samples, 0.07%)</title><rect x="573.8" y="883.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="576.8" y="894.0"></text>
</g>
<g>
<title>_pthread_start (4 samples, 0.07%)</title><rect x="573.8" y="867.0" width="0.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="576.8" y="878.0"></text>
</g>
<g>
<title>_pthread_body (4 samples, 0.07%)</title><rect x="573.8" y="851.0" width="0.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="576.8" y="862.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (4 samples, 0.07%)</title><rect x="573.8" y="835.0" width="0.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="576.8" y="846.0"></text>
</g>
<g>
<title>Thread::call_run() (4 samples, 0.07%)</title><rect x="573.8" y="819.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="576.8" y="830.0"></text>
</g>
<g>
<title>GangWorker::loop() (4 samples, 0.07%)</title><rect x="573.8" y="803.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="576.8" y="814.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (4 samples, 0.07%)</title><rect x="573.8" y="787.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="576.8" y="798.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.04%)</title><rect x="573.8" y="771.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="576.8" y="782.0"></text>
</g>
<g>
<title>OWSTTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.04%)</title><rect x="573.8" y="755.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="576.8" y="766.0"></text>
</g>
<g>
<title>[worker tid=28419] (760 samples, 13.78%)</title><rect x="574.6" y="899.0" width="162.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="577.6" y="910.0">[worker tid=28419]</text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (2 samples, 0.04%)</title><rect x="574.9" y="883.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="577.9" y="894.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (33 samples, 0.60%)</title><rect x="575.3" y="883.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="578.3" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (33 samples, 0.60%)</title><rect x="575.3" y="867.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="578.3" y="878.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (5 samples, 0.09%)</title><rect x="575.3" y="851.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="578.3" y="862.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 0.09%)</title><rect x="575.3" y="835.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="578.3" y="846.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.09%)</title><rect x="575.3" y="819.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="578.3" y="830.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (3 samples, 0.05%)</title><rect x="576.4" y="851.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="579.4" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (25 samples, 0.45%)</title><rect x="577.0" y="851.0" width="5.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="580.0" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (12 samples, 0.22%)</title><rect x="579.8" y="835.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="582.8" y="846.0"></text>
</g>
<g>
<title>[not_walkable] (4 samples, 0.07%)</title><rect x="582.3" y="883.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="585.3" y="894.0"></text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 0.05%)</title><rect x="583.2" y="883.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="586.2" y="894.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (3 samples, 0.05%)</title><rect x="583.2" y="867.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="586.2" y="878.0"></text>
</g>
<g>
<title>[unknown_Java] (6 samples, 0.11%)</title><rect x="583.8" y="883.0" width="1.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="586.8" y="894.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (5 samples, 0.09%)</title><rect x="584.1" y="867.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="587.1" y="878.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (4 samples, 0.07%)</title><rect x="584.1" y="851.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="587.1" y="862.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (2 samples, 0.04%)</title><rect x="584.1" y="835.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="587.1" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.run (710 samples, 12.87%)</title><rect x="585.1" y="883.0" width="151.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="588.1" y="894.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (710 samples, 12.87%)</title><rect x="585.1" y="867.0" width="151.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="588.1" y="878.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (710 samples, 12.87%)</title><rect x="585.1" y="851.0" width="151.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="588.1" y="862.0">java/util/concurren..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.04%)</title><rect x="586.0" y="835.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="589.0" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.04%)</title><rect x="586.0" y="819.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="589.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (464 samples, 8.41%)</title><rect x="586.6" y="835.0" width="99.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="589.6" y="846.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (463 samples, 8.40%)</title><rect x="586.8" y="819.0" width="99.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="589.8" y="830.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (422 samples, 7.65%)</title><rect x="586.8" y="803.0" width="90.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="589.8" y="814.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (3 samples, 0.05%)</title><rect x="587.1" y="787.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="590.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (6 samples, 0.11%)</title><rect x="587.9" y="787.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="590.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.11%)</title><rect x="587.9" y="771.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="590.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.09%)</title><rect x="587.9" y="755.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="590.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.09%)</title><rect x="587.9" y="739.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="590.9" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (5 samples, 0.09%)</title><rect x="587.9" y="723.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="590.9" y="734.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (4 samples, 0.07%)</title><rect x="588.1" y="707.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="591.1" y="718.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.05%)</title><rect x="588.3" y="691.0" width="0.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="591.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (410 samples, 7.43%)</title><rect x="589.4" y="787.0" width="87.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="592.4" y="798.0">java/util/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (410 samples, 7.43%)</title><rect x="589.4" y="771.0" width="87.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="592.4" y="782.0">jdk/intern..</text>
</g>
<g>
<title>HandleMarkCleaner::HandleMarkCleaner(Thread*) (2 samples, 0.04%)</title><rect x="592.6" y="755.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="595.6" y="766.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (389 samples, 7.05%)</title><rect x="593.9" y="755.0" width="83.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="596.9" y="766.0">Unsafe_Pa..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.04%)</title><rect x="594.1" y="739.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="597.1" y="750.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (2 samples, 0.04%)</title><rect x="595.6" y="739.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="598.6" y="750.0"></text>
</g>
<g>
<title>JfrEventSetting::setting(JfrEventId) (2 samples, 0.04%)</title><rect x="595.6" y="723.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="598.6" y="734.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (366 samples, 6.64%)</title><rect x="596.3" y="739.0" width="78.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="599.3" y="750.0">Parker::p..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (4 samples, 0.07%)</title><rect x="596.7" y="723.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="599.7" y="734.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.04%)</title><rect x="597.1" y="707.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="600.1" y="718.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.04%)</title><rect x="597.1" y="691.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="600.1" y="702.0"></text>
</g>
<g>
<title>Monitor::TryFast() (2 samples, 0.04%)</title><rect x="597.1" y="675.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="600.1" y="686.0"></text>
</g>
<g>
<title>__psynch_cvwait (355 samples, 6.44%)</title><rect x="597.8" y="723.0" width="75.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="600.8" y="734.0">__psynch..</text>
</g>
<g>
<title>_pthread_cond_wait (3 samples, 0.05%)</title><rect x="673.7" y="723.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="676.7" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.07%)</title><rect x="674.8" y="739.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="677.8" y="750.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.04%)</title><rect x="675.0" y="723.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="678.0" y="734.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.04%)</title><rect x="675.0" y="707.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="678.0" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (2 samples, 0.04%)</title><rect x="675.6" y="739.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="678.6" y="750.0"></text>
</g>
<g>
<title>pthread_cond_wait (2 samples, 0.04%)</title><rect x="676.3" y="739.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="679.3" y="750.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (2 samples, 0.04%)</title><rect x="676.7" y="739.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="679.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (13 samples, 0.24%)</title><rect x="677.1" y="803.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="680.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (12 samples, 0.22%)</title><rect x="677.3" y="787.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="680.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (10 samples, 0.18%)</title><rect x="677.6" y="771.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="680.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (6 samples, 0.11%)</title><rect x="677.6" y="755.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="680.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (6 samples, 0.11%)</title><rect x="677.6" y="739.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="680.6" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (6 samples, 0.11%)</title><rect x="677.6" y="723.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="680.6" y="734.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (6 samples, 0.11%)</title><rect x="677.6" y="707.0" width="1.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="680.6" y="718.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (5 samples, 0.09%)</title><rect x="677.6" y="691.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="680.6" y="702.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.09%)</title><rect x="677.6" y="675.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="680.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (4 samples, 0.07%)</title><rect x="678.8" y="755.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="681.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (28 samples, 0.51%)</title><rect x="679.9" y="803.0" width="6.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="682.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (28 samples, 0.51%)</title><rect x="679.9" y="787.0" width="6.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="682.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (28 samples, 0.51%)</title><rect x="679.9" y="771.0" width="6.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="682.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (28 samples, 0.51%)</title><rect x="679.9" y="755.0" width="6.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="682.9" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (28 samples, 0.51%)</title><rect x="679.9" y="739.0" width="6.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="682.9" y="750.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (27 samples, 0.49%)</title><rect x="680.1" y="723.0" width="5.8" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="683.1" y="734.0"></text>
</g>
<g>
<title>__psynch_cvsignal (16 samples, 0.29%)</title><rect x="681.8" y="707.0" width="3.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="684.8" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl$$Lambda$72/1051234503.run (239 samples, 4.33%)</title><rect x="685.9" y="835.0" width="51.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="688.9" y="846.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.lambda$executeAsync$3 (239 samples, 4.33%)</title><rect x="685.9" y="819.0" width="51.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="688.9" y="830.0">ru/ma..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (175 samples, 3.17%)</title><rect x="685.9" y="803.0" width="37.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="688.9" y="814.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (165 samples, 2.99%)</title><rect x="685.9" y="787.0" width="35.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="688.9" y="798.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.04%)</title><rect x="685.9" y="771.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="688.9" y="782.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.04%)</title><rect x="685.9" y="755.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="688.9" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.04%)</title><rect x="685.9" y="739.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="688.9" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.04%)</title><rect x="685.9" y="723.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="688.9" y="734.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (163 samples, 2.96%)</title><rect x="686.3" y="771.0" width="34.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="689.3" y="782.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (163 samples, 2.96%)</title><rect x="686.3" y="755.0" width="34.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="689.3" y="766.0">on..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (161 samples, 2.92%)</title><rect x="686.8" y="739.0" width="34.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="689.8" y="750.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (159 samples, 2.88%)</title><rect x="687.2" y="723.0" width="34.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="690.2" y="734.0">on..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.07%)</title><rect x="687.2" y="707.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="690.2" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="687.2" y="691.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="690.2" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="687.6" y="675.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="690.6" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (155 samples, 2.81%)</title><rect x="688.0" y="707.0" width="33.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="691.0" y="718.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (154 samples, 2.79%)</title><rect x="688.3" y="691.0" width="32.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="691.3" y="702.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (154 samples, 2.79%)</title><rect x="688.3" y="675.0" width="32.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="691.3" y="686.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (154 samples, 2.79%)</title><rect x="688.3" y="659.0" width="32.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="691.3" y="670.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (153 samples, 2.77%)</title><rect x="688.5" y="643.0" width="32.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="691.5" y="654.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (149 samples, 2.70%)</title><rect x="689.3" y="627.0" width="31.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="692.3" y="638.0">su..</text>
</g>
<g>
<title>write (143 samples, 2.59%)</title><rect x="690.6" y="611.0" width="30.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="693.6" y="622.0">wr..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (9 samples, 0.16%)</title><rect x="721.2" y="787.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="724.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (9 samples, 0.16%)</title><rect x="721.2" y="771.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="724.2" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (9 samples, 0.16%)</title><rect x="721.2" y="755.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="724.2" y="766.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (5 samples, 0.09%)</title><rect x="721.2" y="739.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="724.2" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (5 samples, 0.09%)</title><rect x="721.2" y="723.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="724.2" y="734.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (5 samples, 0.09%)</title><rect x="721.2" y="707.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="724.2" y="718.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (5 samples, 0.09%)</title><rect x="721.2" y="691.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="724.2" y="702.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (5 samples, 0.09%)</title><rect x="721.2" y="675.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="724.2" y="686.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.07%)</title><rect x="721.4" y="659.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="724.4" y="670.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.07%)</title><rect x="722.3" y="739.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="725.3" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl$$Lambda$71/1472914411.act (64 samples, 1.16%)</title><rect x="723.3" y="803.0" width="13.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="726.3" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.lambda$entity$0 (64 samples, 1.16%)</title><rect x="723.3" y="787.0" width="13.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="726.3" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.get (64 samples, 1.16%)</title><rect x="723.3" y="771.0" width="13.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="726.3" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (12 samples, 0.22%)</title><rect x="723.8" y="755.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="726.8" y="766.0"></text>
</g>
<g>
<title>CompiledMethod::handler_for_exception_and_pc(Handle, unsigned char*) (2 samples, 0.04%)</title><rect x="723.8" y="739.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="726.8" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (8 samples, 0.15%)</title><rect x="724.4" y="739.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="727.4" y="750.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (2 samples, 0.04%)</title><rect x="725.5" y="723.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="728.5" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (49 samples, 0.89%)</title><rect x="726.6" y="755.0" width="10.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="729.6" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.04%)</title><rect x="726.8" y="739.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="729.8" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/2125107527.invoke (2 samples, 0.04%)</title><rect x="726.8" y="723.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="729.8" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.04%)</title><rect x="726.8" y="707.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="729.8" y="718.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (2 samples, 0.04%)</title><rect x="726.8" y="691.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="729.8" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (11 samples, 0.20%)</title><rect x="727.2" y="739.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="730.2" y="750.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (10 samples, 0.18%)</title><rect x="727.2" y="723.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="730.2" y="734.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (9 samples, 0.16%)</title><rect x="727.4" y="707.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="730.4" y="718.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 0.07%)</title><rect x="727.8" y="691.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="730.8" y="702.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.newCapacity (3 samples, 0.05%)</title><rect x="727.8" y="675.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="730.8" y="686.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (2 samples, 0.04%)</title><rect x="728.7" y="691.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="731.7" y="702.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.04%)</title><rect x="728.7" y="675.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="731.7" y="686.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (29 samples, 0.53%)</title><rect x="729.6" y="739.0" width="6.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="732.6" y="750.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (29 samples, 0.53%)</title><rect x="729.6" y="723.0" width="6.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="732.6" y="734.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (27 samples, 0.49%)</title><rect x="730.0" y="707.0" width="5.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="733.0" y="718.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (20 samples, 0.36%)</title><rect x="731.3" y="691.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="734.3" y="702.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.04%)</title><rect x="732.3" y="675.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="735.3" y="686.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (12 samples, 0.22%)</title><rect x="733.0" y="675.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="736.0" y="686.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (12 samples, 0.22%)</title><rect x="733.0" y="659.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="736.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (12 samples, 0.22%)</title><rect x="733.0" y="643.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="736.0" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (9 samples, 0.16%)</title><rect x="733.0" y="627.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="736.0" y="638.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="733.4" y="611.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="736.4" y="622.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (2 samples, 0.04%)</title><rect x="734.5" y="611.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="737.5" y="622.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (2 samples, 0.04%)</title><rect x="735.1" y="627.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="738.1" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.convertSub (6 samples, 0.11%)</title><rect x="735.8" y="739.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="738.8" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.array (6 samples, 0.11%)</title><rect x="735.8" y="723.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="738.8" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (5 samples, 0.09%)</title><rect x="736.0" y="707.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="739.0" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.09%)</title><rect x="736.0" y="691.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="739.0" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.09%)</title><rect x="736.0" y="675.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="739.0" y="686.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="736.0" y="659.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="739.0" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="736.0" y="643.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="739.0" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="736.0" y="627.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="739.0" y="638.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.04%)</title><rect x="736.4" y="659.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="739.4" y="670.0"></text>
</g>
<g>
<title>[worker tid=35075] (677 samples, 12.28%)</title><rect x="737.3" y="899.0" width="144.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="740.3" y="910.0">[worker tid=35075]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (22 samples, 0.40%)</title><rect x="737.5" y="883.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="740.5" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (20 samples, 0.36%)</title><rect x="737.7" y="867.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="740.7" y="878.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (6 samples, 0.11%)</title><rect x="737.7" y="851.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="740.7" y="862.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 0.09%)</title><rect x="737.9" y="835.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="740.9" y="846.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.09%)</title><rect x="737.9" y="819.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="740.9" y="830.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.04%)</title><rect x="739.0" y="851.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="742.0" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (12 samples, 0.22%)</title><rect x="739.4" y="851.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="742.4" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (7 samples, 0.13%)</title><rect x="740.5" y="835.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="743.5" y="846.0"></text>
</g>
<g>
<title>[not_walkable] (4 samples, 0.07%)</title><rect x="742.4" y="883.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="745.4" y="894.0"></text>
</g>
<g>
<title>[unknown_Java] (4 samples, 0.07%)</title><rect x="743.5" y="883.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="746.5" y="894.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (2 samples, 0.04%)</title><rect x="743.9" y="867.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="746.9" y="878.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.04%)</title><rect x="743.9" y="851.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="746.9" y="862.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (2 samples, 0.04%)</title><rect x="743.9" y="835.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="746.9" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.run (644 samples, 11.68%)</title><rect x="744.3" y="883.0" width="137.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="747.3" y="894.0">java/lang/Thread...</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (644 samples, 11.68%)</title><rect x="744.3" y="867.0" width="137.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="747.3" y="878.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (644 samples, 11.68%)</title><rect x="744.3" y="851.0" width="137.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="747.3" y="862.0">java/util/concurr..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (4 samples, 0.07%)</title><rect x="744.5" y="835.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="747.5" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (3 samples, 0.05%)</title><rect x="744.7" y="819.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="747.7" y="830.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (3 samples, 0.05%)</title><rect x="744.7" y="803.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="747.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (425 samples, 7.71%)</title><rect x="745.8" y="835.0" width="90.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="748.8" y="846.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (424 samples, 7.69%)</title><rect x="745.8" y="819.0" width="90.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="748.8" y="830.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (383 samples, 6.94%)</title><rect x="745.8" y="803.0" width="82.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="748.8" y="814.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.04%)</title><rect x="746.5" y="787.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="749.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (5 samples, 0.09%)</title><rect x="746.9" y="787.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="749.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.09%)</title><rect x="746.9" y="771.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="749.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.09%)</title><rect x="746.9" y="755.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="749.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.07%)</title><rect x="747.1" y="739.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="750.1" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (4 samples, 0.07%)</title><rect x="747.1" y="723.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="750.1" y="734.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (4 samples, 0.07%)</title><rect x="747.1" y="707.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="750.1" y="718.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.04%)</title><rect x="747.5" y="691.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="750.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (372 samples, 6.75%)</title><rect x="748.0" y="787.0" width="79.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="751.0" y="798.0">java/util..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (372 samples, 6.75%)</title><rect x="748.0" y="771.0" width="79.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="751.0" y="782.0">jdk/inter..</text>
</g>
<g>
<title>ThreadInVMfromNative::ThreadInVMfromNative(JavaThread*) (2 samples, 0.04%)</title><rect x="753.1" y="755.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="756.1" y="766.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (345 samples, 6.26%)</title><rect x="753.7" y="755.0" width="73.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="756.7" y="766.0">Unsafe_P..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (4 samples, 0.07%)</title><rect x="754.8" y="739.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="757.8" y="750.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (4 samples, 0.07%)</title><rect x="754.8" y="723.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="757.8" y="734.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (4 samples, 0.07%)</title><rect x="754.8" y="707.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="757.8" y="718.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (4 samples, 0.07%)</title><rect x="754.8" y="691.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="757.8" y="702.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (2 samples, 0.04%)</title><rect x="755.2" y="675.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="758.2" y="686.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (320 samples, 5.80%)</title><rect x="755.7" y="739.0" width="68.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="758.7" y="750.0">Parker:..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (2 samples, 0.04%)</title><rect x="756.3" y="723.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="759.3" y="734.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.04%)</title><rect x="756.7" y="723.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="759.7" y="734.0"></text>
</g>
<g>
<title>__psynch_cvwait (309 samples, 5.60%)</title><rect x="757.2" y="723.0" width="66.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="760.2" y="734.0">__psync..</text>
</g>
<g>
<title>_pthread_cond_wait (2 samples, 0.04%)</title><rect x="823.3" y="723.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="826.3" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.07%)</title><rect x="824.3" y="739.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="827.3" y="750.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.04%)</title><rect x="824.6" y="723.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="827.6" y="734.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.04%)</title><rect x="824.6" y="707.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="827.6" y="718.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="824.6" y="691.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="827.6" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (3 samples, 0.05%)</title><rect x="825.2" y="739.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="828.2" y="750.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.04%)</title><rect x="825.2" y="723.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="828.2" y="734.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="825.2" y="707.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="828.2" y="718.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.04%)</title><rect x="825.2" y="691.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="828.2" y="702.0"></text>
</g>
<g>
<title>pthread_cond_wait (2 samples, 0.04%)</title><rect x="826.3" y="739.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="829.3" y="750.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (3 samples, 0.05%)</title><rect x="826.7" y="739.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="829.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (11 samples, 0.20%)</title><rect x="827.8" y="803.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="830.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (11 samples, 0.20%)</title><rect x="827.8" y="787.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="830.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (9 samples, 0.16%)</title><rect x="828.0" y="771.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="831.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (5 samples, 0.09%)</title><rect x="828.4" y="755.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="831.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (5 samples, 0.09%)</title><rect x="828.4" y="739.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="831.4" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (5 samples, 0.09%)</title><rect x="828.4" y="723.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="831.4" y="734.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (5 samples, 0.09%)</title><rect x="828.4" y="707.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="831.4" y="718.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (4 samples, 0.07%)</title><rect x="828.4" y="691.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="831.4" y="702.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.07%)</title><rect x="828.4" y="675.0" width="0.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="831.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (2 samples, 0.04%)</title><rect x="829.5" y="755.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="832.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (30 samples, 0.54%)</title><rect x="830.1" y="803.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="833.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (30 samples, 0.54%)</title><rect x="830.1" y="787.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="833.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (30 samples, 0.54%)</title><rect x="830.1" y="771.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="833.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (30 samples, 0.54%)</title><rect x="830.1" y="755.0" width="6.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="833.1" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (30 samples, 0.54%)</title><rect x="830.1" y="739.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="833.1" y="750.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (27 samples, 0.49%)</title><rect x="830.8" y="723.0" width="5.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="833.8" y="734.0"></text>
</g>
<g>
<title>__psynch_cvsignal (22 samples, 0.40%)</title><rect x="831.6" y="707.0" width="4.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="834.6" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl$$Lambda$72/1051234503.run (212 samples, 3.84%)</title><rect x="836.7" y="835.0" width="45.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="839.7" y="846.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.lambda$executeAsync$3 (212 samples, 3.84%)</title><rect x="836.7" y="819.0" width="45.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="839.7" y="830.0">ru/m..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (137 samples, 2.48%)</title><rect x="836.7" y="803.0" width="29.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="839.7" y="814.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (136 samples, 2.47%)</title><rect x="836.7" y="787.0" width="29.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="839.7" y="798.0">on..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (4 samples, 0.07%)</title><rect x="836.7" y="771.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="839.7" y="782.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.04%)</title><rect x="837.2" y="755.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="840.2" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.04%)</title><rect x="837.2" y="739.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="840.2" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.04%)</title><rect x="837.2" y="723.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="840.2" y="734.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (132 samples, 2.39%)</title><rect x="837.6" y="771.0" width="28.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="840.6" y="782.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (132 samples, 2.39%)</title><rect x="837.6" y="755.0" width="28.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="840.6" y="766.0">on..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (132 samples, 2.39%)</title><rect x="837.6" y="739.0" width="28.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="840.6" y="750.0">on..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.07%)</title><rect x="838.0" y="723.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="841.0" y="734.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (126 samples, 2.28%)</title><rect x="838.9" y="723.0" width="26.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="841.9" y="734.0">o..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.07%)</title><rect x="838.9" y="707.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="841.9" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="838.9" y="691.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="841.9" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="838.9" y="675.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="841.9" y="686.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="838.9" y="659.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="841.9" y="670.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.04%)</title><rect x="839.3" y="675.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="842.3" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (122 samples, 2.21%)</title><rect x="839.7" y="707.0" width="26.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="842.7" y="718.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (122 samples, 2.21%)</title><rect x="839.7" y="691.0" width="26.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="842.7" y="702.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (122 samples, 2.21%)</title><rect x="839.7" y="675.0" width="26.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="842.7" y="686.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (122 samples, 2.21%)</title><rect x="839.7" y="659.0" width="26.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="842.7" y="670.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (122 samples, 2.21%)</title><rect x="839.7" y="643.0" width="26.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="842.7" y="654.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (119 samples, 2.16%)</title><rect x="840.4" y="627.0" width="25.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="843.4" y="638.0">s..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.04%)</title><rect x="840.8" y="611.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="843.8" y="622.0"></text>
</g>
<g>
<title>write (115 samples, 2.09%)</title><rect x="841.2" y="611.0" width="24.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="844.2" y="622.0">w..</text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl$$Lambda$71/1472914411.act (75 samples, 1.36%)</title><rect x="866.1" y="803.0" width="16.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="869.1" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.lambda$entity$0 (75 samples, 1.36%)</title><rect x="866.1" y="787.0" width="16.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="869.1" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.get (75 samples, 1.36%)</title><rect x="866.1" y="771.0" width="16.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="869.1" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (9 samples, 0.16%)</title><rect x="866.1" y="755.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="869.1" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (5 samples, 0.09%)</title><rect x="866.3" y="739.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="869.3" y="750.0"></text>
</g>
<g>
<title>ExceptionCache::match(Handle, unsigned char*) (2 samples, 0.04%)</title><rect x="866.9" y="723.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="869.9" y="734.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.05%)</title><rect x="867.3" y="739.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="870.3" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (65 samples, 1.18%)</title><rect x="868.2" y="755.0" width="13.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="871.2" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 0.05%)</title><rect x="868.4" y="739.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="871.4" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/2125107527.invoke (3 samples, 0.05%)</title><rect x="868.4" y="723.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="871.4" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.05%)</title><rect x="868.4" y="707.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="871.4" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (5 samples, 0.09%)</title><rect x="869.1" y="739.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="872.1" y="750.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (2 samples, 0.04%)</title><rect x="869.3" y="723.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="872.3" y="734.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.04%)</title><rect x="869.3" y="707.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="872.3" y="718.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (2 samples, 0.04%)</title><rect x="869.7" y="723.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="872.7" y="734.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (50 samples, 0.91%)</title><rect x="870.1" y="739.0" width="10.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="873.1" y="750.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (50 samples, 0.91%)</title><rect x="870.1" y="723.0" width="10.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="873.1" y="734.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (48 samples, 0.87%)</title><rect x="870.6" y="707.0" width="10.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="873.6" y="718.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.04%)</title><rect x="871.6" y="691.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="874.6" y="702.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (40 samples, 0.73%)</title><rect x="872.3" y="691.0" width="8.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="875.3" y="702.0"></text>
</g>
<g>
<title>free (2 samples, 0.04%)</title><rect x="872.7" y="675.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="875.7" y="686.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.04%)</title><rect x="872.7" y="659.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="875.7" y="670.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.05%)</title><rect x="873.1" y="675.0" width="0.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="876.1" y="686.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.09%)</title><rect x="873.8" y="675.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="876.8" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.07%)</title><rect x="873.8" y="659.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="876.8" y="670.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.05%)</title><rect x="874.0" y="643.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="877.0" y="654.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.05%)</title><rect x="874.0" y="627.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="877.0" y="638.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.05%)</title><rect x="874.0" y="611.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="877.0" y="622.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.05%)</title><rect x="874.0" y="595.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="877.0" y="606.0"></text>
</g>
<g>
<title>operator new(unsigned long) (5 samples, 0.09%)</title><rect x="874.8" y="675.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="877.8" y="686.0"></text>
</g>
<g>
<title>malloc (5 samples, 0.09%)</title><rect x="874.8" y="659.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="877.8" y="670.0"></text>
</g>
<g>
<title>malloc_zone_malloc (5 samples, 0.09%)</title><rect x="874.8" y="643.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="877.8" y="654.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="875.5" y="627.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="878.5" y="638.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="875.5" y="611.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="878.5" y="622.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (20 samples, 0.36%)</title><rect x="875.9" y="675.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="878.9" y="686.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (19 samples, 0.34%)</title><rect x="875.9" y="659.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="878.9" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (19 samples, 0.34%)</title><rect x="875.9" y="643.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="878.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (15 samples, 0.27%)</title><rect x="876.1" y="627.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="879.1" y="638.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (3 samples, 0.05%)</title><rect x="877.0" y="611.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="880.0" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.04%)</title><rect x="877.8" y="611.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="880.8" y="622.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (5 samples, 0.09%)</title><rect x="878.3" y="611.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="881.3" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.04%)</title><rect x="879.3" y="627.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="882.3" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (2 samples, 0.04%)</title><rect x="880.2" y="675.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="883.2" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.convertSub (6 samples, 0.11%)</title><rect x="880.8" y="739.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="883.8" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.array (6 samples, 0.11%)</title><rect x="880.8" y="723.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="883.8" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (5 samples, 0.09%)</title><rect x="881.0" y="707.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="884.0" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.09%)</title><rect x="881.0" y="691.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="884.0" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.09%)</title><rect x="881.0" y="675.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="884.0" y="686.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="881.5" y="659.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="884.5" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="881.7" y="643.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="884.7" y="654.0"></text>
</g>
<g>
<title>[worker tid=35587] (688 samples, 12.48%)</title><rect x="882.1" y="899.0" width="147.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="885.1" y="910.0">[worker tid=35587]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (24 samples, 0.44%)</title><rect x="882.3" y="883.0" width="5.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="885.3" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (24 samples, 0.44%)</title><rect x="882.3" y="867.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="885.3" y="878.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (6 samples, 0.11%)</title><rect x="882.5" y="851.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="885.5" y="862.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 0.09%)</title><rect x="882.8" y="835.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="885.8" y="846.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.09%)</title><rect x="882.8" y="819.0" width="1.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="885.8" y="830.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (6 samples, 0.11%)</title><rect x="883.8" y="851.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="886.8" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (11 samples, 0.20%)</title><rect x="885.1" y="851.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="888.1" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (8 samples, 0.15%)</title><rect x="885.7" y="835.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="888.7" y="846.0"></text>
</g>
<g>
<title>[not_walkable_Java] (4 samples, 0.07%)</title><rect x="887.7" y="883.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="890.7" y="894.0"></text>
</g>
<g>
<title>Runtime1::exception_handler_for_pc(JavaThread*) (2 samples, 0.04%)</title><rect x="887.9" y="867.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="890.9" y="878.0"></text>
</g>
<g>
<title>java/lang/Thread.run (657 samples, 11.91%)</title><rect x="888.7" y="883.0" width="140.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="891.7" y="894.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (657 samples, 11.91%)</title><rect x="888.7" y="867.0" width="140.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="891.7" y="878.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (657 samples, 11.91%)</title><rect x="888.7" y="851.0" width="140.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="891.7" y="862.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.04%)</title><rect x="889.2" y="835.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="892.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (424 samples, 7.69%)</title><rect x="889.6" y="835.0" width="90.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="892.6" y="846.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (422 samples, 7.65%)</title><rect x="890.0" y="819.0" width="90.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="893.0" y="830.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (381 samples, 6.91%)</title><rect x="890.0" y="803.0" width="81.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="893.0" y="814.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (3 samples, 0.05%)</title><rect x="890.2" y="787.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="893.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (5 samples, 0.09%)</title><rect x="890.9" y="787.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="893.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.09%)</title><rect x="890.9" y="771.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="893.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.09%)</title><rect x="890.9" y="755.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="893.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.09%)</title><rect x="890.9" y="739.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="893.9" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (5 samples, 0.09%)</title><rect x="890.9" y="723.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="893.9" y="734.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (5 samples, 0.09%)</title><rect x="890.9" y="707.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="893.9" y="718.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.07%)</title><rect x="891.1" y="691.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="894.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (371 samples, 6.73%)</title><rect x="892.0" y="787.0" width="79.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="895.0" y="798.0">java/util..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (371 samples, 6.73%)</title><rect x="892.0" y="771.0" width="79.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="895.0" y="782.0">jdk/inter..</text>
</g>
<g>
<title>JavaThreadParkedState::~JavaThreadParkedState() (3 samples, 0.05%)</title><rect x="893.9" y="755.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="896.9" y="766.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (358 samples, 6.49%)</title><rect x="894.7" y="755.0" width="76.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="897.7" y="766.0">Unsafe_P..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.05%)</title><rect x="895.2" y="739.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="898.2" y="750.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.04%)</title><rect x="895.8" y="739.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="898.8" y="750.0"></text>
</g>
<g>
<title>ThreadStatistics::monitor_wait() (2 samples, 0.04%)</title><rect x="895.8" y="723.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="898.8" y="734.0"></text>
</g>
<g>
<title>ThreadStatistics::check_and_reset_count() (2 samples, 0.04%)</title><rect x="895.8" y="707.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="898.8" y="718.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (346 samples, 6.27%)</title><rect x="896.2" y="739.0" width="74.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="899.2" y="750.0">Parker::..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (7 samples, 0.13%)</title><rect x="896.7" y="723.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="899.7" y="734.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.04%)</title><rect x="897.5" y="707.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="900.5" y="718.0"></text>
</g>
<g>
<title>__psynch_cvwait (332 samples, 6.02%)</title><rect x="898.2" y="723.0" width="71.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="901.2" y="734.0">__psynch..</text>
</g>
<g>
<title>_pthread_cond_wait (3 samples, 0.05%)</title><rect x="969.2" y="723.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="972.2" y="734.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.04%)</title><rect x="969.8" y="723.0" width="0.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="972.8" y="734.0"></text>
</g>
<g>
<title>Thread::last_handle_mark() const (2 samples, 0.04%)</title><rect x="970.5" y="739.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="973.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (9 samples, 0.16%)</title><rect x="971.5" y="803.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="974.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (9 samples, 0.16%)</title><rect x="971.5" y="787.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="974.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (9 samples, 0.16%)</title><rect x="971.5" y="771.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="974.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (7 samples, 0.13%)</title><rect x="971.8" y="755.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="974.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (7 samples, 0.13%)</title><rect x="971.8" y="739.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="974.8" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (7 samples, 0.13%)</title><rect x="971.8" y="723.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="974.8" y="734.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (7 samples, 0.13%)</title><rect x="971.8" y="707.0" width="1.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="974.8" y="718.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (7 samples, 0.13%)</title><rect x="971.8" y="691.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="974.8" y="702.0"></text>
</g>
<g>
<title>__psynch_cvwait (7 samples, 0.13%)</title><rect x="971.8" y="675.0" width="1.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="974.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (32 samples, 0.58%)</title><rect x="973.5" y="803.0" width="6.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="976.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (32 samples, 0.58%)</title><rect x="973.5" y="787.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="976.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (32 samples, 0.58%)</title><rect x="973.5" y="771.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="976.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (32 samples, 0.58%)</title><rect x="973.5" y="755.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="976.5" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (32 samples, 0.58%)</title><rect x="973.5" y="739.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="976.5" y="750.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (28 samples, 0.51%)</title><rect x="974.3" y="723.0" width="6.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="977.3" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (4 samples, 0.07%)</title><rect x="974.5" y="707.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="977.5" y="718.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll(Thread*) (2 samples, 0.04%)</title><rect x="974.8" y="691.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="977.8" y="702.0"></text>
</g>
<g>
<title>__psynch_cvsignal (21 samples, 0.38%)</title><rect x="975.4" y="707.0" width="4.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="978.4" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl$$Lambda$72/1051234503.run (228 samples, 4.13%)</title><rect x="980.5" y="835.0" width="48.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="983.5" y="846.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.lambda$executeAsync$3 (228 samples, 4.13%)</title><rect x="980.5" y="819.0" width="48.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="983.5" y="830.0">ru/m..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (151 samples, 2.74%)</title><rect x="980.7" y="803.0" width="32.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="983.7" y="814.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (150 samples, 2.72%)</title><rect x="980.7" y="787.0" width="32.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="983.7" y="798.0">on..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (5 samples, 0.09%)</title><rect x="980.7" y="771.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="983.7" y="782.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.04%)</title><rect x="981.4" y="755.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="984.4" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.04%)</title><rect x="981.4" y="739.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="984.4" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.04%)</title><rect x="981.4" y="723.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="984.4" y="734.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (145 samples, 2.63%)</title><rect x="981.8" y="771.0" width="31.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="984.8" y="782.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (145 samples, 2.63%)</title><rect x="981.8" y="755.0" width="31.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="984.8" y="766.0">on..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (145 samples, 2.63%)</title><rect x="981.8" y="739.0" width="31.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="984.8" y="750.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (143 samples, 2.59%)</title><rect x="982.2" y="723.0" width="30.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="985.2" y="734.0">on..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.05%)</title><rect x="982.2" y="707.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="985.2" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="982.2" y="691.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="985.2" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (140 samples, 2.54%)</title><rect x="982.9" y="707.0" width="29.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="985.9" y="718.0">su..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.04%)</title><rect x="982.9" y="691.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="985.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.04%)</title><rect x="982.9" y="675.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="985.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.04%)</title><rect x="982.9" y="659.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="985.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.04%)</title><rect x="982.9" y="643.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="985.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.04%)</title><rect x="982.9" y="627.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="985.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.04%)</title><rect x="982.9" y="611.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="985.9" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (138 samples, 2.50%)</title><rect x="983.3" y="691.0" width="29.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="986.3" y="702.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (138 samples, 2.50%)</title><rect x="983.3" y="675.0" width="29.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="986.3" y="686.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (138 samples, 2.50%)</title><rect x="983.3" y="659.0" width="29.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="986.3" y="670.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (2 samples, 0.04%)</title><rect x="983.3" y="643.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="986.3" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (136 samples, 2.47%)</title><rect x="983.7" y="643.0" width="29.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="986.7" y="654.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (130 samples, 2.36%)</title><rect x="985.0" y="627.0" width="27.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="988.0" y="638.0">s..</text>
</g>
<g>
<title>write (119 samples, 2.16%)</title><rect x="987.4" y="611.0" width="25.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="990.4" y="622.0">w..</text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl$$Lambda$71/1472914411.act (76 samples, 1.38%)</title><rect x="1013.1" y="803.0" width="16.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1016.1" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.lambda$entity$0 (76 samples, 1.38%)</title><rect x="1013.1" y="787.0" width="16.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1016.1" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.get (76 samples, 1.38%)</title><rect x="1013.1" y="771.0" width="16.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1016.1" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (7 samples, 0.13%)</title><rect x="1013.1" y="755.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1016.1" y="766.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (2 samples, 0.04%)</title><rect x="1013.3" y="739.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1016.3" y="750.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.04%)</title><rect x="1013.3" y="723.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1016.3" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (2 samples, 0.04%)</title><rect x="1013.7" y="739.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1016.7" y="750.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.04%)</title><rect x="1014.1" y="739.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1017.1" y="750.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.04%)</title><rect x="1014.1" y="723.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1017.1" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1014.6" y="755.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1017.6" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (67 samples, 1.21%)</title><rect x="1015.0" y="755.0" width="14.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1018.0" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (5 samples, 0.09%)</title><rect x="1015.2" y="739.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1018.2" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/2125107527.invoke (4 samples, 0.07%)</title><rect x="1015.4" y="723.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1018.4" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (4 samples, 0.07%)</title><rect x="1015.4" y="707.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1018.4" y="718.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (3 samples, 0.05%)</title><rect x="1015.6" y="691.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1018.6" y="702.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (2 samples, 0.04%)</title><rect x="1015.8" y="675.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1018.8" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (5 samples, 0.09%)</title><rect x="1016.5" y="739.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1019.5" y="750.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (5 samples, 0.09%)</title><rect x="1016.5" y="723.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1019.5" y="734.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 0.09%)</title><rect x="1016.5" y="707.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1019.5" y="718.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.05%)</title><rect x="1016.7" y="691.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1019.7" y="702.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.04%)</title><rect x="1016.9" y="675.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1019.9" y="686.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (53 samples, 0.96%)</title><rect x="1017.5" y="739.0" width="11.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1020.5" y="750.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (53 samples, 0.96%)</title><rect x="1017.5" y="723.0" width="11.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1020.5" y="734.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (52 samples, 0.94%)</title><rect x="1017.8" y="707.0" width="11.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1020.8" y="718.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (42 samples, 0.76%)</title><rect x="1019.9" y="691.0" width="9.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1022.9" y="702.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.04%)</title><rect x="1021.2" y="675.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1024.2" y="686.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.04%)</title><rect x="1022.0" y="675.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1025.0" y="686.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.07%)</title><rect x="1022.5" y="675.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1025.5" y="686.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="1022.9" y="659.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1025.9" y="670.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="1023.3" y="675.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1026.3" y="686.0"></text>
</g>
<g>
<title>operator new(unsigned long) (5 samples, 0.09%)</title><rect x="1023.8" y="675.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1026.8" y="686.0"></text>
</g>
<g>
<title>malloc (5 samples, 0.09%)</title><rect x="1023.8" y="659.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1026.8" y="670.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.07%)</title><rect x="1024.0" y="643.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1027.0" y="654.0"></text>
</g>
<g>
<title>default_zone_malloc (3 samples, 0.05%)</title><rect x="1024.2" y="627.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1027.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (19 samples, 0.34%)</title><rect x="1024.8" y="675.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1027.8" y="686.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (17 samples, 0.31%)</title><rect x="1025.2" y="659.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1028.2" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (17 samples, 0.31%)</title><rect x="1025.2" y="643.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1028.2" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (15 samples, 0.27%)</title><rect x="1025.2" y="627.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1028.2" y="638.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="1026.5" y="611.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1029.5" y="622.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (4 samples, 0.07%)</title><rect x="1027.6" y="611.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1030.6" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.convertSub (2 samples, 0.04%)</title><rect x="1028.9" y="739.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1031.9" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.array (2 samples, 0.04%)</title><rect x="1028.9" y="723.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1031.9" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.04%)</title><rect x="1028.9" y="707.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1031.9" y="718.0"></text>
</g>
<g>
<title>[worker tid=36611] (751 samples, 13.62%)</title><rect x="1029.3" y="899.0" width="160.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1032.3" y="910.0">[worker tid=36611]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (23 samples, 0.42%)</title><rect x="1029.5" y="883.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1032.5" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (21 samples, 0.38%)</title><rect x="1030.0" y="867.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1033.0" y="878.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (2 samples, 0.04%)</title><rect x="1030.0" y="851.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1033.0" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (3 samples, 0.05%)</title><rect x="1030.4" y="851.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1033.4" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (16 samples, 0.29%)</title><rect x="1031.0" y="851.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1034.0" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (10 samples, 0.18%)</title><rect x="1032.3" y="835.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1035.3" y="846.0"></text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 0.05%)</title><rect x="1034.7" y="883.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1037.7" y="894.0"></text>
</g>
<g>
<title>[unknown_Java] (4 samples, 0.07%)</title><rect x="1035.3" y="883.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1038.3" y="894.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (2 samples, 0.04%)</title><rect x="1035.7" y="867.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1038.7" y="878.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.04%)</title><rect x="1035.7" y="851.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1038.7" y="862.0"></text>
</g>
<g>
<title>java/lang/Thread.run (719 samples, 13.04%)</title><rect x="1036.2" y="883.0" width="153.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1039.2" y="894.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (719 samples, 13.04%)</title><rect x="1036.2" y="867.0" width="153.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1039.2" y="878.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (719 samples, 13.04%)</title><rect x="1036.2" y="851.0" width="153.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1039.2" y="862.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (442 samples, 8.01%)</title><rect x="1037.9" y="835.0" width="94.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1040.9" y="846.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (440 samples, 7.98%)</title><rect x="1038.1" y="819.0" width="94.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1041.1" y="830.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (401 samples, 7.27%)</title><rect x="1038.1" y="803.0" width="85.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1041.1" y="814.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (3 samples, 0.05%)</title><rect x="1038.3" y="787.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1041.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (4 samples, 0.07%)</title><rect x="1038.9" y="787.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1041.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.07%)</title><rect x="1038.9" y="771.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1041.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.07%)</title><rect x="1038.9" y="755.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1041.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.07%)</title><rect x="1038.9" y="739.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1041.9" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (4 samples, 0.07%)</title><rect x="1038.9" y="723.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1041.9" y="734.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (4 samples, 0.07%)</title><rect x="1038.9" y="707.0" width="0.9" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1041.9" y="718.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.04%)</title><rect x="1039.2" y="691.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1042.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (392 samples, 7.11%)</title><rect x="1039.8" y="787.0" width="83.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1042.8" y="798.0">java/util..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (392 samples, 7.11%)</title><rect x="1039.8" y="771.0" width="83.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1042.8" y="782.0">jdk/inter..</text>
</g>
<g>
<title>ThreadInVMfromNative::ThreadInVMfromNative(JavaThread*) (2 samples, 0.04%)</title><rect x="1042.2" y="755.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1045.2" y="766.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (378 samples, 6.85%)</title><rect x="1042.6" y="755.0" width="80.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1045.6" y="766.0">Unsafe_Pa..</text>
</g>
<g>
<title>Parker::park(bool, long) (356 samples, 6.46%)</title><rect x="1043.9" y="739.0" width="76.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1046.9" y="750.0">Parker::..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (3 samples, 0.05%)</title><rect x="1044.3" y="723.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1047.3" y="734.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.04%)</title><rect x="1044.5" y="707.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1047.5" y="718.0"></text>
</g>
<g>
<title>__psynch_cvwait (348 samples, 6.31%)</title><rect x="1044.9" y="723.0" width="74.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1047.9" y="734.0">__psynch..</text>
</g>
<g>
<title>_pthread_cond_wait (2 samples, 0.04%)</title><rect x="1119.4" y="723.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1122.4" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.05%)</title><rect x="1120.5" y="739.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1123.5" y="750.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.05%)</title><rect x="1120.5" y="723.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1123.5" y="734.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.04%)</title><rect x="1120.7" y="707.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1123.7" y="718.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="1120.7" y="691.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1123.7" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (4 samples, 0.07%)</title><rect x="1121.1" y="739.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1124.1" y="750.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.04%)</title><rect x="1121.1" y="723.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1124.1" y="734.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="1121.1" y="707.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1124.1" y="718.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.04%)</title><rect x="1122.4" y="739.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1125.4" y="750.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (3 samples, 0.05%)</title><rect x="1122.8" y="739.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1125.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (20 samples, 0.36%)</title><rect x="1123.9" y="803.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1126.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (20 samples, 0.36%)</title><rect x="1123.9" y="787.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1126.9" y="798.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.04%)</title><rect x="1123.9" y="771.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1126.9" y="782.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.04%)</title><rect x="1123.9" y="755.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1126.9" y="766.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (2 samples, 0.04%)</title><rect x="1123.9" y="739.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1126.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (18 samples, 0.33%)</title><rect x="1124.3" y="771.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1127.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (12 samples, 0.22%)</title><rect x="1125.0" y="755.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1128.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (11 samples, 0.20%)</title><rect x="1125.2" y="739.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1128.2" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (11 samples, 0.20%)</title><rect x="1125.2" y="723.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1128.2" y="734.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (11 samples, 0.20%)</title><rect x="1125.2" y="707.0" width="2.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1128.2" y="718.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (11 samples, 0.20%)</title><rect x="1125.2" y="691.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1128.2" y="702.0"></text>
</g>
<g>
<title>__psynch_cvwait (11 samples, 0.20%)</title><rect x="1125.2" y="675.0" width="2.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1128.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (3 samples, 0.05%)</title><rect x="1127.5" y="755.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1130.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (19 samples, 0.34%)</title><rect x="1128.2" y="803.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1131.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (19 samples, 0.34%)</title><rect x="1128.2" y="787.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1131.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (19 samples, 0.34%)</title><rect x="1128.2" y="771.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1131.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (19 samples, 0.34%)</title><rect x="1128.2" y="755.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1131.2" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (19 samples, 0.34%)</title><rect x="1128.2" y="739.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1131.2" y="750.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (17 samples, 0.31%)</title><rect x="1128.6" y="723.0" width="3.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1131.6" y="734.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.04%)</title><rect x="1129.0" y="707.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1132.0" y="718.0"></text>
</g>
<g>
<title>__psynch_cvsignal (13 samples, 0.24%)</title><rect x="1129.4" y="707.0" width="2.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1132.4" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl$$Lambda$72/1051234503.run (269 samples, 4.88%)</title><rect x="1132.4" y="835.0" width="57.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1135.4" y="846.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.lambda$executeAsync$3 (269 samples, 4.88%)</title><rect x="1132.4" y="819.0" width="57.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1135.4" y="830.0">ru/mai..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (209 samples, 3.79%)</title><rect x="1132.7" y="803.0" width="44.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1135.7" y="814.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (206 samples, 3.74%)</title><rect x="1132.7" y="787.0" width="44.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1135.7" y="798.0">one/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6 samples, 0.11%)</title><rect x="1132.7" y="771.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1135.7" y="782.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (4 samples, 0.07%)</title><rect x="1133.1" y="755.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1136.1" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (4 samples, 0.07%)</title><rect x="1133.1" y="739.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1136.1" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.07%)</title><rect x="1133.1" y="723.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1136.1" y="734.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (200 samples, 3.63%)</title><rect x="1133.9" y="771.0" width="42.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1136.9" y="782.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session.write (200 samples, 3.63%)</title><rect x="1133.9" y="755.0" width="42.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1136.9" y="766.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (200 samples, 3.63%)</title><rect x="1133.9" y="739.0" width="42.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1136.9" y="750.0">one/..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.04%)</title><rect x="1134.2" y="723.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1137.2" y="734.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (197 samples, 3.57%)</title><rect x="1134.6" y="723.0" width="42.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1137.6" y="734.0">one/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.09%)</title><rect x="1134.6" y="707.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1137.6" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.09%)</title><rect x="1134.6" y="691.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1137.6" y="702.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.04%)</title><rect x="1134.6" y="675.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1137.6" y="686.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.04%)</title><rect x="1135.2" y="675.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.2" y="686.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.04%)</title><rect x="1135.2" y="659.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1138.2" y="670.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.04%)</title><rect x="1135.2" y="643.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1138.2" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (192 samples, 3.48%)</title><rect x="1135.7" y="707.0" width="41.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1138.7" y="718.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (192 samples, 3.48%)</title><rect x="1135.7" y="691.0" width="41.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1138.7" y="702.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (192 samples, 3.48%)</title><rect x="1135.7" y="675.0" width="41.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1138.7" y="686.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (192 samples, 3.48%)</title><rect x="1135.7" y="659.0" width="41.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1138.7" y="670.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (4 samples, 0.07%)</title><rect x="1135.7" y="643.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1138.7" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (188 samples, 3.41%)</title><rect x="1136.5" y="643.0" width="40.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1139.5" y="654.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (186 samples, 3.37%)</title><rect x="1136.9" y="627.0" width="39.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1139.9" y="638.0">sun..</text>
</g>
<g>
<title>write (180 samples, 3.26%)</title><rect x="1138.2" y="611.0" width="38.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1141.2" y="622.0">write</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.05%)</title><rect x="1176.7" y="787.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1179.7" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.05%)</title><rect x="1176.7" y="771.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1179.7" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.04%)</title><rect x="1176.9" y="755.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1179.9" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl$$Lambda$71/1472914411.act (59 samples, 1.07%)</title><rect x="1177.4" y="803.0" width="12.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1180.4" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.lambda$entity$0 (59 samples, 1.07%)</title><rect x="1177.4" y="787.0" width="12.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1180.4" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/yaroslav/ServiceImpl.get (59 samples, 1.07%)</title><rect x="1177.4" y="771.0" width="12.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1180.4" y="782.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (2 samples, 0.04%)</title><rect x="1177.6" y="755.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.6" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (7 samples, 0.13%)</title><rect x="1178.0" y="755.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.0" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (4 samples, 0.07%)</title><rect x="1178.4" y="739.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.4" y="750.0"></text>
</g>
<g>
<title>CompiledMethod::handler_for_exception_and_pc(Handle, unsigned char*) (2 samples, 0.04%)</title><rect x="1178.9" y="723.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.9" y="734.0"></text>
</g>
<g>
<title>ExceptionCache::match(Handle, unsigned char*) (2 samples, 0.04%)</title><rect x="1178.9" y="707.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.9" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (47 samples, 0.85%)</title><rect x="1179.9" y="755.0" width="10.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1182.9" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (5 samples, 0.09%)</title><rect x="1180.2" y="739.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1183.2" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/2125107527.invoke (5 samples, 0.09%)</title><rect x="1180.2" y="723.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1183.2" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (4 samples, 0.07%)</title><rect x="1180.2" y="707.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1183.2" y="718.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (2 samples, 0.04%)</title><rect x="1180.4" y="691.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1183.4" y="702.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="1180.4" y="675.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1183.4" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (2 samples, 0.04%)</title><rect x="1181.2" y="739.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1184.2" y="750.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (2 samples, 0.04%)</title><rect x="1181.2" y="723.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1184.2" y="734.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (35 samples, 0.63%)</title><rect x="1181.7" y="739.0" width="7.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1184.7" y="750.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (35 samples, 0.63%)</title><rect x="1181.7" y="723.0" width="7.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1184.7" y="734.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (34 samples, 0.62%)</title><rect x="1181.9" y="707.0" width="7.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1184.9" y="718.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.04%)</title><rect x="1182.5" y="691.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1185.5" y="702.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (29 samples, 0.53%)</title><rect x="1182.9" y="691.0" width="6.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.9" y="702.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.07%)</title><rect x="1183.4" y="675.0" width="0.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1186.4" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.04%)</title><rect x="1183.6" y="659.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.6" y="670.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.04%)</title><rect x="1183.6" y="643.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.6" y="654.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.04%)</title><rect x="1183.6" y="627.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.6" y="638.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="1183.6" y="611.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.6" y="622.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.04%)</title><rect x="1183.6" y="595.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.6" y="606.0"></text>
</g>
<g>
<title>operator new(unsigned long) (5 samples, 0.09%)</title><rect x="1184.4" y="675.0" width="1.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1187.4" y="686.0"></text>
</g>
<g>
<title>malloc (5 samples, 0.09%)</title><rect x="1184.4" y="659.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1187.4" y="670.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.05%)</title><rect x="1184.4" y="643.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1187.4" y="654.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="1184.7" y="627.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1187.7" y="638.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="1184.7" y="611.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1187.7" y="622.0"></text>
</g>
<g>
<title>szone_malloc (2 samples, 0.04%)</title><rect x="1185.1" y="643.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1188.1" y="654.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (16 samples, 0.29%)</title><rect x="1185.5" y="675.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.5" y="686.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (16 samples, 0.29%)</title><rect x="1185.5" y="659.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.5" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (16 samples, 0.29%)</title><rect x="1185.5" y="643.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.5" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (14 samples, 0.25%)</title><rect x="1185.5" y="627.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.5" y="638.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (3 samples, 0.05%)</title><rect x="1186.6" y="611.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.6" y="622.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (4 samples, 0.07%)</title><rect x="1187.4" y="611.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.4" y="622.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*) (2 samples, 0.04%)</title><rect x="1187.4" y="595.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.4" y="606.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="1187.4" y="579.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1190.4" y="590.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (2 samples, 0.04%)</title><rect x="1187.9" y="595.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.9" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.convertSub (3 samples, 0.05%)</title><rect x="1189.1" y="739.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1192.1" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.array (2 samples, 0.04%)</title><rect x="1189.4" y="723.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1192.4" y="734.0"></text>
</g>
</g>
</svg>
