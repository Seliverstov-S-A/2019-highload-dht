<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="725"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="725"> </text>
<g id="frames">
<g>
<title>all (5,424 samples, 100.00%)</title><rect x="10.0" y="691.0" width="1180.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="13.0" y="702.0">all</text>
</g>
<g>
<title>[NIO Selector #0 tid=23811] (332 samples, 6.12%)</title><rect x="10.0" y="675.0" width="72.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="13.0" y="686.0">[NIO Sel..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (331 samples, 6.10%)</title><rect x="10.2" y="659.0" width="72.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.2" y="670.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (197 samples, 3.63%)</title><rect x="11.5" y="643.0" width="42.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.5" y="654.0">one/..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (3 samples, 0.06%)</title><rect x="12.0" y="627.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="15.0" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (192 samples, 3.54%)</title><rect x="12.6" y="627.0" width="41.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.6" y="638.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (192 samples, 3.54%)</title><rect x="12.6" y="611.0" width="41.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="15.6" y="622.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (192 samples, 3.54%)</title><rect x="12.6" y="595.0" width="41.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="15.6" y="606.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (180 samples, 3.32%)</title><rect x="12.6" y="579.0" width="39.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.6" y="590.0">sun..</text>
</g>
<g>
<title>kevent (168 samples, 3.10%)</title><rect x="15.2" y="563.0" width="36.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="18.2" y="574.0">kev..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (4 samples, 0.07%)</title><rect x="51.8" y="579.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="54.8" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.06%)</title><rect x="52.0" y="563.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="55.0" y="574.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.04%)</title><rect x="52.0" y="547.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="55.0" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.04%)</title><rect x="52.0" y="531.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="55.0" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.04%)</title><rect x="52.0" y="515.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="55.0" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (5 samples, 0.09%)</title><rect x="52.9" y="579.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="55.9" y="590.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (5 samples, 0.09%)</title><rect x="52.9" y="563.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="55.9" y="574.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (4 samples, 0.07%)</title><rect x="53.1" y="547.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="56.1" y="558.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (4 samples, 0.07%)</title><rect x="53.1" y="531.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="56.1" y="542.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (4 samples, 0.07%)</title><rect x="53.1" y="515.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="56.1" y="526.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (128 samples, 2.36%)</title><rect x="54.4" y="643.0" width="27.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="57.4" y="654.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (128 samples, 2.36%)</title><rect x="54.4" y="627.0" width="27.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="57.4" y="638.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (71 samples, 1.31%)</title><rect x="54.4" y="611.0" width="15.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="57.4" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (49 samples, 0.90%)</title><rect x="54.4" y="595.0" width="10.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="57.4" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (49 samples, 0.90%)</title><rect x="54.4" y="579.0" width="10.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="57.4" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.handleDefault (48 samples, 0.88%)</title><rect x="54.6" y="563.0" width="10.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="57.6" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.entity (48 samples, 0.88%)</title><rect x="54.6" y="547.0" width="10.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="57.6" y="558.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.06%)</title><rect x="54.8" y="531.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="57.8" y="542.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.04%)</title><rect x="55.0" y="515.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="58.0" y="526.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.04%)</title><rect x="55.0" y="499.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="58.0" y="510.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.04%)</title><rect x="55.0" y="483.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="58.0" y="494.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.04%)</title><rect x="55.0" y="467.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="58.0" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.executeAsync (44 samples, 0.81%)</title><rect x="55.5" y="531.0" width="9.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="58.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (44 samples, 0.81%)</title><rect x="55.5" y="515.0" width="9.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="58.5" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (44 samples, 0.81%)</title><rect x="55.5" y="499.0" width="9.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="58.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (40 samples, 0.74%)</title><rect x="55.7" y="483.0" width="8.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="58.7" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (39 samples, 0.72%)</title><rect x="55.9" y="467.0" width="8.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.9" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (39 samples, 0.72%)</title><rect x="55.9" y="451.0" width="8.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="58.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (39 samples, 0.72%)</title><rect x="55.9" y="435.0" width="8.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="58.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (39 samples, 0.72%)</title><rect x="55.9" y="419.0" width="8.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="58.9" y="430.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (39 samples, 0.72%)</title><rect x="55.9" y="403.0" width="8.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="58.9" y="414.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (36 samples, 0.66%)</title><rect x="56.3" y="387.0" width="7.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="59.3" y="398.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (2 samples, 0.04%)</title><rect x="57.2" y="371.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="60.2" y="382.0"></text>
</g>
<g>
<title>__psynch_cvsignal (30 samples, 0.55%)</title><rect x="57.6" y="371.0" width="6.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="60.6" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.06%)</title><rect x="64.4" y="483.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="67.4" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.06%)</title><rect x="64.4" y="467.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="67.4" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (6 samples, 0.11%)</title><rect x="65.0" y="595.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="68.0" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.04%)</title><rect x="65.0" y="579.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="68.0" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.07%)</title><rect x="65.5" y="579.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="68.5" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.07%)</title><rect x="65.5" y="563.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="68.5" y="574.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (2 samples, 0.04%)</title><rect x="66.3" y="595.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="69.3" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (11 samples, 0.20%)</title><rect x="66.8" y="595.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="69.8" y="606.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.11%)</title><rect x="67.2" y="579.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="70.2" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.07%)</title><rect x="67.7" y="563.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="70.7" y="574.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.06%)</title><rect x="68.5" y="579.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="71.5" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.06%)</title><rect x="68.5" y="563.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="71.5" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.06%)</title><rect x="69.2" y="595.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="72.2" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (57 samples, 1.05%)</title><rect x="69.8" y="611.0" width="12.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="72.8" y="622.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (57 samples, 1.05%)</title><rect x="69.8" y="595.0" width="12.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="72.8" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (57 samples, 1.05%)</title><rect x="69.8" y="579.0" width="12.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="72.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (13 samples, 0.24%)</title><rect x="69.8" y="563.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="72.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (13 samples, 0.24%)</title><rect x="69.8" y="547.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="72.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (12 samples, 0.22%)</title><rect x="69.8" y="531.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="72.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (12 samples, 0.22%)</title><rect x="69.8" y="515.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="72.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (12 samples, 0.22%)</title><rect x="69.8" y="499.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="72.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (12 samples, 0.22%)</title><rect x="69.8" y="483.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="72.8" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2 samples, 0.04%)</title><rect x="71.6" y="467.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="74.6" y="478.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.04%)</title><rect x="72.0" y="467.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="75.0" y="478.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.04%)</title><rect x="72.0" y="451.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="75.0" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (44 samples, 0.81%)</title><rect x="72.7" y="563.0" width="9.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="75.7" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (44 samples, 0.81%)</title><rect x="72.7" y="547.0" width="9.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="75.7" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (3 samples, 0.06%)</title><rect x="72.7" y="531.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="75.7" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3 samples, 0.06%)</title><rect x="72.7" y="515.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="75.7" y="526.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.06%)</title><rect x="72.7" y="499.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="75.7" y="510.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (3 samples, 0.06%)</title><rect x="72.7" y="483.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="75.7" y="494.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (3 samples, 0.06%)</title><rect x="72.7" y="467.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="75.7" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (2 samples, 0.04%)</title><rect x="72.9" y="451.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="75.9" y="462.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (2 samples, 0.04%)</title><rect x="72.9" y="435.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="75.9" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (41 samples, 0.76%)</title><rect x="73.3" y="531.0" width="8.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="76.3" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (41 samples, 0.76%)</title><rect x="73.3" y="515.0" width="8.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="76.3" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (41 samples, 0.76%)</title><rect x="73.3" y="499.0" width="8.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="76.3" y="510.0"></text>
</g>
<g>
<title>read (37 samples, 0.68%)</title><rect x="74.2" y="483.0" width="8.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="77.2" y="494.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=24323] (340 samples, 6.27%)</title><rect x="82.2" y="675.0" width="74.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="85.2" y="686.0">[NIO Sel..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (337 samples, 6.21%)</title><rect x="82.7" y="659.0" width="73.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="85.7" y="670.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (197 samples, 3.63%)</title><rect x="83.3" y="643.0" width="42.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="86.3" y="654.0">one/..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (4 samples, 0.07%)</title><rect x="83.3" y="627.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="86.3" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.04%)</title><rect x="83.5" y="611.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="86.5" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.04%)</title><rect x="83.5" y="595.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="86.5" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (191 samples, 3.52%)</title><rect x="84.6" y="627.0" width="41.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="87.6" y="638.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (191 samples, 3.52%)</title><rect x="84.6" y="611.0" width="41.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="87.6" y="622.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (191 samples, 3.52%)</title><rect x="84.6" y="595.0" width="41.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="87.6" y="606.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (182 samples, 3.36%)</title><rect x="84.6" y="579.0" width="39.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="87.6" y="590.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (3 samples, 0.06%)</title><rect x="85.5" y="563.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="88.5" y="574.0"></text>
</g>
<g>
<title>kevent (175 samples, 3.23%)</title><rect x="86.1" y="563.0" width="38.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="89.1" y="574.0">kev..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 0.06%)</title><rect x="124.2" y="579.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="127.2" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.04%)</title><rect x="124.4" y="563.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="127.4" y="574.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.04%)</title><rect x="124.4" y="547.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="127.4" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.04%)</title><rect x="124.4" y="531.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="127.4" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.04%)</title><rect x="124.4" y="515.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="127.4" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (3 samples, 0.06%)</title><rect x="125.1" y="579.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="128.1" y="590.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (3 samples, 0.06%)</title><rect x="125.1" y="563.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="128.1" y="574.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.04%)</title><rect x="125.1" y="547.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="128.1" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.04%)</title><rect x="125.7" y="579.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="128.7" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.remove (2 samples, 0.04%)</title><rect x="125.7" y="563.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="128.7" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.04%)</title><rect x="125.7" y="547.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="128.7" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (137 samples, 2.53%)</title><rect x="126.2" y="643.0" width="29.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="129.2" y="654.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (135 samples, 2.49%)</title><rect x="126.4" y="627.0" width="29.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="129.4" y="638.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (87 samples, 1.60%)</title><rect x="126.4" y="611.0" width="18.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="129.4" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (76 samples, 1.40%)</title><rect x="126.6" y="595.0" width="16.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="129.6" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (76 samples, 1.40%)</title><rect x="126.6" y="579.0" width="16.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="129.6" y="590.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (4 samples, 0.07%)</title><rect x="127.3" y="563.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="130.3" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.07%)</title><rect x="127.3" y="547.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="130.3" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.07%)</title><rect x="127.3" y="531.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="130.3" y="542.0"></text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 0.04%)</title><rect x="127.7" y="515.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="130.7" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.handleDefault (68 samples, 1.25%)</title><rect x="128.3" y="563.0" width="14.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="131.3" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.entity (67 samples, 1.24%)</title><rect x="128.6" y="547.0" width="14.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="131.6" y="558.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.06%)</title><rect x="128.6" y="531.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="131.6" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.executeAsync (64 samples, 1.18%)</title><rect x="129.2" y="531.0" width="13.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="132.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (64 samples, 1.18%)</title><rect x="129.2" y="515.0" width="13.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="132.2" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (64 samples, 1.18%)</title><rect x="129.2" y="499.0" width="13.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="132.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (60 samples, 1.11%)</title><rect x="129.2" y="483.0" width="13.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="132.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (60 samples, 1.11%)</title><rect x="129.2" y="467.0" width="13.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="132.2" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (60 samples, 1.11%)</title><rect x="129.2" y="451.0" width="13.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="132.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (60 samples, 1.11%)</title><rect x="129.2" y="435.0" width="13.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="132.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (59 samples, 1.09%)</title><rect x="129.4" y="419.0" width="12.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="132.4" y="430.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (59 samples, 1.09%)</title><rect x="129.4" y="403.0" width="12.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="132.4" y="414.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (54 samples, 1.00%)</title><rect x="130.1" y="387.0" width="11.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="133.1" y="398.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.04%)</title><rect x="130.1" y="371.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="133.1" y="382.0"></text>
</g>
<g>
<title>Chunk::next() const (2 samples, 0.04%)</title><rect x="130.1" y="355.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="133.1" y="366.0"></text>
</g>
<g>
<title>Thread::current() (2 samples, 0.04%)</title><rect x="130.7" y="371.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="133.7" y="382.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.04%)</title><rect x="131.2" y="371.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="134.2" y="382.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.04%)</title><rect x="131.2" y="355.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="134.2" y="366.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.04%)</title><rect x="131.8" y="371.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="134.8" y="382.0"></text>
</g>
<g>
<title>__psynch_cvsignal (40 samples, 0.74%)</title><rect x="132.3" y="371.0" width="8.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="135.3" y="382.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (2 samples, 0.04%)</title><rect x="141.0" y="371.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="144.0" y="382.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.04%)</title><rect x="141.4" y="371.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="144.4" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.07%)</title><rect x="142.3" y="483.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="145.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.07%)</title><rect x="142.3" y="467.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="145.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.06%)</title><rect x="142.3" y="451.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="145.3" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.04%)</title><rect x="142.5" y="435.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="145.5" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.04%)</title><rect x="142.5" y="419.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="145.5" y="430.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.04%)</title><rect x="142.5" y="403.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="145.5" y="414.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.04%)</title><rect x="142.5" y="387.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="145.5" y="398.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.04%)</title><rect x="142.5" y="371.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="145.5" y="382.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.04%)</title><rect x="142.5" y="355.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="145.5" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.07%)</title><rect x="143.8" y="595.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="146.8" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.06%)</title><rect x="144.7" y="595.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="147.7" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="144.9" y="579.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="147.9" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (48 samples, 0.88%)</title><rect x="145.3" y="611.0" width="10.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="148.3" y="622.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (48 samples, 0.88%)</title><rect x="145.3" y="595.0" width="10.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="148.3" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (47 samples, 0.87%)</title><rect x="145.5" y="579.0" width="10.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="148.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.15%)</title><rect x="145.5" y="563.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="148.5" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (8 samples, 0.15%)</title><rect x="145.5" y="547.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="148.5" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (5 samples, 0.09%)</title><rect x="145.5" y="531.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="148.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.09%)</title><rect x="145.5" y="515.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="148.5" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.09%)</title><rect x="145.5" y="499.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="148.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (5 samples, 0.09%)</title><rect x="145.5" y="483.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="148.5" y="494.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.04%)</title><rect x="145.8" y="467.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="148.8" y="478.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.04%)</title><rect x="145.8" y="451.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="148.8" y="462.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.04%)</title><rect x="145.8" y="435.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="148.8" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (2 samples, 0.04%)</title><rect x="146.2" y="467.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="149.2" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.06%)</title><rect x="146.6" y="531.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="149.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.04%)</title><rect x="146.8" y="515.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="149.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.04%)</title><rect x="146.8" y="499.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="149.8" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.04%)</title><rect x="146.8" y="483.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="149.8" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.04%)</title><rect x="146.8" y="467.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="149.8" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (39 samples, 0.72%)</title><rect x="147.3" y="563.0" width="8.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="150.3" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (39 samples, 0.72%)</title><rect x="147.3" y="547.0" width="8.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="150.3" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (38 samples, 0.70%)</title><rect x="147.5" y="531.0" width="8.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="150.5" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (38 samples, 0.70%)</title><rect x="147.5" y="515.0" width="8.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="150.5" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (38 samples, 0.70%)</title><rect x="147.5" y="499.0" width="8.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="150.5" y="510.0"></text>
</g>
<g>
<title>read (31 samples, 0.57%)</title><rect x="149.0" y="483.0" width="6.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="152.0" y="494.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=24835] (303 samples, 5.59%)</title><rect x="156.2" y="675.0" width="65.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="159.2" y="686.0">[NIO Se..</text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.04%)</title><rect x="156.6" y="659.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="159.6" y="670.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (299 samples, 5.51%)</title><rect x="157.1" y="659.0" width="65.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="160.1" y="670.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (190 samples, 3.50%)</title><rect x="157.5" y="643.0" width="41.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="160.5" y="654.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.04%)</title><rect x="157.7" y="627.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="160.7" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (2 samples, 0.04%)</title><rect x="158.2" y="627.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="161.2" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (185 samples, 3.41%)</title><rect x="158.6" y="627.0" width="40.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="161.6" y="638.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (185 samples, 3.41%)</title><rect x="158.6" y="611.0" width="40.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="161.6" y="622.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (184 samples, 3.39%)</title><rect x="158.8" y="595.0" width="40.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="161.8" y="606.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (177 samples, 3.26%)</title><rect x="158.8" y="579.0" width="38.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="161.8" y="590.0">sun..</text>
</g>
<g>
<title>kevent (170 samples, 3.13%)</title><rect x="160.3" y="563.0" width="37.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="163.3" y="574.0">kev..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 0.06%)</title><rect x="197.3" y="579.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="200.3" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (3 samples, 0.06%)</title><rect x="198.0" y="579.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="201.0" y="590.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (3 samples, 0.06%)</title><rect x="198.0" y="563.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="201.0" y="574.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.06%)</title><rect x="198.0" y="547.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="201.0" y="558.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.06%)</title><rect x="198.0" y="531.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="201.0" y="542.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (3 samples, 0.06%)</title><rect x="198.0" y="515.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="201.0" y="526.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (107 samples, 1.97%)</title><rect x="198.8" y="643.0" width="23.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="201.8" y="654.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (107 samples, 1.97%)</title><rect x="198.8" y="627.0" width="23.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="201.8" y="638.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (69 samples, 1.27%)</title><rect x="198.8" y="611.0" width="15.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="201.8" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (55 samples, 1.01%)</title><rect x="199.3" y="595.0" width="11.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="202.3" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (55 samples, 1.01%)</title><rect x="199.3" y="579.0" width="11.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="202.3" y="590.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.04%)</title><rect x="199.5" y="563.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="202.5" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.handleDefault (52 samples, 0.96%)</title><rect x="199.9" y="563.0" width="11.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="202.9" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.entity (51 samples, 0.94%)</title><rect x="200.1" y="547.0" width="11.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="203.1" y="558.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.06%)</title><rect x="200.6" y="531.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="203.6" y="542.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.04%)</title><rect x="200.8" y="515.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="203.8" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.executeAsync (46 samples, 0.85%)</title><rect x="201.2" y="531.0" width="10.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="204.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (46 samples, 0.85%)</title><rect x="201.2" y="515.0" width="10.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="204.2" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (45 samples, 0.83%)</title><rect x="201.2" y="499.0" width="9.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="204.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (44 samples, 0.81%)</title><rect x="201.2" y="483.0" width="9.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="204.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (44 samples, 0.81%)</title><rect x="201.2" y="467.0" width="9.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="204.2" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (44 samples, 0.81%)</title><rect x="201.2" y="451.0" width="9.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="204.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (44 samples, 0.81%)</title><rect x="201.2" y="435.0" width="9.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="204.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (43 samples, 0.79%)</title><rect x="201.4" y="419.0" width="9.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="204.4" y="430.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (43 samples, 0.79%)</title><rect x="201.4" y="403.0" width="9.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="204.4" y="414.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (40 samples, 0.74%)</title><rect x="201.9" y="387.0" width="8.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="204.9" y="398.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.06%)</title><rect x="202.3" y="371.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="205.3" y="382.0"></text>
</g>
<g>
<title>__psynch_cvsignal (32 samples, 0.59%)</title><rect x="203.0" y="371.0" width="6.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="206.0" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (5 samples, 0.09%)</title><rect x="211.2" y="595.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="214.2" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.06%)</title><rect x="211.2" y="579.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="214.2" y="590.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.06%)</title><rect x="211.2" y="563.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="214.2" y="574.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.06%)</title><rect x="211.2" y="547.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="214.2" y="558.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="211.9" y="579.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="214.9" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.07%)</title><rect x="212.3" y="595.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="215.3" y="606.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.07%)</title><rect x="212.3" y="579.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="215.3" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.07%)</title><rect x="212.3" y="563.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="215.3" y="574.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.06%)</title><rect x="212.3" y="547.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="215.3" y="558.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.06%)</title><rect x="212.3" y="531.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="215.3" y="542.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (2 samples, 0.04%)</title><rect x="212.5" y="515.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="215.5" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.06%)</title><rect x="213.2" y="595.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="216.2" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="213.4" y="579.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="216.4" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (38 samples, 0.70%)</title><rect x="213.8" y="611.0" width="8.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="216.8" y="622.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (38 samples, 0.70%)</title><rect x="213.8" y="595.0" width="8.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="216.8" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (38 samples, 0.70%)</title><rect x="213.8" y="579.0" width="8.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="216.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.15%)</title><rect x="213.8" y="563.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="216.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (8 samples, 0.15%)</title><rect x="213.8" y="547.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="216.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (5 samples, 0.09%)</title><rect x="213.8" y="531.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="216.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.09%)</title><rect x="213.8" y="515.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="216.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.09%)</title><rect x="213.8" y="499.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="216.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (5 samples, 0.09%)</title><rect x="213.8" y="483.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="216.8" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.04%)</title><rect x="215.2" y="531.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="218.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.04%)</title><rect x="215.2" y="515.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="218.2" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.04%)</title><rect x="215.2" y="499.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="218.2" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.04%)</title><rect x="215.2" y="483.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="218.2" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.04%)</title><rect x="215.2" y="467.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="218.2" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (30 samples, 0.55%)</title><rect x="215.6" y="563.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="218.6" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (30 samples, 0.55%)</title><rect x="215.6" y="547.0" width="6.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="218.6" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.04%)</title><rect x="215.6" y="531.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="218.6" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.04%)</title><rect x="215.6" y="515.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="218.6" y="526.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.04%)</title><rect x="215.6" y="499.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="218.6" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (28 samples, 0.52%)</title><rect x="216.0" y="531.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="219.0" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (28 samples, 0.52%)</title><rect x="216.0" y="515.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="219.0" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (28 samples, 0.52%)</title><rect x="216.0" y="499.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="219.0" y="510.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.04%)</title><rect x="216.5" y="483.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="219.5" y="494.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.04%)</title><rect x="216.5" y="467.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="219.5" y="478.0"></text>
</g>
<g>
<title>read (23 samples, 0.42%)</title><rect x="217.1" y="483.0" width="5.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="220.1" y="494.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=25603] (279 samples, 5.14%)</title><rect x="222.1" y="675.0" width="60.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="225.1" y="686.0">[NIO S..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (277 samples, 5.11%)</title><rect x="222.5" y="659.0" width="60.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="225.5" y="670.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (177 samples, 3.26%)</title><rect x="223.0" y="643.0" width="38.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="226.0" y="654.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (4 samples, 0.07%)</title><rect x="223.4" y="627.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="226.4" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (2 samples, 0.04%)</title><rect x="224.3" y="627.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="227.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (2 samples, 0.04%)</title><rect x="224.3" y="611.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="227.3" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (168 samples, 3.10%)</title><rect x="224.7" y="627.0" width="36.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="227.7" y="638.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (168 samples, 3.10%)</title><rect x="224.7" y="611.0" width="36.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="227.7" y="622.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (167 samples, 3.08%)</title><rect x="224.9" y="595.0" width="36.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="227.9" y="606.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (159 samples, 2.93%)</title><rect x="224.9" y="579.0" width="34.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="227.9" y="590.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (2 samples, 0.04%)</title><rect x="226.9" y="563.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="229.9" y="574.0"></text>
</g>
<g>
<title>kevent (148 samples, 2.73%)</title><rect x="227.3" y="563.0" width="32.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="230.3" y="574.0">ke..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 0.06%)</title><rect x="259.5" y="579.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="262.5" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.06%)</title><rect x="259.5" y="563.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="262.5" y="574.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.06%)</title><rect x="259.5" y="547.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="262.5" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.06%)</title><rect x="259.5" y="531.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="262.5" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.06%)</title><rect x="259.5" y="515.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="262.5" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (2 samples, 0.04%)</title><rect x="260.2" y="579.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="263.2" y="590.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (2 samples, 0.04%)</title><rect x="260.2" y="563.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="263.2" y="574.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.04%)</title><rect x="260.2" y="547.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="263.2" y="558.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.04%)</title><rect x="260.2" y="531.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="263.2" y="542.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.04%)</title><rect x="260.2" y="515.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="263.2" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (2 samples, 0.04%)</title><rect x="260.6" y="579.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="263.6" y="590.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (2 samples, 0.04%)</title><rect x="260.6" y="563.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="263.6" y="574.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.04%)</title><rect x="260.6" y="547.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="263.6" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (98 samples, 1.81%)</title><rect x="261.5" y="643.0" width="21.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="264.5" y="654.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (98 samples, 1.81%)</title><rect x="261.5" y="627.0" width="21.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="264.5" y="638.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (61 samples, 1.12%)</title><rect x="261.5" y="611.0" width="13.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="264.5" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (45 samples, 0.83%)</title><rect x="261.9" y="595.0" width="9.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="264.9" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (44 samples, 0.81%)</title><rect x="262.1" y="579.0" width="9.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="265.1" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.handleDefault (44 samples, 0.81%)</title><rect x="262.1" y="563.0" width="9.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="265.1" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.entity (44 samples, 0.81%)</title><rect x="262.1" y="547.0" width="9.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="265.1" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.executeAsync (43 samples, 0.79%)</title><rect x="262.4" y="531.0" width="9.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="265.4" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (43 samples, 0.79%)</title><rect x="262.4" y="515.0" width="9.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="265.4" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (43 samples, 0.79%)</title><rect x="262.4" y="499.0" width="9.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="265.4" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.enqueue (2 samples, 0.04%)</title><rect x="262.4" y="483.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="265.4" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (41 samples, 0.76%)</title><rect x="262.8" y="483.0" width="8.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="265.8" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (41 samples, 0.76%)</title><rect x="262.8" y="467.0" width="8.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="265.8" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (41 samples, 0.76%)</title><rect x="262.8" y="451.0" width="8.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="265.8" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (41 samples, 0.76%)</title><rect x="262.8" y="435.0" width="8.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="265.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (41 samples, 0.76%)</title><rect x="262.8" y="419.0" width="8.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="265.8" y="430.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (41 samples, 0.76%)</title><rect x="262.8" y="403.0" width="8.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="265.8" y="414.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (40 samples, 0.74%)</title><rect x="263.0" y="387.0" width="8.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="266.0" y="398.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.04%)</title><rect x="263.4" y="371.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="266.4" y="382.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (2 samples, 0.04%)</title><rect x="263.4" y="355.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="266.4" y="366.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (2 samples, 0.04%)</title><rect x="263.4" y="339.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="266.4" y="350.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (2 samples, 0.04%)</title><rect x="263.4" y="323.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="266.4" y="334.0"></text>
</g>
<g>
<title>__psynch_cvsignal (35 samples, 0.65%)</title><rect x="264.1" y="371.0" width="7.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="267.1" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (4 samples, 0.07%)</title><rect x="271.7" y="595.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="274.7" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.04%)</title><rect x="271.7" y="579.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="274.7" y="590.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.04%)</title><rect x="271.7" y="563.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="274.7" y="574.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.04%)</title><rect x="271.7" y="547.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="274.7" y="558.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="272.1" y="579.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="275.1" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="272.1" y="563.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="275.1" y="574.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (2 samples, 0.04%)</title><rect x="272.6" y="595.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="275.6" y="606.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.04%)</title><rect x="272.6" y="579.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="275.6" y="590.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.04%)</title><rect x="272.6" y="563.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="275.6" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.09%)</title><rect x="273.2" y="595.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="276.2" y="606.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.09%)</title><rect x="273.2" y="579.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="276.2" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.07%)</title><rect x="273.5" y="563.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="276.5" y="574.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.04%)</title><rect x="273.7" y="547.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="276.7" y="558.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.04%)</title><rect x="273.7" y="531.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="276.7" y="542.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (2 samples, 0.04%)</title><rect x="273.7" y="515.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="276.7" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="274.3" y="595.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="277.3" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (37 samples, 0.68%)</title><rect x="274.8" y="611.0" width="8.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="277.8" y="622.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (37 samples, 0.68%)</title><rect x="274.8" y="595.0" width="8.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="277.8" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.04%)</title><rect x="274.8" y="579.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="277.8" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="274.8" y="563.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="277.8" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="274.8" y="547.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="277.8" y="558.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="274.8" y="531.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="277.8" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (35 samples, 0.65%)</title><rect x="275.2" y="579.0" width="7.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="278.2" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.13%)</title><rect x="275.2" y="563.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="278.2" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (7 samples, 0.13%)</title><rect x="275.2" y="547.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="278.2" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (5 samples, 0.09%)</title><rect x="275.2" y="531.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="278.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.09%)</title><rect x="275.2" y="515.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="278.2" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.09%)</title><rect x="275.2" y="499.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="278.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (5 samples, 0.09%)</title><rect x="275.2" y="483.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="278.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.04%)</title><rect x="276.3" y="531.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="279.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.04%)</title><rect x="276.3" y="515.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="279.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.04%)</title><rect x="276.3" y="499.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="279.3" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.04%)</title><rect x="276.3" y="483.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="279.3" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.04%)</title><rect x="276.3" y="467.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="279.3" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (28 samples, 0.52%)</title><rect x="276.7" y="563.0" width="6.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="279.7" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (28 samples, 0.52%)</title><rect x="276.7" y="547.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="279.7" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (27 samples, 0.50%)</title><rect x="276.9" y="531.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="279.9" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (27 samples, 0.50%)</title><rect x="276.9" y="515.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="279.9" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (27 samples, 0.50%)</title><rect x="276.9" y="499.0" width="5.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="279.9" y="510.0"></text>
</g>
<g>
<title>read (23 samples, 0.42%)</title><rect x="277.8" y="483.0" width="5.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="280.8" y="494.0"></text>
</g>
<g>
<title>[tid=12035] (3 samples, 0.06%)</title><rect x="282.8" y="675.0" width="0.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="285.8" y="686.0"></text>
</g>
<g>
<title>thread_start (3 samples, 0.06%)</title><rect x="282.8" y="659.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="285.8" y="670.0"></text>
</g>
<g>
<title>_pthread_start (3 samples, 0.06%)</title><rect x="282.8" y="643.0" width="0.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="285.8" y="654.0"></text>
</g>
<g>
<title>_pthread_body (3 samples, 0.06%)</title><rect x="282.8" y="627.0" width="0.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="285.8" y="638.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.06%)</title><rect x="282.8" y="611.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="285.8" y="622.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 0.06%)</title><rect x="282.8" y="595.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="285.8" y="606.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (3 samples, 0.06%)</title><rect x="282.8" y="579.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="285.8" y="590.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (3 samples, 0.06%)</title><rect x="282.8" y="563.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="285.8" y="574.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (2 samples, 0.04%)</title><rect x="283.0" y="547.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="286.0" y="558.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.04%)</title><rect x="283.0" y="531.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="286.0" y="542.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.04%)</title><rect x="283.0" y="515.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="286.0" y="526.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.04%)</title><rect x="283.0" y="499.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="286.0" y="510.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.04%)</title><rect x="283.0" y="483.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="286.0" y="494.0"></text>
</g>
<g>
<title>[tid=15619] (13 samples, 0.24%)</title><rect x="283.5" y="675.0" width="2.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="286.5" y="686.0"></text>
</g>
<g>
<title>thread_start (13 samples, 0.24%)</title><rect x="283.5" y="659.0" width="2.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="286.5" y="670.0"></text>
</g>
<g>
<title>_pthread_start (13 samples, 0.24%)</title><rect x="283.5" y="643.0" width="2.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="286.5" y="654.0"></text>
</g>
<g>
<title>_pthread_body (13 samples, 0.24%)</title><rect x="283.5" y="627.0" width="2.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="286.5" y="638.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (13 samples, 0.24%)</title><rect x="283.5" y="611.0" width="2.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="286.5" y="622.0"></text>
</g>
<g>
<title>Thread::call_run() (13 samples, 0.24%)</title><rect x="283.5" y="595.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="286.5" y="606.0"></text>
</g>
<g>
<title>JavaThread::run() (13 samples, 0.24%)</title><rect x="283.5" y="579.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="286.5" y="590.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (13 samples, 0.24%)</title><rect x="283.5" y="563.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="286.5" y="574.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (13 samples, 0.24%)</title><rect x="283.5" y="547.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="286.5" y="558.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (12 samples, 0.22%)</title><rect x="283.5" y="531.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="286.5" y="542.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (11 samples, 0.20%)</title><rect x="283.7" y="515.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="286.7" y="526.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (11 samples, 0.20%)</title><rect x="283.7" y="499.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="286.7" y="510.0"></text>
</g>
<g>
<title>Compilation::compile_method() (11 samples, 0.20%)</title><rect x="283.7" y="483.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="286.7" y="494.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (11 samples, 0.20%)</title><rect x="283.7" y="467.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="286.7" y="478.0"></text>
</g>
<g>
<title>Compilation::build_hir() (4 samples, 0.07%)</title><rect x="283.7" y="451.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="286.7" y="462.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (4 samples, 0.07%)</title><rect x="283.7" y="435.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="286.7" y="446.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (4 samples, 0.07%)</title><rect x="283.7" y="419.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="286.7" y="430.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (4 samples, 0.07%)</title><rect x="283.7" y="403.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="286.7" y="414.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (4 samples, 0.07%)</title><rect x="283.7" y="387.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="286.7" y="398.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (4 samples, 0.07%)</title><rect x="283.7" y="371.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="286.7" y="382.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (4 samples, 0.07%)</title><rect x="283.7" y="355.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="286.7" y="366.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (3 samples, 0.06%)</title><rect x="283.7" y="339.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="286.7" y="350.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (3 samples, 0.06%)</title><rect x="283.7" y="323.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="286.7" y="334.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 0.06%)</title><rect x="283.7" y="307.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="286.7" y="318.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 0.06%)</title><rect x="283.7" y="291.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="286.7" y="302.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.04%)</title><rect x="283.9" y="275.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="286.9" y="286.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (2 samples, 0.04%)</title><rect x="284.6" y="451.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="287.6" y="462.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (2 samples, 0.04%)</title><rect x="284.6" y="435.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="287.6" y="446.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_lir_list(LIR_List*) (2 samples, 0.04%)</title><rect x="284.6" y="419.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="287.6" y="430.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (5 samples, 0.09%)</title><rect x="285.0" y="451.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="288.0" y="462.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (4 samples, 0.07%)</title><rect x="285.2" y="435.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="288.2" y="446.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (2 samples, 0.04%)</title><rect x="285.4" y="419.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="288.4" y="430.0"></text>
</g>
<g>
<title>[tid=16387] (187 samples, 3.45%)</title><rect x="286.3" y="675.0" width="40.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="289.3" y="686.0">[ti..</text>
</g>
<g>
<title>thread_start (187 samples, 3.45%)</title><rect x="286.3" y="659.0" width="40.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="289.3" y="670.0">thr..</text>
</g>
<g>
<title>_pthread_start (187 samples, 3.45%)</title><rect x="286.3" y="643.0" width="40.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="289.3" y="654.0">_pt..</text>
</g>
<g>
<title>_pthread_body (187 samples, 3.45%)</title><rect x="286.3" y="627.0" width="40.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="289.3" y="638.0">_pt..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (187 samples, 3.45%)</title><rect x="286.3" y="611.0" width="40.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="289.3" y="622.0">thr..</text>
</g>
<g>
<title>Thread::call_run() (187 samples, 3.45%)</title><rect x="286.3" y="595.0" width="40.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="289.3" y="606.0">Thr..</text>
</g>
<g>
<title>JavaThread::run() (187 samples, 3.45%)</title><rect x="286.3" y="579.0" width="40.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="289.3" y="590.0">Jav..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (187 samples, 3.45%)</title><rect x="286.3" y="563.0" width="40.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="289.3" y="574.0">Jav..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (187 samples, 3.45%)</title><rect x="286.3" y="547.0" width="40.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="289.3" y="558.0">Com..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (186 samples, 3.43%)</title><rect x="286.3" y="531.0" width="40.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="289.3" y="542.0">Com..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (184 samples, 3.39%)</title><rect x="286.3" y="515.0" width="40.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="289.3" y="526.0">C2C..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (184 samples, 3.39%)</title><rect x="286.3" y="499.0" width="40.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="289.3" y="510.0">Com..</text>
</g>
<g>
<title>Compile::Code_Gen() (112 samples, 2.06%)</title><rect x="286.5" y="483.0" width="24.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="289.5" y="494.0">C..</text>
</g>
<g>
<title>Compile::Output() (6 samples, 0.11%)</title><rect x="286.5" y="467.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="289.5" y="478.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 0.06%)</title><rect x="286.5" y="451.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="289.5" y="462.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (3 samples, 0.06%)</title><rect x="287.2" y="451.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="290.2" y="462.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.04%)</title><rect x="287.8" y="467.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="290.8" y="478.0"></text>
</g>
<g>
<title>Matcher::match() (7 samples, 0.13%)</title><rect x="288.2" y="467.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="291.2" y="478.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 0.09%)</title><rect x="288.7" y="451.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="291.7" y="462.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.04%)</title><rect x="288.9" y="435.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="291.9" y="446.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (12 samples, 0.22%)</title><rect x="289.8" y="467.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="292.8" y="478.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (2 samples, 0.04%)</title><rect x="289.8" y="451.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="292.8" y="462.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (10 samples, 0.18%)</title><rect x="290.2" y="451.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="293.2" y="462.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.04%)</title><rect x="290.2" y="435.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="293.2" y="446.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (2 samples, 0.04%)</title><rect x="290.2" y="419.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="293.2" y="430.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (2 samples, 0.04%)</title><rect x="290.6" y="435.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="293.6" y="446.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.06%)</title><rect x="291.7" y="435.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="294.7" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (85 samples, 1.57%)</title><rect x="292.4" y="467.0" width="18.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="295.4" y="478.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.04%)</title><rect x="292.8" y="451.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="295.8" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 0.07%)</title><rect x="293.3" y="451.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="296.3" y="462.0"></text>
</g>
<g>
<title>RegMask::SUBTRACT(RegMask const&amp;) (3 samples, 0.06%)</title><rect x="293.5" y="435.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="296.5" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 0.07%)</title><rect x="294.1" y="451.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="297.1" y="462.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.04%)</title><rect x="294.6" y="435.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="297.6" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (8 samples, 0.15%)</title><rect x="295.0" y="451.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="298.0" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (17 samples, 0.31%)</title><rect x="296.7" y="451.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="299.7" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (7 samples, 0.13%)</title><rect x="298.0" y="435.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="301.0" y="446.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.04%)</title><rect x="298.0" y="419.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="301.0" y="430.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.04%)</title><rect x="298.5" y="419.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="301.5" y="430.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (2 samples, 0.04%)</title><rect x="299.1" y="419.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="302.1" y="430.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (3 samples, 0.06%)</title><rect x="299.8" y="435.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="302.8" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (3 samples, 0.06%)</title><rect x="300.4" y="451.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="303.4" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.06%)</title><rect x="300.4" y="435.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="303.4" y="446.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.04%)</title><rect x="300.6" y="419.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="303.6" y="430.0"></text>
</g>
<g>
<title>PhaseChaitin::de_ssa() (2 samples, 0.04%)</title><rect x="301.1" y="451.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="304.1" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (10 samples, 0.18%)</title><rect x="301.5" y="451.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="304.5" y="462.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (4 samples, 0.07%)</title><rect x="302.8" y="435.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="305.8" y="446.0"></text>
</g>
<g>
<title>RegMask::Size() const (4 samples, 0.07%)</title><rect x="302.8" y="419.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="305.8" y="430.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (7 samples, 0.13%)</title><rect x="303.7" y="451.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="306.7" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.06%)</title><rect x="304.3" y="435.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="307.3" y="446.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.04%)</title><rect x="305.4" y="451.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="308.4" y="462.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.04%)</title><rect x="305.4" y="435.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="308.4" y="446.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.04%)</title><rect x="305.4" y="419.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="308.4" y="430.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.04%)</title><rect x="305.9" y="451.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="308.9" y="462.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.04%)</title><rect x="305.9" y="435.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="308.9" y="446.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.04%)</title><rect x="305.9" y="419.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="308.9" y="430.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (7 samples, 0.13%)</title><rect x="306.3" y="451.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="309.3" y="462.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (4 samples, 0.07%)</title><rect x="306.3" y="435.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="309.3" y="446.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (11 samples, 0.20%)</title><rect x="308.3" y="451.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="311.3" y="462.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.04%)</title><rect x="309.8" y="435.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="312.8" y="446.0"></text>
</g>
<g>
<title>Compile::Optimize() (55 samples, 1.01%)</title><rect x="310.9" y="483.0" width="11.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="313.9" y="494.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (4 samples, 0.07%)</title><rect x="311.1" y="467.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="314.1" y="478.0"></text>
</g>
<g>
<title>Unique_Node_List::pop() (2 samples, 0.04%)</title><rect x="311.5" y="451.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="314.5" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (43 samples, 0.79%)</title><rect x="312.0" y="467.0" width="9.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="315.0" y="478.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.04%)</title><rect x="312.0" y="451.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="315.0" y="462.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (4 samples, 0.07%)</title><rect x="312.4" y="451.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="315.4" y="462.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (3 samples, 0.06%)</title><rect x="312.4" y="435.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="315.4" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (2 samples, 0.04%)</title><rect x="312.6" y="419.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="315.6" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 0.07%)</title><rect x="313.3" y="451.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="316.3" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 0.13%)</title><rect x="314.1" y="451.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="317.1" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (2 samples, 0.04%)</title><rect x="315.0" y="435.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="318.0" y="446.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (2 samples, 0.04%)</title><rect x="315.0" y="419.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="318.0" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (12 samples, 0.22%)</title><rect x="315.7" y="451.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="318.7" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (9 samples, 0.17%)</title><rect x="316.3" y="435.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="319.3" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (6 samples, 0.11%)</title><rect x="316.5" y="419.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="319.5" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.04%)</title><rect x="316.7" y="403.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="319.7" y="414.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (2 samples, 0.04%)</title><rect x="316.7" y="387.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="319.7" y="398.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.04%)</title><rect x="316.7" y="371.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="319.7" y="382.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (2 samples, 0.04%)</title><rect x="316.7" y="355.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="319.7" y="366.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (2 samples, 0.04%)</title><rect x="316.7" y="339.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="319.7" y="350.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 0.04%)</title><rect x="317.4" y="403.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="320.4" y="414.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (4 samples, 0.07%)</title><rect x="318.3" y="451.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="321.3" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (3 samples, 0.06%)</title><rect x="318.5" y="435.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="321.5" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (5 samples, 0.09%)</title><rect x="319.1" y="451.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="322.1" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.04%)</title><rect x="319.8" y="435.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="322.8" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 0.04%)</title><rect x="319.8" y="419.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="322.8" y="430.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.06%)</title><rect x="320.2" y="451.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="323.2" y="462.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.06%)</title><rect x="320.2" y="435.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="323.2" y="446.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.09%)</title><rect x="321.3" y="467.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="324.3" y="478.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 0.09%)</title><rect x="321.3" y="451.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="324.3" y="462.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.04%)</title><rect x="321.3" y="435.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="324.3" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (14 samples, 0.26%)</title><rect x="322.8" y="483.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="325.8" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (14 samples, 0.26%)</title><rect x="322.8" y="467.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="325.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (14 samples, 0.26%)</title><rect x="322.8" y="451.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="325.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (14 samples, 0.26%)</title><rect x="322.8" y="435.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="325.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (12 samples, 0.22%)</title><rect x="322.8" y="419.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="325.8" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.17%)</title><rect x="323.1" y="403.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="326.1" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.17%)</title><rect x="323.1" y="387.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="326.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.17%)</title><rect x="323.1" y="371.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="326.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.15%)</title><rect x="323.1" y="355.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="326.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.15%)</title><rect x="323.1" y="339.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="326.1" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.13%)</title><rect x="323.3" y="323.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="326.3" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.13%)</title><rect x="323.3" y="307.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="326.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.13%)</title><rect x="323.3" y="291.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="326.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.13%)</title><rect x="323.3" y="275.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="326.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.13%)</title><rect x="323.3" y="259.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="326.3" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.09%)</title><rect x="323.3" y="243.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="326.3" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.09%)</title><rect x="323.3" y="227.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="326.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.09%)</title><rect x="323.3" y="211.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="326.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.09%)</title><rect x="323.3" y="195.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="326.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.09%)</title><rect x="323.3" y="179.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="326.3" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="323.5" y="163.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="326.5" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.06%)</title><rect x="323.5" y="147.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="326.5" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.06%)</title><rect x="323.5" y="131.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="326.5" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.06%)</title><rect x="323.5" y="115.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="326.5" y="126.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.06%)</title><rect x="323.5" y="99.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="326.5" y="110.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="323.5" y="83.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="326.5" y="94.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.06%)</title><rect x="323.5" y="67.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="326.5" y="78.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="323.7" y="51.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="326.7" y="62.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="323.7" y="35.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="326.7" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="324.4" y="243.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="327.4" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="324.4" y="227.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="327.4" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="324.4" y="211.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="327.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="324.4" y="195.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="327.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="324.4" y="179.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="327.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="324.4" y="163.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="327.4" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="324.4" y="147.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="327.4" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="324.4" y="131.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="327.4" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="324.4" y="115.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="327.4" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="324.4" y="99.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="327.4" y="110.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="324.4" y="83.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="327.4" y="94.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="325.0" y="403.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="328.0" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="325.0" y="387.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="328.0" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="325.0" y="371.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="328.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="325.0" y="355.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="328.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="325.0" y="339.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="328.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="325.0" y="323.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="328.0" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="325.0" y="307.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="328.0" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="325.0" y="291.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="328.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="325.0" y="275.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="328.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="325.0" y="259.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="328.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="325.0" y="243.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="328.0" y="254.0"></text>
</g>
<g>
<title>[tid=22019] (5 samples, 0.09%)</title><rect x="327.2" y="675.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="330.2" y="686.0"></text>
</g>
<g>
<title>thread_start (5 samples, 0.09%)</title><rect x="327.2" y="659.0" width="1.1" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="330.2" y="670.0"></text>
</g>
<g>
<title>_pthread_start (5 samples, 0.09%)</title><rect x="327.2" y="643.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="330.2" y="654.0"></text>
</g>
<g>
<title>_pthread_body (5 samples, 0.09%)</title><rect x="327.2" y="627.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="330.2" y="638.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (5 samples, 0.09%)</title><rect x="327.2" y="611.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="330.2" y="622.0"></text>
</g>
<g>
<title>Thread::call_run() (5 samples, 0.09%)</title><rect x="327.2" y="595.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="330.2" y="606.0"></text>
</g>
<g>
<title>JavaThread::run() (5 samples, 0.09%)</title><rect x="327.2" y="579.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="330.2" y="590.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (5 samples, 0.09%)</title><rect x="327.2" y="563.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="330.2" y="574.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (5 samples, 0.09%)</title><rect x="327.2" y="547.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="330.2" y="558.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (2 samples, 0.04%)</title><rect x="327.2" y="531.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="330.2" y="542.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (2 samples, 0.04%)</title><rect x="327.2" y="515.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="330.2" y="526.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.06%)</title><rect x="327.6" y="531.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="330.6" y="542.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.06%)</title><rect x="327.6" y="515.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="330.6" y="526.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (3 samples, 0.06%)</title><rect x="327.6" y="499.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="330.6" y="510.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.06%)</title><rect x="327.6" y="483.0" width="0.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="330.6" y="494.0"></text>
</g>
<g>
<title>[tid=42243] (10 samples, 0.18%)</title><rect x="328.3" y="675.0" width="2.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="331.3" y="686.0"></text>
</g>
<g>
<title>thread_start (10 samples, 0.18%)</title><rect x="328.3" y="659.0" width="2.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="331.3" y="670.0"></text>
</g>
<g>
<title>_pthread_start (10 samples, 0.18%)</title><rect x="328.3" y="643.0" width="2.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="331.3" y="654.0"></text>
</g>
<g>
<title>_pthread_body (10 samples, 0.18%)</title><rect x="328.3" y="627.0" width="2.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="331.3" y="638.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (10 samples, 0.18%)</title><rect x="328.3" y="611.0" width="2.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="331.3" y="622.0"></text>
</g>
<g>
<title>Thread::call_run() (10 samples, 0.18%)</title><rect x="328.3" y="595.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="331.3" y="606.0"></text>
</g>
<g>
<title>WatcherThread::run() (10 samples, 0.18%)</title><rect x="328.3" y="579.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="331.3" y="590.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (9 samples, 0.17%)</title><rect x="328.5" y="563.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="331.5" y="574.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (9 samples, 0.17%)</title><rect x="328.5" y="547.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="331.5" y="558.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (9 samples, 0.17%)</title><rect x="328.5" y="531.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="331.5" y="542.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (9 samples, 0.17%)</title><rect x="328.5" y="515.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="331.5" y="526.0"></text>
</g>
<g>
<title>__psynch_cvwait (8 samples, 0.15%)</title><rect x="328.7" y="499.0" width="1.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="331.7" y="510.0"></text>
</g>
<g>
<title>[worker tid=27907] (1,040 samples, 19.17%)</title><rect x="330.7" y="675.0" width="226.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="333.7" y="686.0">[worker tid=27907]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (7 samples, 0.13%)</title><rect x="330.9" y="659.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="333.9" y="670.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (5 samples, 0.09%)</title><rect x="331.3" y="643.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="334.3" y="654.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (2 samples, 0.04%)</title><rect x="331.3" y="627.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="334.3" y="638.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (2 samples, 0.04%)</title><rect x="331.3" y="611.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="334.3" y="622.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (3 samples, 0.06%)</title><rect x="331.8" y="627.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="334.8" y="638.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.04%)</title><rect x="332.0" y="611.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="335.0" y="622.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,031 samples, 19.01%)</title><rect x="332.6" y="659.0" width="224.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="335.6" y="670.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,031 samples, 19.01%)</title><rect x="332.6" y="643.0" width="224.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="335.6" y="654.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,031 samples, 19.01%)</title><rect x="332.6" y="627.0" width="224.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="335.6" y="638.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>I2C/C2I adapters (2 samples, 0.04%)</title><rect x="336.1" y="611.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="339.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (254 samples, 4.68%)</title><rect x="336.8" y="611.0" width="55.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="339.8" y="622.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (254 samples, 4.68%)</title><rect x="336.8" y="595.0" width="55.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="339.8" y="606.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (226 samples, 4.17%)</title><rect x="336.8" y="579.0" width="49.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="339.8" y="590.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (5 samples, 0.09%)</title><rect x="336.8" y="563.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="339.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (4 samples, 0.07%)</title><rect x="337.0" y="547.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="340.0" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LI_V (4 samples, 0.07%)</title><rect x="337.0" y="531.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="340.0" y="542.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.set (3 samples, 0.06%)</title><rect x="337.2" y="515.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="340.2" y="526.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (3 samples, 0.06%)</title><rect x="337.2" y="499.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="340.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (220 samples, 4.06%)</title><rect x="338.1" y="563.0" width="47.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="341.1" y="574.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (220 samples, 4.06%)</title><rect x="338.1" y="547.0" width="47.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="341.1" y="558.0">jdk/..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (213 samples, 3.93%)</title><rect x="339.6" y="531.0" width="46.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="342.6" y="542.0">Unsa..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (5 samples, 0.09%)</title><rect x="340.0" y="515.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="343.0" y="526.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (2 samples, 0.04%)</title><rect x="340.0" y="499.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="343.0" y="510.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.04%)</title><rect x="340.0" y="483.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="343.0" y="494.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::set_thread_status(JavaThread*, java_lang_Thread::ThreadStatus) (2 samples, 0.04%)</title><rect x="340.5" y="499.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="343.5" y="510.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (199 samples, 3.67%)</title><rect x="341.3" y="515.0" width="43.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="344.3" y="526.0">Park..</text>
</g>
<g>
<title>__psynch_cvwait (193 samples, 3.56%)</title><rect x="342.2" y="499.0" width="42.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="345.2" y="510.0">__p..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (5 samples, 0.09%)</title><rect x="385.9" y="579.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="388.9" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (5 samples, 0.09%)</title><rect x="385.9" y="563.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="388.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.07%)</title><rect x="386.1" y="547.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="389.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.07%)</title><rect x="386.1" y="531.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="389.1" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.04%)</title><rect x="386.4" y="515.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="389.4" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (23 samples, 0.42%)</title><rect x="387.0" y="579.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="390.0" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (23 samples, 0.42%)</title><rect x="387.0" y="563.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="390.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (23 samples, 0.42%)</title><rect x="387.0" y="547.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="390.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (23 samples, 0.42%)</title><rect x="387.0" y="531.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="390.0" y="542.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (23 samples, 0.42%)</title><rect x="387.0" y="515.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="390.0" y="526.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (21 samples, 0.39%)</title><rect x="387.2" y="499.0" width="4.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="390.2" y="510.0"></text>
</g>
<g>
<title>__psynch_cvsignal (18 samples, 0.33%)</title><rect x="387.9" y="483.0" width="3.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="390.9" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl$$Lambda$64/1131707208.run (758 samples, 13.97%)</title><rect x="392.0" y="611.0" width="164.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="395.0" y="622.0">ru/mail/polis/service..</text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.lambda$executeAsync$3 (758 samples, 13.97%)</title><rect x="392.0" y="595.0" width="164.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="395.0" y="606.0">ru/mail/polis/service..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (170 samples, 3.13%)</title><rect x="392.0" y="579.0" width="37.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="395.0" y="590.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (162 samples, 2.99%)</title><rect x="392.7" y="563.0" width="35.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="395.7" y="574.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (5 samples, 0.09%)</title><rect x="392.7" y="547.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="395.7" y="558.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.06%)</title><rect x="393.1" y="531.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="396.1" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.04%)</title><rect x="393.3" y="515.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="396.3" y="526.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (157 samples, 2.89%)</title><rect x="393.8" y="547.0" width="34.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="396.8" y="558.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (157 samples, 2.89%)</title><rect x="393.8" y="531.0" width="34.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="396.8" y="542.0">on..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (157 samples, 2.89%)</title><rect x="393.8" y="515.0" width="34.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="396.8" y="526.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (157 samples, 2.89%)</title><rect x="393.8" y="499.0" width="34.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="396.8" y="510.0">on..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (156 samples, 2.88%)</title><rect x="394.0" y="483.0" width="33.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="397.0" y="494.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (154 samples, 2.84%)</title><rect x="394.4" y="467.0" width="33.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="397.4" y="478.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (154 samples, 2.84%)</title><rect x="394.4" y="451.0" width="33.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="397.4" y="462.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (147 samples, 2.71%)</title><rect x="394.6" y="435.0" width="32.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="397.6" y="446.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (147 samples, 2.71%)</title><rect x="394.6" y="419.0" width="32.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="397.6" y="430.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (147 samples, 2.71%)</title><rect x="394.6" y="403.0" width="32.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="397.6" y="414.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.04%)</title><rect x="395.7" y="387.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="398.7" y="398.0"></text>
</g>
<g>
<title>write (140 samples, 2.58%)</title><rect x="396.2" y="387.0" width="30.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="399.2" y="398.0">wr..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (6 samples, 0.11%)</title><rect x="426.6" y="435.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="429.6" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.04%)</title><rect x="427.0" y="419.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="430.0" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.04%)</title><rect x="427.5" y="419.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="430.5" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.06%)</title><rect x="427.9" y="563.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="430.9" y="574.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.06%)</title><rect x="427.9" y="547.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="430.9" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.06%)</title><rect x="427.9" y="531.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="430.9" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl$$Lambda$63/674945188.act (588 samples, 10.84%)</title><rect x="429.0" y="579.0" width="127.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="432.0" y="590.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.lambda$entity$1 (588 samples, 10.84%)</title><rect x="429.0" y="563.0" width="127.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="432.0" y="574.0">ru/mail/polis/se..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.07%)</title><rect x="429.2" y="547.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="432.2" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.07%)</title><rect x="429.2" y="531.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="432.2" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="429.2" y="515.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="432.2" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="429.2" y="499.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="432.2" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (583 samples, 10.75%)</title><rect x="430.1" y="547.0" width="126.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="433.1" y="558.0">ru/mail/polis/da..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (580 samples, 10.69%)</title><rect x="430.1" y="531.0" width="126.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="433.1" y="542.0">org/rocksdb/Rock..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (580 samples, 10.69%)</title><rect x="430.1" y="515.0" width="126.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="433.1" y="526.0">org/rocksdb/Rock..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (577 samples, 10.64%)</title><rect x="430.7" y="499.0" width="125.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="433.7" y="510.0">Java_org_rocksd..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (576 samples, 10.62%)</title><rect x="431.0" y="483.0" width="125.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="434.0" y="494.0">rocksdb_put_hel..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (2 samples, 0.04%)</title><rect x="431.6" y="467.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="434.6" y="478.0"></text>
</g>
<g>
<title>free_tiny (6 samples, 0.11%)</title><rect x="432.5" y="467.0" width="1.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="435.5" y="478.0"></text>
</g>
<g>
<title>tiny_free_no_lock (3 samples, 0.06%)</title><rect x="433.1" y="451.0" width="0.7" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="436.1" y="462.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.06%)</title><rect x="433.8" y="467.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="436.8" y="478.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (559 samples, 10.31%)</title><rect x="434.4" y="467.0" width="121.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="437.4" y="478.0">rocksdb::Compac..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (558 samples, 10.29%)</title><rect x="434.7" y="451.0" width="121.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="437.7" y="462.0">rocksdb::DBImpl..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (556 samples, 10.25%)</title><rect x="434.9" y="435.0" width="120.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="437.9" y="446.0">rocksdb::DB::Pu..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (544 samples, 10.03%)</title><rect x="434.9" y="419.0" width="118.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="437.9" y="430.0">rocksdb::DBImp..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (537 samples, 9.90%)</title><rect x="435.3" y="403.0" width="116.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="438.3" y="414.0">rocksdb::DBImp..</text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="440.8" y="387.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="443.8" y="398.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (2 samples, 0.04%)</title><rect x="441.4" y="387.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="444.4" y="398.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (145 samples, 2.67%)</title><rect x="441.8" y="387.0" width="31.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="444.8" y="398.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (143 samples, 2.64%)</title><rect x="442.1" y="371.0" width="31.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="445.1" y="382.0">ro..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (142 samples, 2.62%)</title><rect x="442.1" y="355.0" width="30.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="445.1" y="366.0">ro..</text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (141 samples, 2.60%)</title><rect x="442.3" y="339.0" width="30.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="445.3" y="350.0">ro..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="442.5" y="323.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="445.5" y="334.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="442.5" y="307.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="445.5" y="318.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (138 samples, 2.54%)</title><rect x="442.9" y="323.0" width="30.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="445.9" y="334.0">ro..</text>
</g>
<g>
<title>_dispatch_queue_attrs (3 samples, 0.06%)</title><rect x="442.9" y="307.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="445.9" y="318.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (134 samples, 2.47%)</title><rect x="443.8" y="307.0" width="29.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="446.8" y="318.0">ro..</text>
</g>
<g>
<title>write (133 samples, 2.45%)</title><rect x="444.0" y="291.0" width="28.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="447.0" y="302.0">wr..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (43 samples, 0.79%)</title><rect x="473.8" y="387.0" width="9.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="476.8" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (36 samples, 0.66%)</title><rect x="475.3" y="371.0" width="7.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="478.3" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (34 samples, 0.63%)</title><rect x="475.8" y="355.0" width="7.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="478.8" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (34 samples, 0.63%)</title><rect x="475.8" y="339.0" width="7.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="478.8" y="350.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (30 samples, 0.55%)</title><rect x="475.8" y="323.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="478.8" y="334.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="476.2" y="307.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="479.2" y="318.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.04%)</title><rect x="476.6" y="307.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="479.6" y="318.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (23 samples, 0.42%)</title><rect x="477.3" y="307.0" width="5.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="480.3" y="318.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (3 samples, 0.06%)</title><rect x="478.6" y="291.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="481.6" y="302.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (3 samples, 0.06%)</title><rect x="478.6" y="275.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="481.6" y="286.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (11 samples, 0.20%)</title><rect x="479.5" y="291.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="482.5" y="302.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="479.9" y="275.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="482.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (7 samples, 0.13%)</title><rect x="480.3" y="275.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="483.3" y="286.0"></text>
</g>
<g>
<title>_platform_memcmp (4 samples, 0.07%)</title><rect x="481.0" y="259.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="484.0" y="270.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.04%)</title><rect x="481.9" y="291.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="484.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (3 samples, 0.06%)</title><rect x="482.5" y="323.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="485.5" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (23 samples, 0.42%)</title><rect x="483.2" y="387.0" width="5.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="486.2" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (14 samples, 0.26%)</title><rect x="485.1" y="371.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="488.1" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (13 samples, 0.24%)</title><rect x="485.4" y="355.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="488.4" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (13 samples, 0.24%)</title><rect x="485.4" y="339.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="488.4" y="350.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (9 samples, 0.17%)</title><rect x="485.4" y="323.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="488.4" y="334.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.04%)</title><rect x="485.4" y="307.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="488.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (7 samples, 0.13%)</title><rect x="485.8" y="307.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="488.8" y="318.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (7 samples, 0.13%)</title><rect x="485.8" y="291.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="488.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (4 samples, 0.07%)</title><rect x="486.2" y="275.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="489.2" y="286.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.04%)</title><rect x="486.7" y="259.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="489.7" y="270.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.04%)</title><rect x="486.7" y="243.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="489.7" y="254.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.04%)</title><rect x="487.3" y="323.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="490.3" y="334.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="487.7" y="323.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="490.7" y="334.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="487.7" y="307.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="490.7" y="318.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.04%)</title><rect x="487.7" y="291.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="490.7" y="302.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="487.7" y="275.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="490.7" y="286.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="487.7" y="259.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="490.7" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (149 samples, 2.75%)</title><rect x="488.2" y="387.0" width="32.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="491.2" y="398.0">ro..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (149 samples, 2.75%)</title><rect x="488.2" y="371.0" width="32.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="491.2" y="382.0">ro..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (2 samples, 0.04%)</title><rect x="489.0" y="355.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="492.0" y="366.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.04%)</title><rect x="489.0" y="339.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="492.0" y="350.0"></text>
</g>
<g>
<title>xdrrec_ops (143 samples, 2.64%)</title><rect x="489.5" y="355.0" width="31.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="492.5" y="366.0">xd..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (2 samples, 0.04%)</title><rect x="520.6" y="387.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="523.6" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (2 samples, 0.04%)</title><rect x="520.6" y="371.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="523.6" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (17 samples, 0.31%)</title><rect x="521.0" y="387.0" width="3.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="524.0" y="398.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (10 samples, 0.18%)</title><rect x="521.7" y="371.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="524.7" y="382.0"></text>
</g>
<g>
<title>__psynch_cvsignal (10 samples, 0.18%)</title><rect x="521.7" y="355.0" width="2.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="524.7" y="366.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (4 samples, 0.07%)</title><rect x="523.9" y="371.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="526.9" y="382.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (4 samples, 0.07%)</title><rect x="523.9" y="355.0" width="0.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="526.9" y="366.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (4 samples, 0.07%)</title><rect x="523.9" y="339.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="526.9" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (107 samples, 1.97%)</title><rect x="524.7" y="387.0" width="23.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="527.7" y="398.0">r..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (105 samples, 1.94%)</title><rect x="524.9" y="371.0" width="22.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="527.9" y="382.0">r..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (83 samples, 1.53%)</title><rect x="527.6" y="355.0" width="18.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="530.6" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (70 samples, 1.29%)</title><rect x="527.6" y="339.0" width="15.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="530.6" y="350.0"></text>
</g>
<g>
<title>_pthread_cond_wait (13 samples, 0.24%)</title><rect x="542.8" y="339.0" width="2.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="545.8" y="350.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (12 samples, 0.22%)</title><rect x="543.0" y="323.0" width="2.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="546.0" y="334.0"></text>
</g>
<g>
<title>__psynch_mutexwait (12 samples, 0.22%)</title><rect x="543.0" y="307.0" width="2.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="546.0" y="318.0"></text>
</g>
<g>
<title>std::__1::mutex::lock() (2 samples, 0.04%)</title><rect x="545.6" y="355.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="548.6" y="366.0"></text>
</g>
<g>
<title>_pthread_mutex_lock_init_slow (2 samples, 0.04%)</title><rect x="545.6" y="339.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="548.6" y="350.0"></text>
</g>
<g>
<title>_pthread_mutex_check_init_slow (2 samples, 0.04%)</title><rect x="545.6" y="323.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="548.6" y="334.0"></text>
</g>
<g>
<title>xdrrec_ops (8 samples, 0.15%)</title><rect x="546.0" y="355.0" width="1.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="549.0" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (12 samples, 0.22%)</title><rect x="548.0" y="387.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="551.0" y="398.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (7 samples, 0.13%)</title><rect x="548.0" y="371.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="551.0" y="382.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.13%)</title><rect x="548.0" y="355.0" width="1.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="551.0" y="366.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (5 samples, 0.09%)</title><rect x="549.5" y="371.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="552.5" y="382.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (5 samples, 0.09%)</title><rect x="549.5" y="355.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="552.5" y="366.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (5 samples, 0.09%)</title><rect x="549.5" y="339.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="552.5" y="350.0"></text>
</g>
<g>
<title>std::__1::condition_variable::~condition_variable() (2 samples, 0.04%)</title><rect x="550.8" y="387.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="553.8" y="398.0"></text>
</g>
<g>
<title>pthread_cond_destroy (2 samples, 0.04%)</title><rect x="550.8" y="371.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="553.8" y="382.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (2 samples, 0.04%)</title><rect x="552.8" y="403.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="555.8" y="414.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (4 samples, 0.07%)</title><rect x="553.2" y="419.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="556.2" y="430.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.06%)</title><rect x="553.2" y="403.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="556.2" y="414.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (2 samples, 0.04%)</title><rect x="553.4" y="387.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="556.4" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (2 samples, 0.04%)</title><rect x="554.1" y="419.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="557.1" y="430.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (5 samples, 0.09%)</title><rect x="554.5" y="419.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="557.5" y="430.0"></text>
</g>
<g>
<title>free (4 samples, 0.07%)</title><rect x="554.5" y="403.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="557.5" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.shiftByte (2 samples, 0.04%)</title><rect x="556.3" y="531.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="559.3" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.toArray (2 samples, 0.04%)</title><rect x="556.3" y="515.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="559.3" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.04%)</title><rect x="556.3" y="499.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="559.3" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.04%)</title><rect x="556.3" y="483.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="559.3" y="494.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.04%)</title><rect x="556.3" y="467.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="559.3" y="478.0"></text>
</g>
<g>
<title>[worker tid=29187] (898 samples, 16.56%)</title><rect x="556.9" y="675.0" width="195.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="559.9" y="686.0">[worker tid=29187]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (8 samples, 0.15%)</title><rect x="557.6" y="659.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="560.6" y="670.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (7 samples, 0.13%)</title><rect x="557.6" y="643.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="560.6" y="654.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (2 samples, 0.04%)</title><rect x="557.6" y="627.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="560.6" y="638.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.04%)</title><rect x="557.6" y="611.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="560.6" y="622.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.04%)</title><rect x="557.6" y="595.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="560.6" y="606.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (4 samples, 0.07%)</title><rect x="558.2" y="627.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="561.2" y="638.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.04%)</title><rect x="558.7" y="611.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="561.7" y="622.0"></text>
</g>
<g>
<title>[not_walkable] (2 samples, 0.04%)</title><rect x="559.3" y="659.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="562.3" y="670.0"></text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.04%)</title><rect x="559.8" y="659.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="562.8" y="670.0"></text>
</g>
<g>
<title>java/lang/Thread.run (880 samples, 16.22%)</title><rect x="560.2" y="659.0" width="191.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="563.2" y="670.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (880 samples, 16.22%)</title><rect x="560.2" y="643.0" width="191.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="563.2" y="654.0">java/util/concurrent/Thre..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (880 samples, 16.22%)</title><rect x="560.2" y="627.0" width="191.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="563.2" y="638.0">java/util/concurrent/Thre..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (4 samples, 0.07%)</title><rect x="562.4" y="611.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="565.4" y="622.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (4 samples, 0.07%)</title><rect x="562.4" y="595.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="565.4" y="606.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (4 samples, 0.07%)</title><rect x="562.4" y="579.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="565.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.afterExecute (2 samples, 0.04%)</title><rect x="563.7" y="611.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="566.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (214 samples, 3.95%)</title><rect x="564.3" y="611.0" width="46.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="567.3" y="622.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (213 samples, 3.93%)</title><rect x="564.5" y="595.0" width="46.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="567.5" y="606.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (196 samples, 3.61%)</title><rect x="564.8" y="579.0" width="42.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="567.8" y="590.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (4 samples, 0.07%)</title><rect x="564.8" y="563.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="567.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (3 samples, 0.06%)</title><rect x="565.0" y="547.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="568.0" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LI_V (2 samples, 0.04%)</title><rect x="565.0" y="531.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="568.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (4 samples, 0.07%)</title><rect x="565.6" y="563.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="568.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.07%)</title><rect x="565.6" y="547.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="568.6" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.06%)</title><rect x="565.8" y="531.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="568.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.06%)</title><rect x="565.8" y="515.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="568.8" y="526.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.06%)</title><rect x="565.8" y="499.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="568.8" y="510.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (3 samples, 0.06%)</title><rect x="565.8" y="483.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="568.8" y="494.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.06%)</title><rect x="565.8" y="467.0" width="0.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="568.8" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (187 samples, 3.45%)</title><rect x="566.7" y="563.0" width="40.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="569.7" y="574.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (186 samples, 3.43%)</title><rect x="566.9" y="547.0" width="40.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="569.9" y="558.0">jdk..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (179 samples, 3.30%)</title><rect x="568.5" y="531.0" width="38.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="571.5" y="542.0">Uns..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.04%)</title><rect x="568.5" y="515.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="571.5" y="526.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (2 samples, 0.04%)</title><rect x="568.5" y="499.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="571.5" y="510.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (2 samples, 0.04%)</title><rect x="568.5" y="483.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="571.5" y="494.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (5 samples, 0.09%)</title><rect x="568.9" y="515.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="571.9" y="526.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (3 samples, 0.06%)</title><rect x="569.1" y="499.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="572.1" y="510.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (165 samples, 3.04%)</title><rect x="570.2" y="515.0" width="35.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="573.2" y="526.0">Par..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.04%)</title><rect x="570.6" y="499.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="573.6" y="510.0"></text>
</g>
<g>
<title>__psynch_cvwait (161 samples, 2.97%)</title><rect x="571.1" y="499.0" width="35.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="574.1" y="510.0">__p..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.04%)</title><rect x="606.1" y="515.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="609.1" y="526.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.04%)</title><rect x="606.1" y="499.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="609.1" y="510.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.04%)</title><rect x="606.1" y="483.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="609.1" y="494.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="606.1" y="467.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="609.1" y="478.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.04%)</title><rect x="606.1" y="451.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="609.1" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (2 samples, 0.04%)</title><rect x="606.5" y="515.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="609.5" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (3 samples, 0.06%)</title><rect x="607.4" y="579.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="610.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (3 samples, 0.06%)</title><rect x="607.4" y="563.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="610.4" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (3 samples, 0.06%)</title><rect x="607.4" y="547.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="610.4" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (13 samples, 0.24%)</title><rect x="608.0" y="579.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="611.0" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 0.24%)</title><rect x="608.0" y="563.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="611.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (13 samples, 0.24%)</title><rect x="608.0" y="547.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="611.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (13 samples, 0.24%)</title><rect x="608.0" y="531.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="611.0" y="542.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (13 samples, 0.24%)</title><rect x="608.0" y="515.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="611.0" y="526.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (12 samples, 0.22%)</title><rect x="608.3" y="499.0" width="2.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="611.3" y="510.0"></text>
</g>
<g>
<title>__psynch_cvsignal (9 samples, 0.17%)</title><rect x="608.3" y="483.0" width="1.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="611.3" y="494.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.04%)</title><rect x="610.4" y="483.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="613.4" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl$$Lambda$64/1131707208.run (646 samples, 11.91%)</title><rect x="611.1" y="611.0" width="140.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="614.1" y="622.0">ru/mail/polis/serv..</text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.lambda$executeAsync$3 (646 samples, 11.91%)</title><rect x="611.1" y="595.0" width="140.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="614.1" y="606.0">ru/mail/polis/serv..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (128 samples, 2.36%)</title><rect x="611.1" y="579.0" width="27.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="614.1" y="590.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (126 samples, 2.32%)</title><rect x="611.3" y="563.0" width="27.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="614.3" y="574.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (5 samples, 0.09%)</title><rect x="611.3" y="547.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="614.3" y="558.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (4 samples, 0.07%)</title><rect x="611.5" y="531.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="614.5" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.04%)</title><rect x="612.0" y="515.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="615.0" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.04%)</title><rect x="612.0" y="499.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="615.0" y="510.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.04%)</title><rect x="612.0" y="483.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="615.0" y="494.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.04%)</title><rect x="612.0" y="467.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="615.0" y="478.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (121 samples, 2.23%)</title><rect x="612.4" y="547.0" width="26.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="615.4" y="558.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.write (121 samples, 2.23%)</title><rect x="612.4" y="531.0" width="26.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="615.4" y="542.0">o..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (118 samples, 2.18%)</title><rect x="612.4" y="515.0" width="25.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="615.4" y="526.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (117 samples, 2.16%)</title><rect x="612.6" y="499.0" width="25.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="615.6" y="510.0">o..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.06%)</title><rect x="612.8" y="483.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="615.8" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="612.8" y="467.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="615.8" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="613.1" y="451.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="616.1" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (113 samples, 2.08%)</title><rect x="613.5" y="483.0" width="24.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="616.5" y="494.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (113 samples, 2.08%)</title><rect x="613.5" y="467.0" width="24.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="616.5" y="478.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (113 samples, 2.08%)</title><rect x="613.5" y="451.0" width="24.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="616.5" y="462.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (110 samples, 2.03%)</title><rect x="613.5" y="435.0" width="23.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="616.5" y="446.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (110 samples, 2.03%)</title><rect x="613.5" y="419.0" width="23.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="616.5" y="430.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (110 samples, 2.03%)</title><rect x="613.5" y="403.0" width="23.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="616.5" y="414.0">s..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.04%)</title><rect x="614.8" y="387.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="617.8" y="398.0"></text>
</g>
<g>
<title>write (100 samples, 1.84%)</title><rect x="615.7" y="387.0" width="21.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="618.7" y="398.0">w..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.06%)</title><rect x="637.4" y="435.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="640.4" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.04%)</title><rect x="637.6" y="419.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="640.6" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.next (2 samples, 0.04%)</title><rect x="637.6" y="403.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="640.6" y="414.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.06%)</title><rect x="638.1" y="515.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="641.1" y="526.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.04%)</title><rect x="638.1" y="499.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="641.1" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl$$Lambda$63/674945188.act (518 samples, 9.55%)</title><rect x="638.9" y="579.0" width="112.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="641.9" y="590.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.lambda$entity$1 (518 samples, 9.55%)</title><rect x="638.9" y="563.0" width="112.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="641.9" y="574.0">ru/mail/polis/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.06%)</title><rect x="639.2" y="547.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="642.2" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.06%)</title><rect x="639.2" y="531.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="642.2" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="639.4" y="515.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="642.4" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="639.4" y="499.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="642.4" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (513 samples, 9.46%)</title><rect x="640.0" y="547.0" width="111.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="643.0" y="558.0">ru/mail/polis..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (510 samples, 9.40%)</title><rect x="640.0" y="531.0" width="111.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="643.0" y="542.0">org/rocksdb/R..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (510 samples, 9.40%)</title><rect x="640.0" y="515.0" width="111.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="643.0" y="526.0">org/rocksdb/R..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (508 samples, 9.37%)</title><rect x="640.5" y="499.0" width="110.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="643.5" y="510.0">Java_org_rock..</text>
</g>
<g>
<title>__cxxabiv1::__class_type_info::process_static_type_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int) const (2 samples, 0.04%)</title><rect x="640.5" y="483.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="643.5" y="494.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (506 samples, 9.33%)</title><rect x="640.9" y="483.0" width="110.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="643.9" y="494.0">rocksdb_put_h..</text>
</g>
<g>
<title>free (2 samples, 0.04%)</title><rect x="641.8" y="467.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="644.8" y="478.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.04%)</title><rect x="642.2" y="467.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="645.2" y="478.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.09%)</title><rect x="642.6" y="467.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="645.6" y="478.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.04%)</title><rect x="643.3" y="451.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="646.3" y="462.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (489 samples, 9.02%)</title><rect x="643.7" y="467.0" width="106.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="646.7" y="478.0">rocksdb::Comp..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (489 samples, 9.02%)</title><rect x="643.7" y="451.0" width="106.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="646.7" y="462.0">rocksdb::DBIm..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (488 samples, 9.00%)</title><rect x="643.7" y="435.0" width="106.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="646.7" y="446.0">rocksdb::DB::..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (478 samples, 8.81%)</title><rect x="643.9" y="419.0" width="104.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="646.9" y="430.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (475 samples, 8.76%)</title><rect x="643.9" y="403.0" width="103.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="646.9" y="414.0">rocksdb::DBI..</text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="645.7" y="387.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="648.7" y="398.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (131 samples, 2.42%)</title><rect x="646.6" y="387.0" width="28.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="649.6" y="398.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (126 samples, 2.32%)</title><rect x="647.2" y="371.0" width="27.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="650.2" y="382.0">r..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (125 samples, 2.30%)</title><rect x="647.4" y="355.0" width="27.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="650.4" y="366.0">r..</text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (124 samples, 2.29%)</title><rect x="647.6" y="339.0" width="27.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="650.6" y="350.0">r..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (121 samples, 2.23%)</title><rect x="648.3" y="323.0" width="26.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="651.3" y="334.0">r..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (118 samples, 2.18%)</title><rect x="648.9" y="307.0" width="25.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="651.9" y="318.0">r..</text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="649.2" y="291.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="652.2" y="302.0"></text>
</g>
<g>
<title>write (115 samples, 2.12%)</title><rect x="649.6" y="291.0" width="25.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="652.6" y="302.0">w..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Clear() (2 samples, 0.04%)</title><rect x="674.6" y="371.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="677.6" y="382.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (2 samples, 0.04%)</title><rect x="674.6" y="355.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="677.6" y="366.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (3 samples, 0.06%)</title><rect x="675.1" y="387.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="678.1" y="398.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (2 samples, 0.04%)</title><rect x="675.7" y="387.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="678.7" y="398.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.04%)</title><rect x="675.7" y="371.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="678.7" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (36 samples, 0.66%)</title><rect x="676.1" y="387.0" width="7.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="679.1" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (33 samples, 0.61%)</title><rect x="676.8" y="371.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="679.8" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (32 samples, 0.59%)</title><rect x="677.0" y="355.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="680.0" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (32 samples, 0.59%)</title><rect x="677.0" y="339.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="680.0" y="350.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (25 samples, 0.46%)</title><rect x="677.4" y="323.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="680.4" y="334.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (23 samples, 0.42%)</title><rect x="677.9" y="307.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="680.9" y="318.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (7 samples, 0.13%)</title><rect x="681.4" y="291.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="684.4" y="302.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (4 samples, 0.07%)</title><rect x="682.0" y="275.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="685.0" y="286.0"></text>
</g>
<g>
<title>_platform_memcmp (3 samples, 0.06%)</title><rect x="682.2" y="259.0" width="0.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="685.2" y="270.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.04%)</title><rect x="682.9" y="323.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="685.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (3 samples, 0.06%)</title><rect x="683.3" y="323.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="686.3" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (24 samples, 0.44%)</title><rect x="684.0" y="387.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="687.0" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (22 samples, 0.41%)</title><rect x="684.4" y="371.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="687.4" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (22 samples, 0.41%)</title><rect x="684.4" y="355.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="687.4" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (19 samples, 0.35%)</title><rect x="684.8" y="339.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="687.8" y="350.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (15 samples, 0.28%)</title><rect x="684.8" y="323.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="687.8" y="334.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (12 samples, 0.22%)</title><rect x="685.5" y="307.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="688.5" y="318.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (9 samples, 0.17%)</title><rect x="686.2" y="291.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="689.2" y="302.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (7 samples, 0.13%)</title><rect x="686.6" y="275.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="689.6" y="286.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="686.8" y="259.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="689.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (4 samples, 0.07%)</title><rect x="687.2" y="259.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="690.2" y="270.0"></text>
</g>
<g>
<title>_platform_memcmp (3 samples, 0.06%)</title><rect x="687.5" y="243.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="690.5" y="254.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="688.3" y="323.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="691.3" y="334.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.06%)</title><rect x="688.3" y="307.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="691.3" y="318.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.06%)</title><rect x="688.3" y="291.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="691.3" y="302.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.06%)</title><rect x="688.3" y="275.0" width="0.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="691.3" y="286.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.06%)</title><rect x="688.3" y="259.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="691.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (163 samples, 3.01%)</title><rect x="689.2" y="387.0" width="35.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="692.2" y="398.0">roc..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (161 samples, 2.97%)</title><rect x="689.6" y="371.0" width="35.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="692.6" y="382.0">roc..</text>
</g>
<g>
<title>sched_yield (2 samples, 0.04%)</title><rect x="690.1" y="355.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="693.1" y="366.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (3 samples, 0.06%)</title><rect x="690.5" y="355.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="693.5" y="366.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.06%)</title><rect x="690.5" y="339.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="693.5" y="350.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (2 samples, 0.04%)</title><rect x="690.7" y="323.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="693.7" y="334.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (2 samples, 0.04%)</title><rect x="691.2" y="355.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="694.2" y="366.0"></text>
</g>
<g>
<title>_pthread_cond_wait (2 samples, 0.04%)</title><rect x="691.2" y="339.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="694.2" y="350.0"></text>
</g>
<g>
<title>xdrrec_ops (152 samples, 2.80%)</title><rect x="691.6" y="355.0" width="33.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="694.6" y="366.0">xd..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (15 samples, 0.28%)</title><rect x="724.9" y="387.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="727.9" y="398.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (10 samples, 0.18%)</title><rect x="725.5" y="371.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="728.5" y="382.0"></text>
</g>
<g>
<title>__psynch_cvsignal (10 samples, 0.18%)</title><rect x="725.5" y="355.0" width="2.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="728.5" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (66 samples, 1.22%)</title><rect x="728.1" y="387.0" width="14.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="731.1" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (66 samples, 1.22%)</title><rect x="728.1" y="371.0" width="14.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="731.1" y="382.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (52 samples, 0.96%)</title><rect x="728.8" y="355.0" width="11.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="731.8" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (44 samples, 0.81%)</title><rect x="728.8" y="339.0" width="9.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="731.8" y="350.0"></text>
</g>
<g>
<title>_pthread_cond_wait (8 samples, 0.15%)</title><rect x="738.4" y="339.0" width="1.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="741.4" y="350.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (7 samples, 0.13%)</title><rect x="738.6" y="323.0" width="1.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="741.6" y="334.0"></text>
</g>
<g>
<title>__psynch_mutexwait (7 samples, 0.13%)</title><rect x="738.6" y="307.0" width="1.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="741.6" y="318.0"></text>
</g>
<g>
<title>xdrrec_ops (10 samples, 0.18%)</title><rect x="740.3" y="355.0" width="2.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="743.3" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (15 samples, 0.28%)</title><rect x="742.5" y="387.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="745.5" y="398.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (12 samples, 0.22%)</title><rect x="742.9" y="371.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="745.9" y="382.0"></text>
</g>
<g>
<title>__psynch_cvsignal (12 samples, 0.22%)</title><rect x="742.9" y="355.0" width="2.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="745.9" y="366.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (2 samples, 0.04%)</title><rect x="746.0" y="387.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="749.0" y="398.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.06%)</title><rect x="746.4" y="387.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="749.4" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (4 samples, 0.07%)</title><rect x="747.9" y="419.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="750.9" y="430.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (2 samples, 0.04%)</title><rect x="748.4" y="403.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="751.4" y="414.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (3 samples, 0.06%)</title><rect x="748.8" y="419.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="751.8" y="430.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (2 samples, 0.04%)</title><rect x="748.8" y="403.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="751.8" y="414.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="748.8" y="387.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="751.8" y="398.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="748.8" y="371.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="751.8" y="382.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.04%)</title><rect x="748.8" y="355.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="751.8" y="366.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="748.8" y="339.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="751.8" y="350.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="748.8" y="323.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="751.8" y="334.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (2 samples, 0.04%)</title><rect x="748.8" y="307.0" width="0.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="751.8" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (2 samples, 0.04%)</title><rect x="749.5" y="419.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="752.5" y="430.0"></text>
</g>
<g>
<title>free (2 samples, 0.04%)</title><rect x="749.5" y="403.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="752.5" y="414.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="750.3" y="467.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="753.3" y="478.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.06%)</title><rect x="750.3" y="451.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="753.3" y="462.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.04%)</title><rect x="750.5" y="435.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="753.5" y="446.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="750.5" y="419.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="753.5" y="430.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="750.5" y="403.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="753.5" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.shiftByte (2 samples, 0.04%)</title><rect x="751.0" y="531.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="754.0" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.toArray (2 samples, 0.04%)</title><rect x="751.0" y="515.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="754.0" y="526.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (3 samples, 0.06%)</title><rect x="751.6" y="659.0" width="0.7" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="754.6" y="670.0"></text>
</g>
<g>
<title>[worker tid=37123] (968 samples, 17.85%)</title><rect x="752.3" y="675.0" width="210.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="755.3" y="686.0">[worker tid=37123]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (7 samples, 0.13%)</title><rect x="752.3" y="659.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="755.3" y="670.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (6 samples, 0.11%)</title><rect x="752.3" y="643.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="755.3" y="654.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (2 samples, 0.04%)</title><rect x="752.3" y="627.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="755.3" y="638.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (4 samples, 0.07%)</title><rect x="752.7" y="627.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="755.7" y="638.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (3 samples, 0.06%)</title><rect x="752.9" y="611.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="755.9" y="622.0"></text>
</g>
<g>
<title>java/lang/Thread.run (959 samples, 17.68%)</title><rect x="754.2" y="659.0" width="208.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="757.2" y="670.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (959 samples, 17.68%)</title><rect x="754.2" y="643.0" width="208.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="757.2" y="654.0">java/util/concurrent/Thread..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (959 samples, 17.68%)</title><rect x="754.2" y="627.0" width="208.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="757.2" y="638.0">java/util/concurrent/Thread..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (267 samples, 4.92%)</title><rect x="755.3" y="611.0" width="58.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="758.3" y="622.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (266 samples, 4.90%)</title><rect x="755.5" y="595.0" width="57.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="758.5" y="606.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (228 samples, 4.20%)</title><rect x="755.5" y="579.0" width="49.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="758.5" y="590.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (3 samples, 0.06%)</title><rect x="755.8" y="563.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="758.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (2 samples, 0.04%)</title><rect x="756.0" y="547.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="759.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.04%)</title><rect x="756.4" y="563.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="759.4" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.04%)</title><rect x="756.4" y="547.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="759.4" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (222 samples, 4.09%)</title><rect x="756.9" y="563.0" width="48.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="759.9" y="574.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (222 samples, 4.09%)</title><rect x="756.9" y="547.0" width="48.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="759.9" y="558.0">jdk/..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (215 samples, 3.96%)</title><rect x="758.4" y="531.0" width="46.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="761.4" y="542.0">Unsa..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.04%)</title><rect x="758.6" y="515.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="761.6" y="526.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (206 samples, 3.80%)</title><rect x="759.0" y="515.0" width="44.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="762.0" y="526.0">Park..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.04%)</title><rect x="759.5" y="499.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="762.5" y="510.0"></text>
</g>
<g>
<title>__psynch_cvwait (198 samples, 3.65%)</title><rect x="759.9" y="499.0" width="43.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="762.9" y="510.0">__ps..</text>
</g>
<g>
<title>_pthread_cond_wait (3 samples, 0.06%)</title><rect x="803.0" y="499.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="806.0" y="510.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.04%)</title><rect x="803.8" y="515.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="806.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (7 samples, 0.13%)</title><rect x="805.4" y="579.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="808.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (7 samples, 0.13%)</title><rect x="805.4" y="563.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="808.4" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (5 samples, 0.09%)</title><rect x="805.6" y="547.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="808.6" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (4 samples, 0.07%)</title><rect x="805.6" y="531.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="808.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (4 samples, 0.07%)</title><rect x="805.6" y="515.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="808.6" y="526.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (4 samples, 0.07%)</title><rect x="805.6" y="499.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="808.6" y="510.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (4 samples, 0.07%)</title><rect x="805.6" y="483.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="808.6" y="494.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 0.06%)</title><rect x="805.8" y="467.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="808.8" y="478.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.06%)</title><rect x="805.8" y="451.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="808.8" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (30 samples, 0.55%)</title><rect x="806.9" y="579.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="809.9" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (30 samples, 0.55%)</title><rect x="806.9" y="563.0" width="6.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="809.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (30 samples, 0.55%)</title><rect x="806.9" y="547.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="809.9" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (30 samples, 0.55%)</title><rect x="806.9" y="531.0" width="6.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="809.9" y="542.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (30 samples, 0.55%)</title><rect x="806.9" y="515.0" width="6.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="809.9" y="526.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (29 samples, 0.53%)</title><rect x="807.1" y="499.0" width="6.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="810.1" y="510.0"></text>
</g>
<g>
<title>__psynch_cvsignal (26 samples, 0.48%)</title><rect x="807.8" y="483.0" width="5.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="810.8" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl$$Lambda$64/1131707208.run (686 samples, 12.65%)</title><rect x="813.6" y="611.0" width="149.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="816.6" y="622.0">ru/mail/polis/servi..</text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.lambda$executeAsync$3 (685 samples, 12.63%)</title><rect x="813.9" y="595.0" width="149.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="816.9" y="606.0">ru/mail/polis/servi..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (161 samples, 2.97%)</title><rect x="813.9" y="579.0" width="35.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="816.9" y="590.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (159 samples, 2.93%)</title><rect x="813.9" y="563.0" width="34.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="816.9" y="574.0">on..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (8 samples, 0.15%)</title><rect x="813.9" y="547.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="816.9" y="558.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (7 samples, 0.13%)</title><rect x="814.1" y="531.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="817.1" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.04%)</title><rect x="814.3" y="515.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="817.3" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.07%)</title><rect x="814.7" y="515.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="817.7" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.07%)</title><rect x="814.7" y="499.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="817.7" y="510.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (151 samples, 2.78%)</title><rect x="815.6" y="547.0" width="32.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="818.6" y="558.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (150 samples, 2.77%)</title><rect x="815.8" y="531.0" width="32.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="818.8" y="542.0">on..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (146 samples, 2.69%)</title><rect x="816.0" y="515.0" width="31.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="819.0" y="526.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (146 samples, 2.69%)</title><rect x="816.0" y="499.0" width="31.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="819.0" y="510.0">on..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.04%)</title><rect x="816.0" y="483.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="819.0" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (144 samples, 2.65%)</title><rect x="816.5" y="483.0" width="31.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="819.5" y="494.0">su..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.04%)</title><rect x="816.9" y="467.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="819.9" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.04%)</title><rect x="816.9" y="451.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="819.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.04%)</title><rect x="816.9" y="435.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="819.9" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (140 samples, 2.58%)</title><rect x="817.3" y="467.0" width="30.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="820.3" y="478.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (140 samples, 2.58%)</title><rect x="817.3" y="451.0" width="30.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="820.3" y="462.0">su..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (4 samples, 0.07%)</title><rect x="817.3" y="435.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="820.3" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (4 samples, 0.07%)</title><rect x="817.3" y="419.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="820.3" y="430.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (4 samples, 0.07%)</title><rect x="817.3" y="403.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="820.3" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (4 samples, 0.07%)</title><rect x="817.3" y="387.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="820.3" y="398.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (3 samples, 0.06%)</title><rect x="817.3" y="371.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="820.3" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (132 samples, 2.43%)</title><rect x="818.2" y="435.0" width="28.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="821.2" y="446.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (132 samples, 2.43%)</title><rect x="818.2" y="419.0" width="28.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="821.2" y="430.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (132 samples, 2.43%)</title><rect x="818.2" y="403.0" width="28.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="821.2" y="414.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.04%)</title><rect x="819.9" y="387.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="822.9" y="398.0"></text>
</g>
<g>
<title>write (122 samples, 2.25%)</title><rect x="820.4" y="387.0" width="26.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="823.4" y="398.0">w..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.07%)</title><rect x="846.9" y="435.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="849.9" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.04%)</title><rect x="847.4" y="419.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="850.4" y="430.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.06%)</title><rect x="847.8" y="515.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="850.8" y="526.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.04%)</title><rect x="847.8" y="499.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="850.8" y="510.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.04%)</title><rect x="847.8" y="483.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="850.8" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl$$Lambda$63/674945188.act (524 samples, 9.66%)</title><rect x="848.9" y="579.0" width="114.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="851.9" y="590.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.lambda$entity$1 (523 samples, 9.64%)</title><rect x="849.1" y="563.0" width="113.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="852.1" y="574.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (519 samples, 9.57%)</title><rect x="850.0" y="547.0" width="112.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="853.0" y="558.0">ru/mail/polis/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (514 samples, 9.48%)</title><rect x="850.0" y="531.0" width="111.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="853.0" y="542.0">org/rocksdb/R..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (514 samples, 9.48%)</title><rect x="850.0" y="515.0" width="111.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="853.0" y="526.0">org/rocksdb/R..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (512 samples, 9.44%)</title><rect x="850.4" y="499.0" width="111.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="853.4" y="510.0">Java_org_rock..</text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.04%)</title><rect x="850.6" y="483.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="853.6" y="494.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (508 samples, 9.37%)</title><rect x="851.1" y="483.0" width="110.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="854.1" y="494.0">rocksdb_put_h..</text>
</g>
<g>
<title>free_tiny (5 samples, 0.09%)</title><rect x="851.5" y="467.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="854.5" y="478.0"></text>
</g>
<g>
<title>tiny_free_no_lock (4 samples, 0.07%)</title><rect x="851.7" y="451.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="854.7" y="462.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.09%)</title><rect x="852.8" y="467.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="855.8" y="478.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.04%)</title><rect x="853.0" y="451.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="856.0" y="462.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (490 samples, 9.03%)</title><rect x="853.9" y="467.0" width="106.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="856.9" y="478.0">rocksdb::Comp..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (490 samples, 9.03%)</title><rect x="853.9" y="451.0" width="106.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="856.9" y="462.0">rocksdb::DBIm..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (490 samples, 9.03%)</title><rect x="853.9" y="435.0" width="106.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="856.9" y="446.0">rocksdb::DB::..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (475 samples, 8.76%)</title><rect x="854.3" y="419.0" width="103.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="857.3" y="430.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (473 samples, 8.72%)</title><rect x="854.5" y="403.0" width="102.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="857.5" y="414.0">rocksdb::DBI..</text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="857.6" y="387.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="860.6" y="398.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (137 samples, 2.53%)</title><rect x="858.7" y="387.0" width="29.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="861.7" y="398.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (3 samples, 0.06%)</title><rect x="858.7" y="371.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="861.7" y="382.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (132 samples, 2.43%)</title><rect x="859.3" y="371.0" width="28.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="862.3" y="382.0">ro..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (128 samples, 2.36%)</title><rect x="860.2" y="355.0" width="27.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="863.2" y="366.0">r..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (5 samples, 0.09%)</title><rect x="860.4" y="339.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="863.4" y="350.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (122 samples, 2.25%)</title><rect x="861.5" y="339.0" width="26.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="864.5" y="350.0">r..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (3 samples, 0.06%)</title><rect x="861.7" y="323.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="864.7" y="334.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="861.9" y="307.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="864.9" y="318.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (118 samples, 2.18%)</title><rect x="862.4" y="323.0" width="25.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="865.4" y="334.0">r..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (113 samples, 2.08%)</title><rect x="863.5" y="307.0" width="24.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="866.5" y="318.0">r..</text>
</g>
<g>
<title>write (112 samples, 2.06%)</title><rect x="863.7" y="291.0" width="24.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="866.7" y="302.0">w..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Clear() (2 samples, 0.04%)</title><rect x="888.0" y="371.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="891.0" y="382.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (2 samples, 0.04%)</title><rect x="888.0" y="355.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="891.0" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (33 samples, 0.61%)</title><rect x="888.9" y="387.0" width="7.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="891.9" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (33 samples, 0.61%)</title><rect x="888.9" y="371.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="891.9" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (30 samples, 0.55%)</title><rect x="889.6" y="355.0" width="6.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="892.6" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (29 samples, 0.53%)</title><rect x="889.8" y="339.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="892.8" y="350.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (25 samples, 0.46%)</title><rect x="890.4" y="323.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="893.4" y="334.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.04%)</title><rect x="890.6" y="307.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="893.6" y="318.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (21 samples, 0.39%)</title><rect x="891.3" y="307.0" width="4.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="894.3" y="318.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (5 samples, 0.09%)</title><rect x="894.6" y="291.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="897.6" y="302.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (5 samples, 0.09%)</title><rect x="894.6" y="275.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="897.6" y="286.0"></text>
</g>
<g>
<title>_platform_memcmp (4 samples, 0.07%)</title><rect x="894.8" y="259.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="897.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (22 samples, 0.41%)</title><rect x="896.1" y="387.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="899.1" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (16 samples, 0.29%)</title><rect x="897.4" y="371.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="900.4" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (15 samples, 0.28%)</title><rect x="897.6" y="355.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="900.6" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (12 samples, 0.22%)</title><rect x="898.0" y="339.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="901.0" y="350.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (9 samples, 0.17%)</title><rect x="898.5" y="323.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="901.5" y="334.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (6 samples, 0.11%)</title><rect x="899.1" y="307.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="902.1" y="318.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (5 samples, 0.09%)</title><rect x="899.4" y="291.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="902.4" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (155 samples, 2.86%)</title><rect x="900.9" y="387.0" width="33.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="903.9" y="398.0">ro..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (154 samples, 2.84%)</title><rect x="900.9" y="371.0" width="33.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="903.9" y="382.0">ro..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (2 samples, 0.04%)</title><rect x="902.0" y="355.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="905.0" y="366.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.04%)</title><rect x="902.0" y="339.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="905.0" y="350.0"></text>
</g>
<g>
<title>xdrrec_ops (147 samples, 2.71%)</title><rect x="902.4" y="355.0" width="32.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="905.4" y="366.0">xd..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (2 samples, 0.04%)</title><rect x="934.6" y="387.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="937.6" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (2 samples, 0.04%)</title><rect x="934.6" y="371.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="937.6" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (9 samples, 0.17%)</title><rect x="935.0" y="387.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="938.0" y="398.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (6 samples, 0.11%)</title><rect x="935.5" y="371.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="938.5" y="382.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.09%)</title><rect x="935.7" y="355.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="938.7" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (76 samples, 1.40%)</title><rect x="937.0" y="387.0" width="16.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="940.0" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (73 samples, 1.35%)</title><rect x="937.0" y="371.0" width="15.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="940.0" y="382.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (61 samples, 1.12%)</title><rect x="938.1" y="355.0" width="13.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="941.1" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (46 samples, 0.85%)</title><rect x="938.1" y="339.0" width="10.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="941.1" y="350.0"></text>
</g>
<g>
<title>_pthread_cond_wait (14 samples, 0.26%)</title><rect x="948.1" y="339.0" width="3.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="951.1" y="350.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (13 samples, 0.24%)</title><rect x="948.3" y="323.0" width="2.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="951.3" y="334.0"></text>
</g>
<g>
<title>__psynch_mutexwait (13 samples, 0.24%)</title><rect x="948.3" y="307.0" width="2.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="951.3" y="318.0"></text>
</g>
<g>
<title>xdrrec_ops (7 samples, 0.13%)</title><rect x="951.3" y="355.0" width="1.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="954.3" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::__1::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (2 samples, 0.04%)</title><rect x="952.9" y="371.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="955.9" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (12 samples, 0.22%)</title><rect x="953.5" y="387.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="956.5" y="398.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (8 samples, 0.15%)</title><rect x="953.5" y="371.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="956.5" y="382.0"></text>
</g>
<g>
<title>__psynch_cvsignal (8 samples, 0.15%)</title><rect x="953.5" y="355.0" width="1.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="956.5" y="366.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (3 samples, 0.06%)</title><rect x="955.5" y="371.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="958.5" y="382.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (3 samples, 0.06%)</title><rect x="955.5" y="355.0" width="0.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="958.5" y="366.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (2 samples, 0.04%)</title><rect x="955.7" y="339.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="958.7" y="350.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (2 samples, 0.04%)</title><rect x="956.8" y="387.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="959.8" y="398.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (2 samples, 0.04%)</title><rect x="956.8" y="371.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="959.8" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (6 samples, 0.11%)</title><rect x="957.7" y="419.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="960.7" y="430.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="957.9" y="403.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="960.9" y="414.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (3 samples, 0.06%)</title><rect x="958.3" y="403.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="961.3" y="414.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (3 samples, 0.06%)</title><rect x="959.0" y="419.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="962.0" y="430.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (4 samples, 0.07%)</title><rect x="959.6" y="419.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="962.6" y="430.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.04%)</title><rect x="959.8" y="403.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="962.8" y="414.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (2 samples, 0.04%)</title><rect x="960.5" y="467.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="963.5" y="478.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="960.9" y="467.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="963.9" y="478.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.06%)</title><rect x="960.9" y="451.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="963.9" y="462.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.06%)</title><rect x="960.9" y="435.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="963.9" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.toArray (5 samples, 0.09%)</title><rect x="961.8" y="531.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="964.8" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.04%)</title><rect x="961.8" y="515.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="964.8" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.04%)</title><rect x="961.8" y="499.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="964.8" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.06%)</title><rect x="962.2" y="515.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="965.2" y="526.0"></text>
</g>
<g>
<title>[worker tid=37379] (1,044 samples, 19.25%)</title><rect x="962.9" y="675.0" width="227.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="965.9" y="686.0">[worker tid=37379]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (8 samples, 0.15%)</title><rect x="963.1" y="659.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="966.1" y="670.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (8 samples, 0.15%)</title><rect x="963.1" y="643.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="966.1" y="654.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (7 samples, 0.13%)</title><rect x="963.3" y="627.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="966.3" y="638.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (4 samples, 0.07%)</title><rect x="964.0" y="611.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="967.0" y="622.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,033 samples, 19.04%)</title><rect x="965.1" y="659.0" width="224.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="968.1" y="670.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,033 samples, 19.04%)</title><rect x="965.1" y="643.0" width="224.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="968.1" y="654.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,033 samples, 19.04%)</title><rect x="965.1" y="627.0" width="224.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="968.1" y="638.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>I2C/C2I adapters (2 samples, 0.04%)</title><rect x="966.4" y="611.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="969.4" y="622.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (4 samples, 0.07%)</title><rect x="966.8" y="611.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="969.8" y="622.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (3 samples, 0.06%)</title><rect x="967.0" y="595.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="970.0" y="606.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (2 samples, 0.04%)</title><rect x="967.2" y="579.0" width="0.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="970.2" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.04%)</title><rect x="967.7" y="611.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="970.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (227 samples, 4.19%)</title><rect x="968.1" y="611.0" width="49.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="971.1" y="622.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (226 samples, 4.17%)</title><rect x="968.3" y="595.0" width="49.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="971.3" y="606.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (204 samples, 3.76%)</title><rect x="968.3" y="579.0" width="44.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="971.3" y="590.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (3 samples, 0.06%)</title><rect x="968.3" y="563.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="971.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (3 samples, 0.06%)</title><rect x="968.3" y="547.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="971.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (2 samples, 0.04%)</title><rect x="969.0" y="563.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="972.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (198 samples, 3.65%)</title><rect x="969.6" y="563.0" width="43.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="972.6" y="574.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (198 samples, 3.65%)</title><rect x="969.6" y="547.0" width="43.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="972.6" y="558.0">jdk/..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (193 samples, 3.56%)</title><rect x="970.7" y="531.0" width="42.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="973.7" y="542.0">Uns..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.04%)</title><rect x="971.1" y="515.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="974.1" y="526.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (2 samples, 0.04%)</title><rect x="971.1" y="499.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="974.1" y="510.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (178 samples, 3.28%)</title><rect x="971.8" y="515.0" width="38.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="974.8" y="526.0">Par..</text>
</g>
<g>
<title>__psynch_cvwait (169 samples, 3.12%)</title><rect x="972.4" y="499.0" width="36.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="975.4" y="510.0">__p..</text>
</g>
<g>
<title>_pthread_cond_wait (3 samples, 0.06%)</title><rect x="1009.2" y="499.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1012.2" y="510.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (2 samples, 0.04%)</title><rect x="1009.4" y="483.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1012.4" y="494.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (2 samples, 0.04%)</title><rect x="1010.5" y="515.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1013.5" y="526.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (4 samples, 0.07%)</title><rect x="1011.0" y="515.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1014.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (3 samples, 0.06%)</title><rect x="1012.7" y="579.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1015.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (3 samples, 0.06%)</title><rect x="1012.7" y="563.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1015.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (19 samples, 0.35%)</title><rect x="1013.3" y="579.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1016.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (19 samples, 0.35%)</title><rect x="1013.3" y="563.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1016.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (19 samples, 0.35%)</title><rect x="1013.3" y="547.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1016.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (19 samples, 0.35%)</title><rect x="1013.3" y="531.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1016.3" y="542.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (19 samples, 0.35%)</title><rect x="1013.3" y="515.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1016.3" y="526.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (18 samples, 0.33%)</title><rect x="1013.6" y="499.0" width="3.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1016.6" y="510.0"></text>
</g>
<g>
<title>__psynch_cvsignal (13 samples, 0.24%)</title><rect x="1014.4" y="483.0" width="2.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1017.4" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl$$Lambda$64/1131707208.run (791 samples, 14.58%)</title><rect x="1017.7" y="611.0" width="172.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1020.7" y="622.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.lambda$executeAsync$3 (791 samples, 14.58%)</title><rect x="1017.7" y="595.0" width="172.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1020.7" y="606.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (193 samples, 3.56%)</title><rect x="1017.7" y="579.0" width="42.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1020.7" y="590.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (187 samples, 3.45%)</title><rect x="1018.1" y="563.0" width="40.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1021.1" y="574.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (8 samples, 0.15%)</title><rect x="1018.1" y="547.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1021.1" y="558.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (4 samples, 0.07%)</title><rect x="1019.0" y="531.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1022.0" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.04%)</title><rect x="1019.0" y="515.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1022.0" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.04%)</title><rect x="1019.4" y="515.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1022.4" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.04%)</title><rect x="1019.4" y="499.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1022.4" y="510.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (179 samples, 3.30%)</title><rect x="1019.9" y="547.0" width="38.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1022.9" y="558.0">one..</text>
</g>
<g>
<title>one/nio/net/Session.write (178 samples, 3.28%)</title><rect x="1020.1" y="531.0" width="38.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1023.1" y="542.0">one..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (173 samples, 3.19%)</title><rect x="1020.5" y="515.0" width="37.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1023.5" y="526.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (173 samples, 3.19%)</title><rect x="1020.5" y="499.0" width="37.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1023.5" y="510.0">one..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (172 samples, 3.17%)</title><rect x="1020.7" y="483.0" width="37.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1023.7" y="494.0">sun..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.04%)</title><rect x="1020.7" y="467.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1023.7" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (169 samples, 3.12%)</title><rect x="1021.4" y="467.0" width="36.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1024.4" y="478.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (169 samples, 3.12%)</title><rect x="1021.4" y="451.0" width="36.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1024.4" y="462.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (164 samples, 3.02%)</title><rect x="1021.8" y="435.0" width="35.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1024.8" y="446.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (164 samples, 3.02%)</title><rect x="1021.8" y="419.0" width="35.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1024.8" y="430.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (164 samples, 3.02%)</title><rect x="1021.8" y="403.0" width="35.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1024.8" y="414.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (4 samples, 0.07%)</title><rect x="1023.8" y="387.0" width="0.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1026.8" y="398.0"></text>
</g>
<g>
<title>write (150 samples, 2.77%)</title><rect x="1024.9" y="387.0" width="32.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1027.9" y="398.0">wr..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.06%)</title><rect x="1057.5" y="435.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1060.5" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.04%)</title><rect x="1057.5" y="419.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1060.5" y="430.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.06%)</title><rect x="1058.2" y="515.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1061.2" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.06%)</title><rect x="1058.8" y="563.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1061.8" y="574.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.04%)</title><rect x="1059.0" y="547.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1062.0" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.04%)</title><rect x="1059.0" y="531.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1062.0" y="542.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.04%)</title><rect x="1059.0" y="515.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1062.0" y="526.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.04%)</title><rect x="1059.0" y="499.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1062.0" y="510.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (2 samples, 0.04%)</title><rect x="1059.0" y="483.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1062.0" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl$$Lambda$63/674945188.act (598 samples, 11.03%)</title><rect x="1059.7" y="579.0" width="130.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1062.7" y="590.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.lambda$entity$1 (598 samples, 11.03%)</title><rect x="1059.7" y="563.0" width="130.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1062.7" y="574.0">ru/mail/polis/se..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.06%)</title><rect x="1059.7" y="547.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1062.7" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.06%)</title><rect x="1059.7" y="531.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1062.7" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="1059.7" y="515.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1062.7" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="1059.7" y="499.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1062.7" y="510.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1059.7" y="483.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1062.7" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (594 samples, 10.95%)</title><rect x="1060.6" y="547.0" width="129.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1063.6" y="558.0">ru/mail/polis/da..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (590 samples, 10.88%)</title><rect x="1060.8" y="531.0" width="128.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1063.8" y="542.0">org/rocksdb/Rock..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (590 samples, 10.88%)</title><rect x="1060.8" y="515.0" width="128.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1063.8" y="526.0">org/rocksdb/Rock..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (583 samples, 10.75%)</title><rect x="1062.3" y="499.0" width="126.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1065.3" y="510.0">Java_org_rocksdb..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (580 samples, 10.69%)</title><rect x="1062.7" y="483.0" width="126.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1065.7" y="494.0">rocksdb_put_help..</text>
</g>
<g>
<title>free (3 samples, 0.06%)</title><rect x="1063.2" y="467.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1066.2" y="478.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.04%)</title><rect x="1063.4" y="451.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1066.4" y="462.0"></text>
</g>
<g>
<title>free_tiny (6 samples, 0.11%)</title><rect x="1063.8" y="467.0" width="1.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1066.8" y="478.0"></text>
</g>
<g>
<title>tiny_free_no_lock (2 samples, 0.04%)</title><rect x="1064.7" y="451.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1067.7" y="462.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.06%)</title><rect x="1065.1" y="467.0" width="0.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1068.1" y="478.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.04%)</title><rect x="1065.8" y="467.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1068.8" y="478.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (563 samples, 10.38%)</title><rect x="1066.2" y="467.0" width="122.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1069.2" y="478.0">rocksdb::Compac..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (562 samples, 10.36%)</title><rect x="1066.4" y="451.0" width="122.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1069.4" y="462.0">rocksdb::DBImpl..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (558 samples, 10.29%)</title><rect x="1066.9" y="435.0" width="121.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1069.9" y="446.0">rocksdb::DB::Pu..</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (2 samples, 0.04%)</title><rect x="1066.9" y="419.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1069.9" y="430.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (545 samples, 10.05%)</title><rect x="1067.5" y="419.0" width="118.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1070.5" y="430.0">rocksdb::DBImp..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (542 samples, 9.99%)</title><rect x="1067.7" y="403.0" width="117.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1070.7" y="414.0">rocksdb::DBImp..</text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="1071.2" y="387.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1074.2" y="398.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (3 samples, 0.06%)</title><rect x="1071.7" y="387.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1074.7" y="398.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (168 samples, 3.10%)</title><rect x="1072.3" y="387.0" width="36.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1075.3" y="398.0">roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (2 samples, 0.04%)</title><rect x="1072.5" y="371.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1075.5" y="382.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (162 samples, 2.99%)</title><rect x="1073.0" y="371.0" width="35.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1076.0" y="382.0">roc..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (160 samples, 2.95%)</title><rect x="1073.4" y="355.0" width="34.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1076.4" y="366.0">ro..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (3 samples, 0.06%)</title><rect x="1073.6" y="339.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1076.6" y="350.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (156 samples, 2.88%)</title><rect x="1074.3" y="339.0" width="33.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1077.3" y="350.0">ro..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (150 samples, 2.77%)</title><rect x="1075.6" y="323.0" width="32.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1078.6" y="334.0">ro..</text>
</g>
<g>
<title>_dispatch_queue_attrs (3 samples, 0.06%)</title><rect x="1075.6" y="307.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1078.6" y="318.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (147 samples, 2.71%)</title><rect x="1076.2" y="307.0" width="32.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1079.2" y="318.0">ro..</text>
</g>
<g>
<title>write (146 samples, 2.69%)</title><rect x="1076.4" y="291.0" width="31.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1079.4" y="302.0">wr..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Clear() (2 samples, 0.04%)</title><rect x="1108.2" y="371.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1111.2" y="382.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (2 samples, 0.04%)</title><rect x="1108.2" y="355.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1111.2" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (37 samples, 0.68%)</title><rect x="1109.3" y="387.0" width="8.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1112.3" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (31 samples, 0.57%)</title><rect x="1110.6" y="371.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1113.6" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (29 samples, 0.53%)</title><rect x="1111.0" y="355.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1114.0" y="366.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (2 samples, 0.04%)</title><rect x="1111.0" y="339.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1114.0" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (27 samples, 0.50%)</title><rect x="1111.5" y="339.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1114.5" y="350.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (26 samples, 0.48%)</title><rect x="1111.7" y="323.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1114.7" y="334.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (21 samples, 0.39%)</title><rect x="1112.8" y="307.0" width="4.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1115.8" y="318.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.04%)</title><rect x="1116.0" y="291.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1119.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (4 samples, 0.07%)</title><rect x="1116.5" y="291.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1119.5" y="302.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.04%)</title><rect x="1116.7" y="275.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1119.7" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (22 samples, 0.41%)</title><rect x="1117.3" y="387.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1120.3" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (18 samples, 0.33%)</title><rect x="1118.0" y="371.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.0" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (18 samples, 0.33%)</title><rect x="1118.0" y="355.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1121.0" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (16 samples, 0.29%)</title><rect x="1118.4" y="339.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1121.4" y="350.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (11 samples, 0.20%)</title><rect x="1118.4" y="323.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1121.4" y="334.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (11 samples, 0.20%)</title><rect x="1118.4" y="307.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1121.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (9 samples, 0.17%)</title><rect x="1118.9" y="291.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (2 samples, 0.04%)</title><rect x="1119.1" y="275.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1122.1" y="286.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (5 samples, 0.09%)</title><rect x="1119.5" y="275.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1122.5" y="286.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.04%)</title><rect x="1120.2" y="259.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1123.2" y="270.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="1121.0" y="323.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1124.0" y="334.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.07%)</title><rect x="1121.0" y="307.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1124.0" y="318.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.06%)</title><rect x="1121.0" y="291.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1124.0" y="302.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.06%)</title><rect x="1121.0" y="275.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1124.0" y="286.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.06%)</title><rect x="1121.0" y="259.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1124.0" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (143 samples, 2.64%)</title><rect x="1122.1" y="387.0" width="31.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.1" y="398.0">ro..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (143 samples, 2.64%)</title><rect x="1122.1" y="371.0" width="31.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1125.1" y="382.0">ro..</text>
</g>
<g>
<title>xdrrec_ops (140 samples, 2.58%)</title><rect x="1122.8" y="355.0" width="30.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1125.8" y="366.0">xd..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (2 samples, 0.04%)</title><rect x="1153.5" y="387.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.5" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (2 samples, 0.04%)</title><rect x="1153.5" y="371.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.5" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (18 samples, 0.33%)</title><rect x="1153.9" y="387.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.9" y="398.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (7 samples, 0.13%)</title><rect x="1154.8" y="371.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.8" y="382.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.13%)</title><rect x="1154.8" y="355.0" width="1.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1157.8" y="366.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (6 samples, 0.11%)</title><rect x="1156.3" y="371.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1159.3" y="382.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (6 samples, 0.11%)</title><rect x="1156.3" y="355.0" width="1.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1159.3" y="366.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (6 samples, 0.11%)</title><rect x="1156.3" y="339.0" width="1.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1159.3" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (98 samples, 1.81%)</title><rect x="1157.8" y="387.0" width="21.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.8" y="398.0">r..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (97 samples, 1.79%)</title><rect x="1157.8" y="371.0" width="21.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.8" y="382.0">r..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (77 samples, 1.42%)</title><rect x="1159.1" y="355.0" width="16.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.1" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (67 samples, 1.24%)</title><rect x="1159.1" y="339.0" width="14.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1162.1" y="350.0"></text>
</g>
<g>
<title>_pthread_cond_wait (8 samples, 0.15%)</title><rect x="1173.7" y="339.0" width="1.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1176.7" y="350.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (7 samples, 0.13%)</title><rect x="1173.9" y="323.0" width="1.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1176.9" y="334.0"></text>
</g>
<g>
<title>__psynch_mutexwait (7 samples, 0.13%)</title><rect x="1173.9" y="307.0" width="1.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1176.9" y="318.0"></text>
</g>
<g>
<title>_pthread_testcancel (2 samples, 0.04%)</title><rect x="1175.4" y="339.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1178.4" y="350.0"></text>
</g>
<g>
<title>xdrrec_ops (13 samples, 0.24%)</title><rect x="1176.1" y="355.0" width="2.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1179.1" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (28 samples, 0.52%)</title><rect x="1179.1" y="387.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.1" y="398.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (23 samples, 0.42%)</title><rect x="1179.3" y="371.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.3" y="382.0"></text>
</g>
<g>
<title>__psynch_cvsignal (20 samples, 0.37%)</title><rect x="1179.3" y="355.0" width="4.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1182.3" y="366.0"></text>
</g>
<g>
<title>pthread_cond_signal (3 samples, 0.06%)</title><rect x="1183.7" y="355.0" width="0.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1186.7" y="366.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (2 samples, 0.04%)</title><rect x="1183.9" y="339.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1186.9" y="350.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (4 samples, 0.07%)</title><rect x="1184.3" y="371.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.3" y="382.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (4 samples, 0.07%)</title><rect x="1184.3" y="355.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1187.3" y="366.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (4 samples, 0.07%)</title><rect x="1184.3" y="339.0" width="0.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1187.3" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="1186.3" y="419.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.3" y="430.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="1186.3" y="403.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.3" y="414.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (2 samples, 0.04%)</title><rect x="1186.3" y="387.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.3" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (4 samples, 0.07%)</title><rect x="1186.7" y="419.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.7" y="430.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (3 samples, 0.06%)</title><rect x="1187.6" y="419.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.6" y="430.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.04%)</title><rect x="1187.8" y="403.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1190.8" y="414.0"></text>
</g>
<g>
<title>__ulock_wait (2 samples, 0.04%)</title><rect x="1187.8" y="387.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1190.8" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.shiftByte (2 samples, 0.04%)</title><rect x="1189.1" y="531.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1192.1" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.toArray (2 samples, 0.04%)</title><rect x="1189.1" y="515.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1192.1" y="526.0"></text>
</g>
</g>
</svg>
