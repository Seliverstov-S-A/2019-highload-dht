<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="725"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="725"> </text>
<g id="frames">
<g>
<title>all (5,213 samples, 100.00%)</title><rect x="10.0" y="691.0" width="1180.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="13.0" y="702.0">all</text>
</g>
<g>
<title>[NIO Selector #0 tid=23811] (1,463 samples, 28.06%)</title><rect x="10.0" y="675.0" width="331.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="13.0" y="686.0">[NIO Selector #0 tid=23811]</text>
</g>
<g>
<title>[not_walkable_Java] (14 samples, 0.27%)</title><rect x="10.2" y="659.0" width="3.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="13.2" y="670.0"></text>
</g>
<g>
<title>SharedRuntime::fixup_callers_callsite(Method*, unsigned char*) (5 samples, 0.10%)</title><rect x="12.0" y="643.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="15.0" y="654.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.04%)</title><rect x="12.3" y="627.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="15.3" y="638.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.04%)</title><rect x="12.7" y="627.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="15.7" y="638.0"></text>
</g>
<g>
<title>[unknown_Java] (13 samples, 0.25%)</title><rect x="13.4" y="659.0" width="2.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="16.4" y="670.0"></text>
</g>
<g>
<title>SharedRuntime::fixup_callers_callsite(Method*, unsigned char*) (10 samples, 0.19%)</title><rect x="14.1" y="643.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="17.1" y="654.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (8 samples, 0.15%)</title><rect x="14.1" y="627.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="17.1" y="638.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (4 samples, 0.08%)</title><rect x="14.1" y="611.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="17.1" y="622.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (3 samples, 0.06%)</title><rect x="15.0" y="611.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="18.0" y="622.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (3 samples, 0.06%)</title><rect x="15.0" y="595.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="18.0" y="606.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,431 samples, 27.45%)</title><rect x="16.3" y="659.0" width="324.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.3" y="670.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (310 samples, 5.95%)</title><rect x="17.0" y="643.0" width="70.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.0" y="654.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (3 samples, 0.06%)</title><rect x="17.2" y="627.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="20.2" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (306 samples, 5.87%)</title><rect x="17.9" y="627.0" width="69.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="20.9" y="638.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (306 samples, 5.87%)</title><rect x="17.9" y="611.0" width="69.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="20.9" y="622.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (304 samples, 5.83%)</title><rect x="18.4" y="595.0" width="68.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.4" y="606.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (282 samples, 5.41%)</title><rect x="18.8" y="579.0" width="63.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.8" y="590.0">sun/nio..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (6 samples, 0.12%)</title><rect x="21.3" y="563.0" width="1.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="24.3" y="574.0"></text>
</g>
<g>
<title>kevent (265 samples, 5.08%)</title><rect x="22.7" y="563.0" width="60.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="25.7" y="574.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (7 samples, 0.13%)</title><rect x="82.7" y="579.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="85.7" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (4 samples, 0.08%)</title><rect x="83.3" y="563.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="86.3" y="574.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.04%)</title><rect x="83.3" y="547.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="86.3" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.04%)</title><rect x="83.3" y="531.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="86.3" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.04%)</title><rect x="83.3" y="515.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="86.3" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.04%)</title><rect x="83.3" y="499.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="86.3" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (4 samples, 0.08%)</title><rect x="84.2" y="579.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="87.2" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (2 samples, 0.04%)</title><rect x="84.7" y="563.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="87.7" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (6 samples, 0.12%)</title><rect x="85.2" y="579.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="88.2" y="590.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (6 samples, 0.12%)</title><rect x="85.2" y="563.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="88.2" y="574.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (6 samples, 0.12%)</title><rect x="85.2" y="547.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="88.2" y="558.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (6 samples, 0.12%)</title><rect x="85.2" y="531.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="88.2" y="542.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (6 samples, 0.12%)</title><rect x="85.2" y="515.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="88.2" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.04%)</title><rect x="86.7" y="579.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="89.7" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,118 samples, 21.45%)</title><rect x="87.2" y="643.0" width="253.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="90.2" y="654.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,116 samples, 21.41%)</title><rect x="87.4" y="627.0" width="252.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="90.4" y="638.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,060 samples, 20.33%)</title><rect x="88.1" y="611.0" width="239.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="91.1" y="622.0">one/nio/http/HttpSession.process..</text>
</g>
<g>
<title>I2C/C2I adapters (8 samples, 0.15%)</title><rect x="116.6" y="595.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="119.6" y="606.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (3 samples, 0.06%)</title><rect x="118.4" y="595.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="121.4" y="606.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (3 samples, 0.06%)</title><rect x="118.4" y="579.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="121.4" y="590.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (2 samples, 0.04%)</title><rect x="118.7" y="563.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="121.7" y="574.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (899 samples, 17.25%)</title><rect x="119.3" y="595.0" width="203.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="122.3" y="606.0">one/nio/http/HttpSession.ha..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (897 samples, 17.21%)</title><rect x="119.8" y="579.0" width="203.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="122.8" y="590.0">one/nio/http/HttpServer.han..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (893 samples, 17.13%)</title><rect x="120.0" y="563.0" width="202.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="123.0" y="574.0">RequestHandler1_entity.han..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (204 samples, 3.91%)</title><rect x="120.5" y="547.0" width="46.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="123.5" y="558.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (201 samples, 3.86%)</title><rect x="120.7" y="531.0" width="45.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="123.7" y="542.0">one/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (7 samples, 0.13%)</title><rect x="120.7" y="515.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="123.7" y="526.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (5 samples, 0.10%)</title><rect x="121.1" y="499.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="124.1" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.06%)</title><rect x="121.6" y="483.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="124.6" y="494.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (194 samples, 3.72%)</title><rect x="122.3" y="515.0" width="43.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="125.3" y="526.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session.write (194 samples, 3.72%)</title><rect x="122.3" y="499.0" width="43.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="125.3" y="510.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (185 samples, 3.55%)</title><rect x="122.7" y="483.0" width="41.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="125.7" y="494.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (184 samples, 3.53%)</title><rect x="123.0" y="467.0" width="41.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="126.0" y="478.0">one..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.08%)</title><rect x="123.0" y="451.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="126.0" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="123.2" y="435.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="126.2" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="123.2" y="419.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="126.2" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (180 samples, 3.45%)</title><rect x="123.9" y="451.0" width="40.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="126.9" y="462.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (180 samples, 3.45%)</title><rect x="123.9" y="435.0" width="40.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="126.9" y="446.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (180 samples, 3.45%)</title><rect x="123.9" y="419.0" width="40.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="126.9" y="430.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (169 samples, 3.24%)</title><rect x="124.3" y="403.0" width="38.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="127.3" y="414.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (169 samples, 3.24%)</title><rect x="124.3" y="387.0" width="38.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="127.3" y="398.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (169 samples, 3.24%)</title><rect x="124.3" y="371.0" width="38.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="127.3" y="382.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (5 samples, 0.10%)</title><rect x="125.2" y="355.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="128.2" y="366.0"></text>
</g>
<g>
<title>write (159 samples, 3.05%)</title><rect x="126.6" y="355.0" width="36.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="129.6" y="366.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (9 samples, 0.17%)</title><rect x="162.6" y="403.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="165.6" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.06%)</title><rect x="162.8" y="387.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="165.8" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.04%)</title><rect x="163.0" y="371.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="166.0" y="382.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="163.0" y="355.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="166.0" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (5 samples, 0.10%)</title><rect x="163.5" y="387.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="166.5" y="398.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.13%)</title><rect x="164.6" y="483.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="167.6" y="494.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.10%)</title><rect x="164.6" y="467.0" width="1.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="167.6" y="478.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (4 samples, 0.08%)</title><rect x="164.8" y="451.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="167.8" y="462.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.04%)</title><rect x="165.7" y="467.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="168.7" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.04%)</title><rect x="166.2" y="531.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="169.2" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (5 samples, 0.10%)</title><rect x="166.6" y="547.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="169.6" y="558.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.06%)</title><rect x="166.6" y="531.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="169.6" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.04%)</title><rect x="166.9" y="515.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="169.9" y="526.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.04%)</title><rect x="166.9" y="499.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="169.9" y="510.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (2 samples, 0.04%)</title><rect x="166.9" y="483.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="169.9" y="494.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.04%)</title><rect x="167.3" y="531.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="170.3" y="542.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.04%)</title><rect x="167.3" y="515.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="170.3" y="526.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.04%)</title><rect x="167.3" y="499.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="170.3" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.entity (682 samples, 13.08%)</title><rect x="167.8" y="547.0" width="154.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="170.8" y="558.0">ru/mail/polis/servic..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.04%)</title><rect x="168.5" y="531.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="171.5" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.04%)</title><rect x="168.5" y="515.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="171.5" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="168.5" y="499.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="171.5" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="168.5" y="483.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="171.5" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="168.5" y="467.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="171.5" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (677 samples, 12.99%)</title><rect x="168.9" y="531.0" width="153.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="171.9" y="542.0">ru/mail/polis/dao/D..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (670 samples, 12.85%)</title><rect x="169.1" y="515.0" width="151.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="172.1" y="526.0">org/rocksdb/RocksDB..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (670 samples, 12.85%)</title><rect x="169.1" y="499.0" width="151.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="172.1" y="510.0">org/rocksdb/RocksDB..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (668 samples, 12.81%)</title><rect x="169.6" y="483.0" width="151.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="172.6" y="494.0">Java_org_rocksdb_Ro..</text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.04%)</title><rect x="170.3" y="467.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="173.3" y="478.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (660 samples, 12.66%)</title><rect x="170.7" y="467.0" width="149.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="173.7" y="478.0">rocksdb_put_helper(..</text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.04%)</title><rect x="171.4" y="451.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="174.4" y="462.0"></text>
</g>
<g>
<title>free (2 samples, 0.04%)</title><rect x="172.1" y="451.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="175.1" y="462.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (5 samples, 0.10%)</title><rect x="172.8" y="451.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="175.8" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.04%)</title><rect x="173.4" y="435.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="176.4" y="446.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (14 samples, 0.27%)</title><rect x="173.9" y="451.0" width="3.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="176.9" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (6 samples, 0.12%)</title><rect x="174.8" y="435.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="177.8" y="446.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.04%)</title><rect x="175.0" y="419.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="178.0" y="430.0"></text>
</g>
<g>
<title>os::is_MP() (2 samples, 0.04%)</title><rect x="175.0" y="403.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="178.0" y="414.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.04%)</title><rect x="175.5" y="419.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="178.5" y="430.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.06%)</title><rect x="176.4" y="435.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="179.4" y="446.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (623 samples, 11.95%)</title><rect x="177.3" y="451.0" width="141.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="180.3" y="462.0">rocksdb::Compacted..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (622 samples, 11.93%)</title><rect x="177.5" y="435.0" width="140.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="180.5" y="446.0">rocksdb::DBImpl::P..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (619 samples, 11.87%)</title><rect x="177.7" y="419.0" width="140.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="180.7" y="430.0">rocksdb::DB::Put(r..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (595 samples, 11.41%)</title><rect x="178.4" y="403.0" width="134.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="181.4" y="414.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (588 samples, 11.28%)</title><rect x="179.1" y="387.0" width="133.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="182.1" y="398.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (180 samples, 3.45%)</title><rect x="183.2" y="371.0" width="40.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="186.2" y="382.0">roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (175 samples, 3.36%)</title><rect x="183.6" y="355.0" width="39.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="186.6" y="366.0">roc..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (172 samples, 3.30%)</title><rect x="184.3" y="339.0" width="38.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="187.3" y="350.0">roc..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (7 samples, 0.13%)</title><rect x="184.3" y="323.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="187.3" y="334.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (165 samples, 3.17%)</title><rect x="185.9" y="323.0" width="37.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="188.9" y="334.0">roc..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (5 samples, 0.10%)</title><rect x="186.8" y="307.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="189.8" y="318.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="187.2" y="291.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="190.2" y="302.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (156 samples, 2.99%)</title><rect x="187.9" y="307.0" width="35.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="190.9" y="318.0">roc..</text>
</g>
<g>
<title>rocksdb::PosixWritableFile::GetFileSize() (2 samples, 0.04%)</title><rect x="188.1" y="291.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="191.1" y="302.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (153 samples, 2.93%)</title><rect x="188.6" y="291.0" width="34.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="191.6" y="302.0">ro..</text>
</g>
<g>
<title>write (152 samples, 2.92%)</title><rect x="188.8" y="275.0" width="34.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="191.8" y="286.0">wr..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Clear() (2 samples, 0.04%)</title><rect x="223.2" y="355.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="226.2" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (43 samples, 0.82%)</title><rect x="224.4" y="371.0" width="9.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="227.4" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (41 samples, 0.79%)</title><rect x="224.8" y="355.0" width="9.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="227.8" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (40 samples, 0.77%)</title><rect x="225.0" y="339.0" width="9.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="228.0" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (37 samples, 0.71%)</title><rect x="225.7" y="323.0" width="8.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="228.7" y="334.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (30 samples, 0.58%)</title><rect x="226.6" y="307.0" width="6.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="229.6" y="318.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.04%)</title><rect x="227.3" y="291.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="230.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (24 samples, 0.46%)</title><rect x="228.0" y="291.0" width="5.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="231.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (10 samples, 0.19%)</title><rect x="230.9" y="275.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="233.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (5 samples, 0.10%)</title><rect x="231.6" y="259.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="234.6" y="270.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.04%)</title><rect x="232.3" y="243.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="235.3" y="254.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.04%)</title><rect x="232.7" y="259.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="235.7" y="270.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.04%)</title><rect x="233.4" y="307.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="236.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (30 samples, 0.58%)</title><rect x="234.1" y="371.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="237.1" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (23 samples, 0.44%)</title><rect x="235.5" y="355.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="238.5" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (20 samples, 0.38%)</title><rect x="236.1" y="339.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="239.1" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (19 samples, 0.36%)</title><rect x="236.1" y="323.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="239.1" y="334.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (16 samples, 0.31%)</title><rect x="236.1" y="307.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="239.1" y="318.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (15 samples, 0.29%)</title><rect x="236.4" y="291.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="239.4" y="302.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (15 samples, 0.29%)</title><rect x="236.4" y="275.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="239.4" y="286.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (7 samples, 0.13%)</title><rect x="238.2" y="259.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="241.2" y="270.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.06%)</title><rect x="238.8" y="243.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="241.8" y="254.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.04%)</title><rect x="239.1" y="227.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="242.1" y="238.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="239.8" y="307.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="242.8" y="318.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.06%)</title><rect x="239.8" y="291.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="242.8" y="302.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.06%)</title><rect x="239.8" y="275.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="242.8" y="286.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.06%)</title><rect x="239.8" y="259.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="242.8" y="270.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.06%)</title><rect x="239.8" y="243.0" width="0.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="242.8" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (121 samples, 2.32%)</title><rect x="241.1" y="371.0" width="27.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="244.1" y="382.0">r..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (121 samples, 2.32%)</title><rect x="241.1" y="355.0" width="27.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="244.1" y="366.0">r..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (2 samples, 0.04%)</title><rect x="242.0" y="339.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="245.0" y="350.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.04%)</title><rect x="242.0" y="323.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="245.0" y="334.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (2 samples, 0.04%)</title><rect x="242.0" y="307.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="245.0" y="318.0"></text>
</g>
<g>
<title>xdrrec_ops (115 samples, 2.21%)</title><rect x="242.5" y="339.0" width="26.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="245.5" y="350.0">x..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (2 samples, 0.04%)</title><rect x="268.5" y="371.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="271.5" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (2 samples, 0.04%)</title><rect x="268.5" y="355.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="271.5" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (20 samples, 0.38%)</title><rect x="269.0" y="371.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="272.0" y="382.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (11 samples, 0.21%)</title><rect x="270.1" y="355.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="273.1" y="366.0"></text>
</g>
<g>
<title>__psynch_cvsignal (11 samples, 0.21%)</title><rect x="270.1" y="339.0" width="2.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="273.1" y="350.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (3 samples, 0.06%)</title><rect x="272.8" y="355.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="275.8" y="366.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (3 samples, 0.06%)</title><rect x="272.8" y="339.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="275.8" y="350.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (3 samples, 0.06%)</title><rect x="272.8" y="323.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="275.8" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (141 samples, 2.70%)</title><rect x="273.5" y="371.0" width="31.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="276.5" y="382.0">ro..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (139 samples, 2.67%)</title><rect x="273.5" y="355.0" width="31.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="276.5" y="366.0">ro..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (111 samples, 2.13%)</title><rect x="276.4" y="339.0" width="25.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="279.4" y="350.0">s..</text>
</g>
<g>
<title>__psynch_cvwait (96 samples, 1.84%)</title><rect x="276.4" y="323.0" width="21.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="279.4" y="334.0">_..</text>
</g>
<g>
<title>_pthread_cond_wait (13 samples, 0.25%)</title><rect x="298.2" y="323.0" width="2.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="301.2" y="334.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (11 samples, 0.21%)</title><rect x="298.6" y="307.0" width="2.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="301.6" y="318.0"></text>
</g>
<g>
<title>__psynch_mutexwait (11 samples, 0.21%)</title><rect x="298.6" y="291.0" width="2.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="301.6" y="302.0"></text>
</g>
<g>
<title>xdrrec_ops (15 samples, 0.29%)</title><rect x="301.5" y="339.0" width="3.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="304.5" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::__1::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (2 samples, 0.04%)</title><rect x="304.9" y="355.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="307.9" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (24 samples, 0.46%)</title><rect x="305.4" y="371.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="308.4" y="382.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (18 samples, 0.35%)</title><rect x="305.6" y="355.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="308.6" y="366.0"></text>
</g>
<g>
<title>__psynch_cvsignal (18 samples, 0.35%)</title><rect x="305.6" y="339.0" width="4.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="308.6" y="350.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (5 samples, 0.10%)</title><rect x="309.7" y="355.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="312.7" y="366.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (5 samples, 0.10%)</title><rect x="309.7" y="339.0" width="1.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="312.7" y="350.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (5 samples, 0.10%)</title><rect x="309.7" y="323.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="312.7" y="334.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.04%)</title><rect x="311.5" y="371.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="314.5" y="382.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.04%)</title><rect x="312.4" y="387.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="315.4" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.06%)</title><rect x="313.1" y="403.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="316.1" y="414.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="313.1" y="387.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="316.1" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (7 samples, 0.13%)</title><rect x="313.8" y="403.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="316.8" y="414.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (6 samples, 0.12%)</title><rect x="313.8" y="387.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="316.8" y="398.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (5 samples, 0.10%)</title><rect x="314.0" y="371.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="317.0" y="382.0"></text>
</g>
<g>
<title>malloc (5 samples, 0.10%)</title><rect x="314.0" y="355.0" width="1.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="317.0" y="366.0"></text>
</g>
<g>
<title>malloc_zone_malloc (5 samples, 0.10%)</title><rect x="314.0" y="339.0" width="1.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="317.0" y="350.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (5 samples, 0.10%)</title><rect x="314.0" y="323.0" width="1.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="317.0" y="334.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (5 samples, 0.10%)</title><rect x="314.0" y="307.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="317.0" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (10 samples, 0.19%)</title><rect x="315.4" y="403.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="318.4" y="414.0"></text>
</g>
<g>
<title>free (4 samples, 0.08%)</title><rect x="315.6" y="387.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="318.6" y="398.0"></text>
</g>
<g>
<title>free_tiny (4 samples, 0.08%)</title><rect x="316.5" y="387.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="319.5" y="398.0"></text>
</g>
<g>
<title>tiny_free_no_lock (3 samples, 0.06%)</title><rect x="316.7" y="371.0" width="0.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="319.7" y="382.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (7 samples, 0.13%)</title><rect x="318.5" y="451.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="321.5" y="462.0"></text>
</g>
<g>
<title>malloc (7 samples, 0.13%)</title><rect x="318.5" y="435.0" width="1.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="321.5" y="446.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.08%)</title><rect x="318.8" y="419.0" width="0.9" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="321.8" y="430.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="319.2" y="403.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="322.2" y="414.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="319.2" y="387.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="322.2" y="398.0"></text>
</g>
<g>
<title>szone_malloc (2 samples, 0.04%)</title><rect x="319.7" y="419.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="322.7" y="430.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="320.1" y="467.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="323.1" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.shiftByte (2 samples, 0.04%)</title><rect x="320.8" y="515.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="323.8" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.toArray (2 samples, 0.04%)</title><rect x="320.8" y="499.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="323.8" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.04%)</title><rect x="320.8" y="483.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="323.8" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="320.8" y="467.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="323.8" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="320.8" y="451.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="323.8" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="320.8" y="435.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="323.8" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="320.8" y="419.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="323.8" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="320.8" y="403.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="323.8" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.04%)</title><rect x="320.8" y="387.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="323.8" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.toArray (4 samples, 0.08%)</title><rect x="321.2" y="515.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="324.2" y="526.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="321.7" y="499.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="324.7" y="510.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.04%)</title><rect x="322.1" y="563.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="325.1" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.04%)</title><rect x="322.1" y="547.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="325.1" y="558.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (7 samples, 0.13%)</title><rect x="322.8" y="595.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="325.8" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.04%)</title><rect x="323.5" y="579.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="326.5" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (3 samples, 0.06%)</title><rect x="324.6" y="595.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="327.6" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.getBody (2 samples, 0.04%)</title><rect x="325.3" y="595.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="328.3" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.08%)</title><rect x="325.8" y="595.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="328.8" y="606.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.06%)</title><rect x="326.0" y="579.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="329.0" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.06%)</title><rect x="326.0" y="563.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="329.0" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.10%)</title><rect x="326.9" y="595.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="329.9" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.08%)</title><rect x="327.1" y="579.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="330.1" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (53 samples, 1.02%)</title><rect x="328.0" y="611.0" width="12.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="331.0" y="622.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (53 samples, 1.02%)</title><rect x="328.0" y="595.0" width="12.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="331.0" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.04%)</title><rect x="328.0" y="579.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="331.0" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="328.0" y="563.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="331.0" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="328.0" y="547.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="331.0" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (51 samples, 0.98%)</title><rect x="328.5" y="579.0" width="11.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="331.5" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (50 samples, 0.96%)</title><rect x="328.7" y="563.0" width="11.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="331.7" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (50 samples, 0.96%)</title><rect x="328.7" y="547.0" width="11.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="331.7" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.04%)</title><rect x="328.9" y="531.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="331.9" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.04%)</title><rect x="328.9" y="515.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="331.9" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (40 samples, 0.77%)</title><rect x="329.4" y="531.0" width="9.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="332.4" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (40 samples, 0.77%)</title><rect x="329.4" y="515.0" width="9.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="332.4" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (40 samples, 0.77%)</title><rect x="329.4" y="499.0" width="9.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="332.4" y="510.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (3 samples, 0.06%)</title><rect x="329.8" y="483.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="332.8" y="494.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.04%)</title><rect x="330.1" y="467.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="333.1" y="478.0"></text>
</g>
<g>
<title>read (35 samples, 0.67%)</title><rect x="330.5" y="483.0" width="7.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="333.5" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (7 samples, 0.13%)</title><rect x="338.4" y="531.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="341.4" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.13%)</title><rect x="338.4" y="515.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="341.4" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.08%)</title><rect x="339.1" y="499.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="342.1" y="510.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.04%)</title><rect x="340.5" y="659.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="343.5" y="670.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=24579] (1,239 samples, 23.77%)</title><rect x="341.2" y="675.0" width="280.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="344.2" y="686.0">[NIO Selector #1 tid=24579]</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,235 samples, 23.69%)</title><rect x="341.6" y="659.0" width="279.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="344.6" y="670.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (320 samples, 6.14%)</title><rect x="342.1" y="643.0" width="72.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="345.1" y="654.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.04%)</title><rect x="342.5" y="627.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="345.5" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (3 samples, 0.06%)</title><rect x="343.0" y="627.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="346.0" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (312 samples, 5.99%)</title><rect x="343.7" y="627.0" width="70.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="346.7" y="638.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (312 samples, 5.99%)</title><rect x="343.7" y="611.0" width="70.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="346.7" y="622.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (312 samples, 5.99%)</title><rect x="343.7" y="595.0" width="70.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="346.7" y="606.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (284 samples, 5.45%)</title><rect x="344.8" y="579.0" width="64.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="347.8" y="590.0">sun/nio..</text>
</g>
<g>
<title>kevent (278 samples, 5.33%)</title><rect x="346.1" y="563.0" width="63.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="349.1" y="574.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (13 samples, 0.25%)</title><rect x="409.1" y="579.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="412.1" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.04%)</title><rect x="409.3" y="563.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="412.3" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.04%)</title><rect x="409.3" y="547.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="412.3" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (8 samples, 0.15%)</title><rect x="410.2" y="563.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="413.2" y="574.0"></text>
</g>
<g>
<title>java/util/HashSet.add (7 samples, 0.13%)</title><rect x="410.2" y="547.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="413.2" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.put (7 samples, 0.13%)</title><rect x="410.2" y="531.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="413.2" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (7 samples, 0.13%)</title><rect x="410.2" y="515.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="413.2" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (5 samples, 0.10%)</title><rect x="410.7" y="499.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="413.7" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.04%)</title><rect x="412.0" y="579.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="415.0" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (5 samples, 0.10%)</title><rect x="412.5" y="579.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="415.5" y="590.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (5 samples, 0.10%)</title><rect x="412.5" y="563.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="415.5" y="574.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.04%)</title><rect x="412.5" y="547.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="415.5" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.04%)</title><rect x="413.1" y="547.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="416.1" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (3 samples, 0.06%)</title><rect x="413.6" y="579.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="416.6" y="590.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.04%)</title><rect x="413.8" y="563.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="416.8" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (2 samples, 0.04%)</title><rect x="413.8" y="547.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="416.8" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (913 samples, 17.51%)</title><rect x="414.5" y="643.0" width="206.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="417.5" y="654.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (911 samples, 17.48%)</title><rect x="414.7" y="627.0" width="206.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="417.7" y="638.0">one/nio/http/HttpSession.pr..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (856 samples, 16.42%)</title><rect x="415.4" y="611.0" width="193.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="418.4" y="622.0">one/nio/http/HttpSession...</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (837 samples, 16.06%)</title><rect x="415.4" y="595.0" width="189.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="418.4" y="606.0">one/nio/http/HttpSession...</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (836 samples, 16.04%)</title><rect x="415.6" y="579.0" width="189.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="418.6" y="590.0">one/nio/http/HttpServer.h..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (829 samples, 15.90%)</title><rect x="415.9" y="563.0" width="187.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="418.9" y="574.0">RequestHandler1_entity.h..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (161 samples, 3.09%)</title><rect x="415.9" y="547.0" width="36.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="418.9" y="558.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (157 samples, 3.01%)</title><rect x="415.9" y="531.0" width="35.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="418.9" y="542.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6 samples, 0.12%)</title><rect x="415.9" y="515.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="418.9" y="526.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (4 samples, 0.08%)</title><rect x="416.3" y="499.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="419.3" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.06%)</title><rect x="416.3" y="483.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="419.3" y="494.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (151 samples, 2.90%)</title><rect x="417.2" y="515.0" width="34.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="420.2" y="526.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (151 samples, 2.90%)</title><rect x="417.2" y="499.0" width="34.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="420.2" y="510.0">on..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (146 samples, 2.80%)</title><rect x="417.7" y="483.0" width="33.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="420.7" y="494.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (145 samples, 2.78%)</title><rect x="417.9" y="467.0" width="32.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="420.9" y="478.0">on..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (145 samples, 2.78%)</title><rect x="417.9" y="451.0" width="32.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="420.9" y="462.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (145 samples, 2.78%)</title><rect x="417.9" y="435.0" width="32.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="420.9" y="446.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (145 samples, 2.78%)</title><rect x="417.9" y="419.0" width="32.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="420.9" y="430.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (137 samples, 2.63%)</title><rect x="418.3" y="403.0" width="31.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="421.3" y="414.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (137 samples, 2.63%)</title><rect x="418.3" y="387.0" width="31.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="421.3" y="398.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (137 samples, 2.63%)</title><rect x="418.3" y="371.0" width="31.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="421.3" y="382.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (4 samples, 0.08%)</title><rect x="419.3" y="355.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="422.3" y="366.0"></text>
</g>
<g>
<title>write (129 samples, 2.47%)</title><rect x="420.2" y="355.0" width="29.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="423.2" y="366.0">wr..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (6 samples, 0.12%)</title><rect x="449.4" y="403.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="452.4" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.04%)</title><rect x="449.4" y="387.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="452.4" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (4 samples, 0.08%)</title><rect x="449.8" y="387.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="452.8" y="398.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.06%)</title><rect x="450.7" y="483.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="453.7" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.08%)</title><rect x="451.4" y="531.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="454.4" y="542.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.04%)</title><rect x="451.6" y="515.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="454.6" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.04%)</title><rect x="451.6" y="499.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="454.6" y="510.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.06%)</title><rect x="452.3" y="547.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="455.3" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.entity (665 samples, 12.76%)</title><rect x="453.0" y="547.0" width="150.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="456.0" y="558.0">ru/mail/polis/servi..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.04%)</title><rect x="453.9" y="531.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="456.9" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.04%)</title><rect x="453.9" y="515.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="456.9" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="453.9" y="499.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="456.9" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="453.9" y="483.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="456.9" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="453.9" y="467.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="456.9" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.04%)</title><rect x="454.3" y="531.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="457.3" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (657 samples, 12.60%)</title><rect x="454.8" y="531.0" width="148.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="457.8" y="542.0">ru/mail/polis/dao/D..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (650 samples, 12.47%)</title><rect x="454.8" y="515.0" width="147.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="457.8" y="526.0">org/rocksdb/RocksDB..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (650 samples, 12.47%)</title><rect x="454.8" y="499.0" width="147.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="457.8" y="510.0">org/rocksdb/RocksDB..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (644 samples, 12.35%)</title><rect x="456.2" y="483.0" width="145.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="459.2" y="494.0">Java_org_rocksdb_R..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (637 samples, 12.22%)</title><rect x="456.8" y="467.0" width="144.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="459.8" y="478.0">rocksdb_put_helper..</text>
</g>
<g>
<title>free_tiny (2 samples, 0.04%)</title><rect x="458.0" y="451.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="461.0" y="462.0"></text>
</g>
<g>
<title>tiny_free_no_lock (2 samples, 0.04%)</title><rect x="458.0" y="435.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="461.0" y="446.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.04%)</title><rect x="458.4" y="451.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="461.4" y="462.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (11 samples, 0.21%)</title><rect x="458.9" y="451.0" width="2.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="461.9" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.06%)</title><rect x="459.8" y="435.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="462.8" y="446.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.04%)</title><rect x="459.8" y="419.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="462.8" y="430.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (2 samples, 0.04%)</title><rect x="460.7" y="435.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="463.7" y="446.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (604 samples, 11.59%)</title><rect x="461.6" y="451.0" width="136.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="464.6" y="462.0">rocksdb::Compacte..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (604 samples, 11.59%)</title><rect x="461.6" y="435.0" width="136.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="464.6" y="446.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (602 samples, 11.55%)</title><rect x="461.8" y="419.0" width="136.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="464.8" y="430.0">rocksdb::DB::Put(..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (580 samples, 11.13%)</title><rect x="462.0" y="403.0" width="131.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="465.0" y="414.0">rocksdb::DBImpl:..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (579 samples, 11.11%)</title><rect x="462.0" y="387.0" width="131.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="465.0" y="398.0">rocksdb::DBImpl:..</text>
</g>
<g>
<title>_dispatch_queue_attrs (5 samples, 0.10%)</title><rect x="466.3" y="371.0" width="1.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="469.3" y="382.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (2 samples, 0.04%)</title><rect x="467.7" y="371.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="470.7" y="382.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (187 samples, 3.59%)</title><rect x="468.1" y="371.0" width="42.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="471.1" y="382.0">rock..</text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (3 samples, 0.06%)</title><rect x="468.1" y="355.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="471.1" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Append(rocksdb::WriteBatch*, rocksdb::WriteBatch const*, bool) (3 samples, 0.06%)</title><rect x="468.1" y="339.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="471.1" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (181 samples, 3.47%)</title><rect x="468.8" y="355.0" width="41.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="471.8" y="366.0">roc..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (179 samples, 3.43%)</title><rect x="469.1" y="339.0" width="40.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="472.1" y="350.0">roc..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (3 samples, 0.06%)</title><rect x="469.1" y="323.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="472.1" y="334.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (176 samples, 3.38%)</title><rect x="469.7" y="323.0" width="39.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="472.7" y="334.0">roc..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (5 samples, 0.10%)</title><rect x="470.9" y="307.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="473.9" y="318.0"></text>
</g>
<g>
<title>rocksdb::EnvOptions::EnvOptions() (2 samples, 0.04%)</title><rect x="471.5" y="291.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="474.5" y="302.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (165 samples, 3.17%)</title><rect x="472.0" y="307.0" width="37.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="475.0" y="318.0">roc..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (164 samples, 3.15%)</title><rect x="472.2" y="291.0" width="37.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="475.2" y="302.0">roc..</text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="472.7" y="275.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="475.7" y="286.0"></text>
</g>
<g>
<title>write (160 samples, 3.07%)</title><rect x="473.1" y="275.0" width="36.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="476.1" y="286.0">write</text>
</g>
<g>
<title>rocksdb::WriteBatch::Clear() (2 samples, 0.04%)</title><rect x="509.8" y="355.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="512.8" y="366.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (2 samples, 0.04%)</title><rect x="509.8" y="339.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="512.8" y="350.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (2 samples, 0.04%)</title><rect x="510.7" y="371.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="513.7" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (37 samples, 0.71%)</title><rect x="511.6" y="371.0" width="8.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="514.6" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (33 samples, 0.63%)</title><rect x="512.5" y="355.0" width="7.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="515.5" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (33 samples, 0.63%)</title><rect x="512.5" y="339.0" width="7.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="515.5" y="350.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (2 samples, 0.04%)</title><rect x="512.5" y="323.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="515.5" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (31 samples, 0.59%)</title><rect x="513.0" y="323.0" width="7.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="516.0" y="334.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (27 samples, 0.52%)</title><rect x="513.9" y="307.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="516.9" y="318.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.04%)</title><rect x="514.3" y="291.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="517.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (22 samples, 0.42%)</title><rect x="515.0" y="291.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="518.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (5 samples, 0.10%)</title><rect x="518.6" y="275.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="521.6" y="286.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.06%)</title><rect x="519.1" y="259.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="522.1" y="270.0"></text>
</g>
<g>
<title>_platform_memcmp (3 samples, 0.06%)</title><rect x="519.1" y="243.0" width="0.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="522.1" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (16 samples, 0.31%)</title><rect x="520.0" y="371.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="523.0" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (15 samples, 0.29%)</title><rect x="520.2" y="355.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="523.2" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (15 samples, 0.29%)</title><rect x="520.2" y="339.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="523.2" y="350.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (2 samples, 0.04%)</title><rect x="520.4" y="323.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="523.4" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (12 samples, 0.23%)</title><rect x="520.9" y="323.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="523.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (8 samples, 0.15%)</title><rect x="521.1" y="307.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="524.1" y="318.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (7 samples, 0.13%)</title><rect x="521.3" y="291.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="524.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (7 samples, 0.13%)</title><rect x="521.3" y="275.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="524.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.04%)</title><rect x="522.2" y="259.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="525.2" y="270.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.04%)</title><rect x="522.2" y="243.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="525.2" y="254.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="523.2" y="307.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="526.2" y="318.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="523.2" y="291.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="526.2" y="302.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.04%)</title><rect x="523.2" y="275.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="526.2" y="286.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="523.2" y="259.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="526.2" y="270.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="523.2" y="243.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="526.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (139 samples, 2.67%)</title><rect x="523.6" y="371.0" width="31.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="526.6" y="382.0">ro..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (138 samples, 2.65%)</title><rect x="523.6" y="355.0" width="31.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="526.6" y="366.0">ro..</text>
</g>
<g>
<title>xdrrec_ops (128 samples, 2.46%)</title><rect x="525.9" y="339.0" width="28.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="528.9" y="350.0">xd..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (2 samples, 0.04%)</title><rect x="555.1" y="371.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="558.1" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (2 samples, 0.04%)</title><rect x="555.1" y="355.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="558.1" y="366.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (2 samples, 0.04%)</title><rect x="555.1" y="339.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="558.1" y="350.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.04%)</title><rect x="555.1" y="323.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="558.1" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (14 samples, 0.27%)</title><rect x="555.5" y="371.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="558.5" y="382.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (11 samples, 0.21%)</title><rect x="555.7" y="355.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="558.7" y="366.0"></text>
</g>
<g>
<title>__psynch_cvsignal (10 samples, 0.19%)</title><rect x="555.7" y="339.0" width="2.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="558.7" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (122 samples, 2.34%)</title><rect x="558.7" y="371.0" width="27.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="561.7" y="382.0">r..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (121 samples, 2.32%)</title><rect x="558.7" y="355.0" width="27.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="561.7" y="366.0">r..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (101 samples, 1.94%)</title><rect x="560.0" y="339.0" width="22.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="563.0" y="350.0">s..</text>
</g>
<g>
<title>__psynch_cvwait (85 samples, 1.63%)</title><rect x="560.0" y="323.0" width="19.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="563.0" y="334.0"></text>
</g>
<g>
<title>_pthread_cond_wait (15 samples, 0.29%)</title><rect x="579.3" y="323.0" width="3.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="582.3" y="334.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (14 samples, 0.27%)</title><rect x="579.5" y="307.0" width="3.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="582.5" y="318.0"></text>
</g>
<g>
<title>__psynch_mutexwait (14 samples, 0.27%)</title><rect x="579.5" y="291.0" width="3.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="582.5" y="302.0"></text>
</g>
<g>
<title>xdrrec_ops (14 samples, 0.27%)</title><rect x="582.9" y="339.0" width="3.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="585.9" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (23 samples, 0.44%)</title><rect x="586.3" y="371.0" width="5.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="589.3" y="382.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (17 samples, 0.33%)</title><rect x="586.3" y="355.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="589.3" y="366.0"></text>
</g>
<g>
<title>__psynch_cvsignal (15 samples, 0.29%)</title><rect x="586.3" y="339.0" width="3.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="589.3" y="350.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.04%)</title><rect x="589.7" y="339.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="592.7" y="350.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (6 samples, 0.12%)</title><rect x="590.2" y="355.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="593.2" y="366.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (5 samples, 0.10%)</title><rect x="590.2" y="339.0" width="1.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="593.2" y="350.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (5 samples, 0.10%)</title><rect x="590.2" y="323.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="593.2" y="334.0"></text>
</g>
<g>
<title>std::__1::condition_variable::~condition_variable() (2 samples, 0.04%)</title><rect x="591.7" y="371.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="594.7" y="382.0"></text>
</g>
<g>
<title>pthread_cond_destroy (2 samples, 0.04%)</title><rect x="591.7" y="355.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="594.7" y="366.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (2 samples, 0.04%)</title><rect x="592.6" y="371.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="595.6" y="382.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (2 samples, 0.04%)</title><rect x="592.6" y="355.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="595.6" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (7 samples, 0.13%)</title><rect x="593.3" y="403.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="596.3" y="414.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (4 samples, 0.08%)</title><rect x="593.8" y="387.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="596.8" y="398.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (2 samples, 0.04%)</title><rect x="594.0" y="371.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="597.0" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (5 samples, 0.10%)</title><rect x="594.9" y="403.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="597.9" y="414.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (3 samples, 0.06%)</title><rect x="594.9" y="387.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="597.9" y="398.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="595.1" y="371.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="598.1" y="382.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="595.1" y="355.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="598.1" y="366.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.04%)</title><rect x="595.1" y="339.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="598.1" y="350.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="595.1" y="323.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="598.1" y="334.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="595.1" y="307.0" width="0.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="598.1" y="318.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (2 samples, 0.04%)</title><rect x="595.6" y="387.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="598.6" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (7 samples, 0.13%)</title><rect x="596.0" y="403.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="599.0" y="414.0"></text>
</g>
<g>
<title>free (2 samples, 0.04%)</title><rect x="596.0" y="387.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="599.0" y="398.0"></text>
</g>
<g>
<title>free_tiny (3 samples, 0.06%)</title><rect x="596.5" y="387.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="599.5" y="398.0"></text>
</g>
<g>
<title>tiny_free_no_lock (2 samples, 0.04%)</title><rect x="596.7" y="371.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="599.7" y="382.0"></text>
</g>
<g>
<title>tiny_free_list_remove_ptr (2 samples, 0.04%)</title><rect x="596.7" y="355.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="599.7" y="366.0"></text>
</g>
<g>
<title>szone_size (2 samples, 0.04%)</title><rect x="597.2" y="387.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="600.2" y="398.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (10 samples, 0.19%)</title><rect x="598.8" y="451.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="601.8" y="462.0"></text>
</g>
<g>
<title>malloc (10 samples, 0.19%)</title><rect x="598.8" y="435.0" width="2.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="601.8" y="446.0"></text>
</g>
<g>
<title>malloc_zone_malloc (9 samples, 0.17%)</title><rect x="599.0" y="419.0" width="2.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="602.0" y="430.0"></text>
</g>
<g>
<title>default_zone_malloc (2 samples, 0.04%)</title><rect x="599.2" y="403.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="602.2" y="414.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (5 samples, 0.10%)</title><rect x="599.7" y="403.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="602.7" y="414.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (5 samples, 0.10%)</title><rect x="599.7" y="387.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="602.7" y="398.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (3 samples, 0.06%)</title><rect x="600.1" y="371.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="603.1" y="382.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="601.2" y="467.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="604.2" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.toArray (6 samples, 0.12%)</title><rect x="602.2" y="515.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="605.2" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.04%)</title><rect x="602.4" y="499.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="605.4" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.06%)</title><rect x="602.8" y="499.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="605.8" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="602.8" y="483.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="605.8" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="602.8" y="467.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="605.8" y="478.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.06%)</title><rect x="602.8" y="451.0" width="0.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="605.8" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (4 samples, 0.08%)</title><rect x="604.0" y="563.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="607.0" y="574.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.08%)</title><rect x="604.0" y="547.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="607.0" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.04%)</title><rect x="604.4" y="531.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="607.4" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (7 samples, 0.13%)</title><rect x="604.9" y="595.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="607.9" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.06%)</title><rect x="604.9" y="579.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="607.9" y="590.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.04%)</title><rect x="605.1" y="563.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="608.1" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.06%)</title><rect x="605.5" y="579.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="608.5" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.06%)</title><rect x="605.5" y="563.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="608.5" y="574.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (8 samples, 0.15%)</title><rect x="606.5" y="595.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="609.5" y="606.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (4 samples, 0.08%)</title><rect x="606.7" y="579.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="609.7" y="590.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (4 samples, 0.08%)</title><rect x="606.7" y="563.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="609.7" y="574.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.04%)</title><rect x="607.6" y="579.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="610.6" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.08%)</title><rect x="608.3" y="595.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="611.3" y="606.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.04%)</title><rect x="608.3" y="579.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="611.3" y="590.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="608.7" y="579.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="611.7" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (52 samples, 1.00%)</title><rect x="609.2" y="611.0" width="11.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="612.2" y="622.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (50 samples, 0.96%)</title><rect x="609.4" y="595.0" width="11.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="612.4" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (49 samples, 0.94%)</title><rect x="609.6" y="579.0" width="11.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="612.6" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (48 samples, 0.92%)</title><rect x="609.8" y="563.0" width="10.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="612.8" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (48 samples, 0.92%)</title><rect x="609.8" y="547.0" width="10.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="612.8" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (3 samples, 0.06%)</title><rect x="610.5" y="531.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="613.5" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.04%)</title><rect x="610.8" y="515.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="613.8" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (36 samples, 0.69%)</title><rect x="611.2" y="531.0" width="8.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="614.2" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (36 samples, 0.69%)</title><rect x="611.2" y="515.0" width="8.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="614.2" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (36 samples, 0.69%)</title><rect x="611.2" y="499.0" width="8.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="614.2" y="510.0"></text>
</g>
<g>
<title>read (32 samples, 0.61%)</title><rect x="612.1" y="483.0" width="7.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="615.1" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (5 samples, 0.10%)</title><rect x="619.4" y="531.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="622.4" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.08%)</title><rect x="619.6" y="515.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="622.6" y="526.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=25091] (1,251 samples, 24.00%)</title><rect x="621.6" y="675.0" width="283.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="624.6" y="686.0">[NIO Selector #2 tid=25091]</text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.04%)</title><rect x="622.1" y="659.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="625.1" y="670.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,244 samples, 23.86%)</title><rect x="622.7" y="659.0" width="281.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="625.7" y="670.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (282 samples, 5.41%)</title><rect x="623.4" y="643.0" width="63.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="626.4" y="654.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.04%)</title><rect x="623.9" y="627.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="626.9" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (277 samples, 5.31%)</title><rect x="624.3" y="627.0" width="62.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="627.3" y="638.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (277 samples, 5.31%)</title><rect x="624.3" y="611.0" width="62.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="627.3" y="622.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (277 samples, 5.31%)</title><rect x="624.3" y="595.0" width="62.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="627.3" y="606.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (267 samples, 5.12%)</title><rect x="624.3" y="579.0" width="60.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="627.3" y="590.0">sun/ni..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (2 samples, 0.04%)</title><rect x="625.7" y="563.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="628.7" y="574.0"></text>
</g>
<g>
<title>kevent (259 samples, 4.97%)</title><rect x="626.1" y="563.0" width="58.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="629.1" y="574.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (6 samples, 0.12%)</title><rect x="684.8" y="579.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="687.8" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.04%)</title><rect x="685.2" y="563.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="688.2" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.04%)</title><rect x="685.7" y="563.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="688.7" y="574.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.04%)</title><rect x="685.7" y="547.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="688.7" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.04%)</title><rect x="685.7" y="531.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="688.7" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.04%)</title><rect x="685.7" y="515.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="688.7" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.04%)</title><rect x="686.6" y="579.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="689.6" y="590.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.04%)</title><rect x="686.6" y="563.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="689.6" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (2 samples, 0.04%)</title><rect x="686.6" y="547.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="689.6" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (959 samples, 18.40%)</title><rect x="687.3" y="643.0" width="217.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="690.3" y="654.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (959 samples, 18.40%)</title><rect x="687.3" y="627.0" width="217.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="690.3" y="638.0">one/nio/http/HttpSession.proc..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (913 samples, 17.51%)</title><rect x="687.3" y="611.0" width="206.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="690.3" y="622.0">one/nio/http/HttpSession.pr..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (895 samples, 17.17%)</title><rect x="687.5" y="595.0" width="202.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="690.5" y="606.0">one/nio/http/HttpSession.h..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (895 samples, 17.17%)</title><rect x="687.5" y="579.0" width="202.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="690.5" y="590.0">one/nio/http/HttpServer.ha..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (893 samples, 17.13%)</title><rect x="687.5" y="563.0" width="202.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="690.5" y="574.0">RequestHandler1_entity.han..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (192 samples, 3.68%)</title><rect x="687.5" y="547.0" width="43.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="690.5" y="558.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (187 samples, 3.59%)</title><rect x="687.5" y="531.0" width="42.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="690.5" y="542.0">one/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (7 samples, 0.13%)</title><rect x="687.5" y="515.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="690.5" y="526.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.06%)</title><rect x="688.4" y="499.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="691.4" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.06%)</title><rect x="688.4" y="483.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="691.4" y="494.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (180 samples, 3.45%)</title><rect x="689.1" y="515.0" width="40.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="692.1" y="526.0">one..</text>
</g>
<g>
<title>one/nio/net/Session.write (180 samples, 3.45%)</title><rect x="689.1" y="499.0" width="40.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="692.1" y="510.0">one..</text>
</g>
<g>
<title>gettimeofday (2 samples, 0.04%)</title><rect x="689.3" y="483.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="692.3" y="494.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (174 samples, 3.34%)</title><rect x="689.8" y="483.0" width="39.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="692.8" y="494.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (173 samples, 3.32%)</title><rect x="690.0" y="467.0" width="39.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="693.0" y="478.0">one..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.04%)</title><rect x="690.0" y="451.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="693.0" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="690.0" y="435.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="693.0" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="690.0" y="419.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="693.0" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (171 samples, 3.28%)</title><rect x="690.4" y="451.0" width="38.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="693.4" y="462.0">sun..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.04%)</title><rect x="690.4" y="435.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="693.4" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (168 samples, 3.22%)</title><rect x="691.1" y="435.0" width="38.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="694.1" y="446.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (168 samples, 3.22%)</title><rect x="691.1" y="419.0" width="38.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="694.1" y="430.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (162 samples, 3.11%)</title><rect x="691.1" y="403.0" width="36.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="694.1" y="414.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (162 samples, 3.11%)</title><rect x="691.1" y="387.0" width="36.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="694.1" y="398.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (162 samples, 3.11%)</title><rect x="691.1" y="371.0" width="36.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="694.1" y="382.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (4 samples, 0.08%)</title><rect x="692.2" y="355.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="695.2" y="366.0"></text>
</g>
<g>
<title>write (153 samples, 2.93%)</title><rect x="693.1" y="355.0" width="34.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="696.1" y="366.0">wr..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (6 samples, 0.12%)</title><rect x="727.8" y="403.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="730.8" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (5 samples, 0.10%)</title><rect x="728.0" y="387.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="731.0" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.04%)</title><rect x="728.2" y="371.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="731.2" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.04%)</title><rect x="728.2" y="355.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="731.2" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.04%)</title><rect x="728.2" y="339.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="731.2" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.04%)</title><rect x="728.2" y="323.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="731.2" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (2 samples, 0.04%)</title><rect x="728.7" y="371.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="731.7" y="382.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.06%)</title><rect x="729.1" y="483.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="732.1" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.10%)</title><rect x="729.8" y="531.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="732.8" y="542.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.06%)</title><rect x="730.0" y="515.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="733.0" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.06%)</title><rect x="730.0" y="499.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="733.0" y="510.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (5 samples, 0.10%)</title><rect x="730.9" y="547.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="733.9" y="558.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (5 samples, 0.10%)</title><rect x="730.9" y="531.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="733.9" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.04%)</title><rect x="731.4" y="515.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="734.4" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.entity (696 samples, 13.35%)</title><rect x="732.1" y="547.0" width="157.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="735.1" y="558.0">ru/mail/polis/servic..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.04%)</title><rect x="732.1" y="531.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="735.1" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.04%)</title><rect x="732.1" y="515.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="735.1" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="732.1" y="499.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="735.1" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="732.1" y="483.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="735.1" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="732.1" y="467.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="735.1" y="478.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="732.1" y="451.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="735.1" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (693 samples, 13.29%)</title><rect x="732.8" y="531.0" width="156.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="735.8" y="542.0">ru/mail/polis/dao/DA..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (687 samples, 13.18%)</title><rect x="732.8" y="515.0" width="155.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="735.8" y="526.0">org/rocksdb/RocksDB...</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (687 samples, 13.18%)</title><rect x="732.8" y="499.0" width="155.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="735.8" y="510.0">org/rocksdb/RocksDB...</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (681 samples, 13.06%)</title><rect x="734.1" y="483.0" width="154.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="737.1" y="494.0">Java_org_rocksdb_Roc..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (674 samples, 12.93%)</title><rect x="735.0" y="467.0" width="152.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="738.0" y="478.0">rocksdb_put_helper(..</text>
</g>
<g>
<title>_setcontext (2 samples, 0.04%)</title><rect x="736.2" y="451.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="739.2" y="462.0"></text>
</g>
<g>
<title>free (3 samples, 0.06%)</title><rect x="736.6" y="451.0" width="0.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="739.6" y="462.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.04%)</title><rect x="736.8" y="435.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="739.8" y="446.0"></text>
</g>
<g>
<title>free_tiny (6 samples, 0.12%)</title><rect x="737.3" y="451.0" width="1.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="740.3" y="462.0"></text>
</g>
<g>
<title>tiny_free_no_lock (4 samples, 0.08%)</title><rect x="737.7" y="435.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="740.7" y="446.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (5 samples, 0.10%)</title><rect x="738.6" y="451.0" width="1.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="741.6" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.08%)</title><rect x="738.9" y="435.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="741.9" y="446.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.04%)</title><rect x="739.3" y="419.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="742.3" y="430.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (10 samples, 0.19%)</title><rect x="739.8" y="451.0" width="2.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="742.8" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.06%)</title><rect x="740.9" y="435.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="743.9" y="446.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.04%)</title><rect x="740.9" y="419.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="743.9" y="430.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.04%)</title><rect x="740.9" y="403.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="743.9" y="414.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="740.9" y="387.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="743.9" y="398.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.04%)</title><rect x="740.9" y="371.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="743.9" y="382.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="742.0" y="451.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="745.0" y="462.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (634 samples, 12.16%)</title><rect x="742.5" y="451.0" width="143.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="745.5" y="462.0">rocksdb::Compacted..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (634 samples, 12.16%)</title><rect x="742.5" y="435.0" width="143.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="745.5" y="446.0">rocksdb::DBImpl::P..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (633 samples, 12.14%)</title><rect x="742.5" y="419.0" width="143.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="745.5" y="430.0">rocksdb::DB::Put(r..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (608 samples, 11.66%)</title><rect x="742.9" y="403.0" width="137.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="745.9" y="414.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (604 samples, 11.59%)</title><rect x="742.9" y="387.0" width="136.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="745.9" y="398.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="745.4" y="371.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="748.4" y="382.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (2 samples, 0.04%)</title><rect x="746.3" y="371.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="749.3" y="382.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (153 samples, 2.93%)</title><rect x="746.8" y="371.0" width="34.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="749.8" y="382.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (150 samples, 2.88%)</title><rect x="747.0" y="355.0" width="34.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="750.0" y="366.0">ro..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (149 samples, 2.86%)</title><rect x="747.2" y="339.0" width="33.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="750.2" y="350.0">ro..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (3 samples, 0.06%)</title><rect x="747.5" y="323.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="750.5" y="334.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (145 samples, 2.78%)</title><rect x="748.2" y="323.0" width="32.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="751.2" y="334.0">ro..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="748.4" y="307.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="751.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (142 samples, 2.72%)</title><rect x="748.8" y="307.0" width="32.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="751.8" y="318.0">ro..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (141 samples, 2.70%)</title><rect x="749.1" y="291.0" width="31.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="752.1" y="302.0">ro..</text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="749.5" y="275.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="752.5" y="286.0"></text>
</g>
<g>
<title>write (137 samples, 2.63%)</title><rect x="750.0" y="275.0" width="31.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="753.0" y="286.0">wr..</text>
</g>
<g>
<title>rocksdb::FlushScheduler::Empty() (2 samples, 0.04%)</title><rect x="781.4" y="371.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="784.4" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (42 samples, 0.81%)</title><rect x="781.9" y="371.0" width="9.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="784.9" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (37 samples, 0.71%)</title><rect x="782.8" y="355.0" width="8.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="785.8" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (34 samples, 0.65%)</title><rect x="783.5" y="339.0" width="7.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="786.5" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (30 samples, 0.58%)</title><rect x="784.4" y="323.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="787.4" y="334.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (24 samples, 0.46%)</title><rect x="785.0" y="307.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="788.0" y="318.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (20 samples, 0.38%)</title><rect x="786.0" y="291.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="789.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.04%)</title><rect x="787.3" y="275.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="790.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.04%)</title><rect x="787.3" y="259.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="790.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (9 samples, 0.17%)</title><rect x="788.0" y="275.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="791.0" y="286.0"></text>
</g>
<g>
<title>_platform_memcmp (3 samples, 0.06%)</title><rect x="788.4" y="259.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="791.4" y="270.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (4 samples, 0.08%)</title><rect x="789.1" y="259.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="792.1" y="270.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.04%)</title><rect x="789.6" y="243.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="792.6" y="254.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.04%)</title><rect x="790.0" y="275.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="793.0" y="286.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.04%)</title><rect x="790.5" y="307.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="793.5" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (26 samples, 0.50%)</title><rect x="791.4" y="371.0" width="5.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="794.4" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (22 samples, 0.42%)</title><rect x="792.3" y="355.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="795.3" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (22 samples, 0.42%)</title><rect x="792.3" y="339.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="795.3" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (20 samples, 0.38%)</title><rect x="792.7" y="323.0" width="4.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="795.7" y="334.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (14 samples, 0.27%)</title><rect x="793.4" y="307.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="796.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (12 samples, 0.23%)</title><rect x="793.9" y="291.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="796.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (11 samples, 0.21%)</title><rect x="794.1" y="275.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="797.1" y="286.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (2 samples, 0.04%)</title><rect x="795.5" y="259.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="798.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.04%)</title><rect x="795.5" y="243.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="798.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.06%)</title><rect x="795.9" y="259.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="798.9" y="270.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="796.8" y="307.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="799.8" y="318.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="796.8" y="291.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="799.8" y="302.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.04%)</title><rect x="796.8" y="275.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="799.8" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (187 samples, 3.59%)</title><rect x="797.3" y="371.0" width="42.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="800.3" y="382.0">rock..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (187 samples, 3.59%)</title><rect x="797.3" y="355.0" width="42.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="800.3" y="366.0">rock..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (5 samples, 0.10%)</title><rect x="799.3" y="339.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="802.3" y="350.0"></text>
</g>
<g>
<title>clock_gettime (5 samples, 0.10%)</title><rect x="799.3" y="323.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="802.3" y="334.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (2 samples, 0.04%)</title><rect x="799.8" y="307.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="802.8" y="318.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (2 samples, 0.04%)</title><rect x="800.4" y="339.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="803.4" y="350.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.04%)</title><rect x="800.4" y="323.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="803.4" y="334.0"></text>
</g>
<g>
<title>xdrrec_ops (171 samples, 3.28%)</title><rect x="800.9" y="339.0" width="38.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="803.9" y="350.0">xdr..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (3 samples, 0.06%)</title><rect x="839.6" y="371.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="842.6" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (3 samples, 0.06%)</title><rect x="839.6" y="355.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="842.6" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (20 samples, 0.38%)</title><rect x="840.3" y="371.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="843.3" y="382.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (16 samples, 0.31%)</title><rect x="840.5" y="355.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="843.5" y="366.0"></text>
</g>
<g>
<title>__psynch_cvsignal (15 samples, 0.29%)</title><rect x="840.5" y="339.0" width="3.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="843.5" y="350.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (2 samples, 0.04%)</title><rect x="844.1" y="355.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="847.1" y="366.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (2 samples, 0.04%)</title><rect x="844.1" y="339.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="847.1" y="350.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (2 samples, 0.04%)</title><rect x="844.1" y="323.0" width="0.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="847.1" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (130 samples, 2.49%)</title><rect x="844.8" y="371.0" width="29.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="847.8" y="382.0">ro..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (127 samples, 2.44%)</title><rect x="845.0" y="355.0" width="28.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="848.0" y="366.0">ro..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (101 samples, 1.94%)</title><rect x="848.0" y="339.0" width="22.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="851.0" y="350.0">s..</text>
</g>
<g>
<title>__psynch_cvwait (76 samples, 1.46%)</title><rect x="848.0" y="323.0" width="17.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="851.0" y="334.0"></text>
</g>
<g>
<title>_pthread_cond_wait (22 samples, 0.42%)</title><rect x="865.2" y="323.0" width="5.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="868.2" y="334.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (21 samples, 0.40%)</title><rect x="865.4" y="307.0" width="4.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="868.4" y="318.0"></text>
</g>
<g>
<title>__psynch_mutexwait (21 samples, 0.40%)</title><rect x="865.4" y="291.0" width="4.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="868.4" y="302.0"></text>
</g>
<g>
<title>xdrrec_ops (13 samples, 0.25%)</title><rect x="870.8" y="339.0" width="3.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="873.8" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::__1::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (2 samples, 0.04%)</title><rect x="873.8" y="355.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="876.8" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (22 samples, 0.42%)</title><rect x="874.2" y="371.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="877.2" y="382.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (16 samples, 0.31%)</title><rect x="874.2" y="355.0" width="3.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="877.2" y="366.0"></text>
</g>
<g>
<title>__psynch_cvsignal (14 samples, 0.27%)</title><rect x="874.2" y="339.0" width="3.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="877.2" y="350.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.04%)</title><rect x="877.4" y="339.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="880.4" y="350.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (6 samples, 0.12%)</title><rect x="877.9" y="355.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="880.9" y="366.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (6 samples, 0.12%)</title><rect x="877.9" y="339.0" width="1.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="880.9" y="350.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (6 samples, 0.12%)</title><rect x="877.9" y="323.0" width="1.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="880.9" y="334.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (3 samples, 0.06%)</title><rect x="879.9" y="387.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="882.9" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (7 samples, 0.13%)</title><rect x="880.8" y="403.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="883.8" y="414.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="881.5" y="387.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="884.5" y="398.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (2 samples, 0.04%)</title><rect x="881.5" y="371.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="884.5" y="382.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="881.5" y="355.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="884.5" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (8 samples, 0.15%)</title><rect x="882.4" y="403.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="885.4" y="414.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (5 samples, 0.10%)</title><rect x="882.6" y="387.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="885.6" y="398.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (5 samples, 0.10%)</title><rect x="882.6" y="371.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="885.6" y="382.0"></text>
</g>
<g>
<title>malloc (5 samples, 0.10%)</title><rect x="882.6" y="355.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="885.6" y="366.0"></text>
</g>
<g>
<title>malloc_zone_malloc (5 samples, 0.10%)</title><rect x="882.6" y="339.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="885.6" y="350.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (5 samples, 0.10%)</title><rect x="882.6" y="323.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="885.6" y="334.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (5 samples, 0.10%)</title><rect x="882.6" y="307.0" width="1.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="885.6" y="318.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (3 samples, 0.06%)</title><rect x="883.1" y="291.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="886.1" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (5 samples, 0.10%)</title><rect x="884.2" y="403.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="887.2" y="414.0"></text>
</g>
<g>
<title>free (4 samples, 0.08%)</title><rect x="884.2" y="387.0" width="0.9" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="887.2" y="398.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.04%)</title><rect x="884.6" y="371.0" width="0.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="887.6" y="382.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (2 samples, 0.04%)</title><rect x="885.3" y="403.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="888.3" y="414.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (4 samples, 0.08%)</title><rect x="886.7" y="451.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="889.7" y="462.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.08%)</title><rect x="886.7" y="435.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="889.7" y="446.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.06%)</title><rect x="886.9" y="419.0" width="0.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="889.9" y="430.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.06%)</title><rect x="886.9" y="403.0" width="0.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="889.9" y="414.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.06%)</title><rect x="886.9" y="387.0" width="0.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="889.9" y="398.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (3 samples, 0.06%)</title><rect x="886.9" y="371.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="889.9" y="382.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="887.8" y="467.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="890.8" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.toArray (5 samples, 0.10%)</title><rect x="888.5" y="515.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="891.5" y="526.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.06%)</title><rect x="888.9" y="499.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="891.9" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (11 samples, 0.21%)</title><rect x="890.1" y="595.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="893.1" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (4 samples, 0.08%)</title><rect x="890.8" y="579.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="893.8" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.08%)</title><rect x="891.7" y="579.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="894.7" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.08%)</title><rect x="891.7" y="563.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="894.7" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.08%)</title><rect x="893.0" y="595.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="896.0" y="606.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.08%)</title><rect x="893.0" y="579.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="896.0" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.06%)</title><rect x="893.2" y="563.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="896.2" y="574.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.04%)</title><rect x="893.5" y="547.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="896.5" y="558.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.04%)</title><rect x="893.5" y="531.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="896.5" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (46 samples, 0.88%)</title><rect x="893.9" y="611.0" width="10.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="896.9" y="622.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (46 samples, 0.88%)</title><rect x="893.9" y="595.0" width="10.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="896.9" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (46 samples, 0.88%)</title><rect x="893.9" y="579.0" width="10.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="896.9" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (46 samples, 0.88%)</title><rect x="893.9" y="563.0" width="10.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="896.9" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (46 samples, 0.88%)</title><rect x="893.9" y="547.0" width="10.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="896.9" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (36 samples, 0.69%)</title><rect x="894.4" y="531.0" width="8.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="897.4" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (36 samples, 0.69%)</title><rect x="894.4" y="515.0" width="8.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="897.4" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (36 samples, 0.69%)</title><rect x="894.4" y="499.0" width="8.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="897.4" y="510.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.04%)</title><rect x="894.4" y="483.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="897.4" y="494.0"></text>
</g>
<g>
<title>read (34 samples, 0.65%)</title><rect x="894.8" y="483.0" width="7.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="897.8" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (6 samples, 0.12%)</title><rect x="902.5" y="531.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="905.5" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.08%)</title><rect x="902.5" y="515.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="905.5" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.04%)</title><rect x="903.4" y="515.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="906.4" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (2 samples, 0.04%)</title><rect x="903.9" y="531.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="906.9" y="542.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=25859] (1,167 samples, 22.39%)</title><rect x="904.8" y="675.0" width="264.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="907.8" y="686.0">[NIO Selector #3 tid=25859]</text>
</g>
<g>
<title>[unknown_Java] (5 samples, 0.10%)</title><rect x="904.8" y="659.0" width="1.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="907.8" y="670.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,161 samples, 22.27%)</title><rect x="905.9" y="659.0" width="262.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="908.9" y="670.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (272 samples, 5.22%)</title><rect x="906.6" y="643.0" width="61.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="909.6" y="654.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.04%)</title><rect x="907.5" y="627.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="910.5" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (265 samples, 5.08%)</title><rect x="908.2" y="627.0" width="60.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="911.2" y="638.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (265 samples, 5.08%)</title><rect x="908.2" y="611.0" width="60.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="911.2" y="622.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (265 samples, 5.08%)</title><rect x="908.2" y="595.0" width="60.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="911.2" y="606.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (249 samples, 4.78%)</title><rect x="908.4" y="579.0" width="56.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="911.4" y="590.0">sun/ni..</text>
</g>
<g>
<title>kevent (236 samples, 4.53%)</title><rect x="911.4" y="563.0" width="53.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="914.4" y="574.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (4 samples, 0.08%)</title><rect x="964.8" y="579.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="967.8" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.04%)</title><rect x="965.2" y="563.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="968.2" y="574.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.04%)</title><rect x="965.2" y="547.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="968.2" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.04%)</title><rect x="965.2" y="531.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="968.2" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.04%)</title><rect x="965.2" y="515.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="968.2" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (4 samples, 0.08%)</title><rect x="965.7" y="579.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="968.7" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (3 samples, 0.06%)</title><rect x="965.9" y="563.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="968.9" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (3 samples, 0.06%)</title><rect x="966.6" y="579.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="969.6" y="590.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (3 samples, 0.06%)</title><rect x="966.6" y="563.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="969.6" y="574.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.04%)</title><rect x="966.6" y="547.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="969.6" y="558.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.04%)</title><rect x="966.6" y="531.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="969.6" y="542.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.04%)</title><rect x="966.6" y="515.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="969.6" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (4 samples, 0.08%)</title><rect x="967.3" y="579.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="970.3" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (886 samples, 17.00%)</title><rect x="968.2" y="643.0" width="200.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="971.2" y="654.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (886 samples, 17.00%)</title><rect x="968.2" y="627.0" width="200.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="971.2" y="638.0">one/nio/http/HttpSession.p..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (833 samples, 15.98%)</title><rect x="968.2" y="611.0" width="188.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="971.2" y="622.0">one/nio/http/HttpSession..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (817 samples, 15.67%)</title><rect x="969.3" y="595.0" width="184.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="972.3" y="606.0">one/nio/http/HttpSession..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (816 samples, 15.65%)</title><rect x="969.5" y="579.0" width="184.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="972.5" y="590.0">one/nio/http/HttpServer...</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (814 samples, 15.61%)</title><rect x="969.8" y="563.0" width="184.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="972.8" y="574.0">RequestHandler1_entity.h..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (174 samples, 3.34%)</title><rect x="969.8" y="547.0" width="39.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="972.8" y="558.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (170 samples, 3.26%)</title><rect x="970.0" y="531.0" width="38.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="973.0" y="542.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (7 samples, 0.13%)</title><rect x="970.0" y="515.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="973.0" y="526.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.06%)</title><rect x="970.9" y="499.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="973.9" y="510.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (163 samples, 3.13%)</title><rect x="971.6" y="515.0" width="36.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="974.6" y="526.0">one..</text>
</g>
<g>
<title>one/nio/net/Session.write (163 samples, 3.13%)</title><rect x="971.6" y="499.0" width="36.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="974.6" y="510.0">one..</text>
</g>
<g>
<title>gettimeofday (3 samples, 0.06%)</title><rect x="972.0" y="483.0" width="0.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="975.0" y="494.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (155 samples, 2.97%)</title><rect x="972.7" y="483.0" width="35.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="975.7" y="494.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (155 samples, 2.97%)</title><rect x="972.7" y="467.0" width="35.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="975.7" y="478.0">one..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.08%)</title><rect x="972.7" y="451.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="975.7" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="972.7" y="435.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="975.7" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="972.7" y="419.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="975.7" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (151 samples, 2.90%)</title><rect x="973.6" y="451.0" width="34.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="976.6" y="462.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (148 samples, 2.84%)</title><rect x="974.3" y="435.0" width="33.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="977.3" y="446.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (148 samples, 2.84%)</title><rect x="974.3" y="419.0" width="33.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="977.3" y="430.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (148 samples, 2.84%)</title><rect x="974.3" y="403.0" width="33.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="977.3" y="414.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (148 samples, 2.84%)</title><rect x="974.3" y="387.0" width="33.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="977.3" y="398.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (148 samples, 2.84%)</title><rect x="974.3" y="371.0" width="33.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="977.3" y="382.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (4 samples, 0.08%)</title><rect x="975.6" y="355.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="978.6" y="366.0"></text>
</g>
<g>
<title>write (138 samples, 2.65%)</title><rect x="976.5" y="355.0" width="31.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="979.5" y="366.0">wr..</text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.06%)</title><rect x="1007.8" y="483.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1010.8" y="494.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.04%)</title><rect x="1008.0" y="467.0" width="0.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1011.0" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.06%)</title><rect x="1008.5" y="531.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1011.5" y="542.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.06%)</title><rect x="1008.5" y="515.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1011.5" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.04%)</title><rect x="1008.7" y="499.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1011.7" y="510.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (6 samples, 0.12%)</title><rect x="1009.1" y="547.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1012.1" y="558.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.06%)</title><rect x="1009.4" y="531.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1012.4" y="542.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.04%)</title><rect x="1010.0" y="531.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1013.0" y="542.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.04%)</title><rect x="1010.0" y="515.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1013.0" y="526.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.04%)</title><rect x="1010.0" y="499.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1013.0" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.04%)</title><rect x="1010.0" y="483.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1013.0" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.entity (634 samples, 12.16%)</title><rect x="1010.5" y="547.0" width="143.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1013.5" y="558.0">ru/mail/polis/serv..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.06%)</title><rect x="1010.7" y="531.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1013.7" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.06%)</title><rect x="1010.7" y="515.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1013.7" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="1010.7" y="499.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1013.7" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="1010.7" y="483.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1013.7" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="1010.7" y="467.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1013.7" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (630 samples, 12.09%)</title><rect x="1011.4" y="531.0" width="142.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1014.4" y="542.0">ru/mail/polis/dao/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (625 samples, 11.99%)</title><rect x="1011.6" y="515.0" width="141.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1014.6" y="526.0">org/rocksdb/RocksD..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (625 samples, 11.99%)</title><rect x="1011.6" y="499.0" width="141.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1014.6" y="510.0">org/rocksdb/RocksD..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (618 samples, 11.85%)</title><rect x="1013.2" y="483.0" width="139.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1016.2" y="494.0">Java_org_rocksdb_..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (614 samples, 11.78%)</title><rect x="1013.9" y="467.0" width="139.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1016.9" y="478.0">rocksdb_put_helpe..</text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.04%)</title><rect x="1014.3" y="451.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1017.3" y="462.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (5 samples, 0.10%)</title><rect x="1015.3" y="451.0" width="1.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1018.3" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.08%)</title><rect x="1015.5" y="435.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1018.5" y="446.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (4 samples, 0.08%)</title><rect x="1015.5" y="419.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1018.5" y="430.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.08%)</title><rect x="1015.5" y="403.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1018.5" y="414.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.08%)</title><rect x="1015.5" y="387.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1018.5" y="398.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.06%)</title><rect x="1015.5" y="371.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1018.5" y="382.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (11 samples, 0.21%)</title><rect x="1016.4" y="451.0" width="2.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1019.4" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.06%)</title><rect x="1016.8" y="435.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1019.8" y="446.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="1017.5" y="435.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1020.5" y="446.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.04%)</title><rect x="1018.0" y="435.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1021.0" y="446.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="1018.9" y="451.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1021.9" y="462.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (585 samples, 11.22%)</title><rect x="1019.3" y="451.0" width="132.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1022.3" y="462.0">rocksdb::Compact..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (584 samples, 11.20%)</title><rect x="1019.6" y="435.0" width="132.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1022.6" y="446.0">rocksdb::DBImpl:..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (580 samples, 11.13%)</title><rect x="1019.8" y="419.0" width="131.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1022.8" y="430.0">rocksdb::DB::Put..</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (2 samples, 0.04%)</title><rect x="1019.8" y="403.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1022.8" y="414.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (559 samples, 10.72%)</title><rect x="1020.2" y="403.0" width="126.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1023.2" y="414.0">rocksdb::DBImpl:..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (556 samples, 10.67%)</title><rect x="1020.5" y="387.0" width="125.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1023.5" y="398.0">rocksdb::DBImpl..</text>
</g>
<g>
<title>_dispatch_queue_attrs (3 samples, 0.06%)</title><rect x="1023.6" y="371.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1026.6" y="382.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (180 samples, 3.45%)</title><rect x="1024.5" y="371.0" width="40.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1027.5" y="382.0">roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (175 samples, 3.36%)</title><rect x="1025.2" y="355.0" width="39.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1028.2" y="366.0">roc..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (174 samples, 3.34%)</title><rect x="1025.4" y="339.0" width="39.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1028.4" y="350.0">roc..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (3 samples, 0.06%)</title><rect x="1026.3" y="323.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1029.3" y="334.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (167 samples, 3.20%)</title><rect x="1027.0" y="323.0" width="37.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1030.0" y="334.0">roc..</text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync() (2 samples, 0.04%)</title><rect x="1027.0" y="307.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1030.0" y="318.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (164 samples, 3.15%)</title><rect x="1027.7" y="307.0" width="37.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1030.7" y="318.0">roc..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (161 samples, 3.09%)</title><rect x="1028.4" y="291.0" width="36.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1031.4" y="302.0">roc..</text>
</g>
<g>
<title>write (156 samples, 2.99%)</title><rect x="1029.5" y="275.0" width="35.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1032.5" y="286.0">write</text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (3 samples, 0.06%)</title><rect x="1065.3" y="371.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1068.3" y="382.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (4 samples, 0.08%)</title><rect x="1066.0" y="371.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1069.0" y="382.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="1066.2" y="355.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1069.2" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (34 samples, 0.65%)</title><rect x="1066.9" y="371.0" width="7.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1069.9" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (30 samples, 0.58%)</title><rect x="1067.8" y="355.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1070.8" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (29 samples, 0.56%)</title><rect x="1068.0" y="339.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1071.0" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (27 samples, 0.52%)</title><rect x="1068.4" y="323.0" width="6.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1071.4" y="334.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (25 samples, 0.48%)</title><rect x="1068.9" y="307.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1071.9" y="318.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (21 samples, 0.40%)</title><rect x="1069.8" y="291.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1072.8" y="302.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="1071.4" y="275.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1074.4" y="286.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (2 samples, 0.04%)</title><rect x="1072.1" y="275.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1075.1" y="286.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (5 samples, 0.10%)</title><rect x="1072.5" y="275.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1075.5" y="286.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="1073.0" y="259.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1076.0" y="270.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.06%)</title><rect x="1073.7" y="275.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1076.7" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (26 samples, 0.50%)</title><rect x="1074.6" y="371.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1077.6" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (22 samples, 0.42%)</title><rect x="1075.5" y="355.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1078.5" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (22 samples, 0.42%)</title><rect x="1075.5" y="339.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1078.5" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (19 samples, 0.36%)</title><rect x="1075.9" y="323.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1078.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (14 samples, 0.27%)</title><rect x="1076.8" y="307.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1079.8" y="318.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (14 samples, 0.27%)</title><rect x="1076.8" y="291.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1079.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (12 samples, 0.23%)</title><rect x="1077.3" y="275.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1080.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (4 samples, 0.08%)</title><rect x="1079.1" y="259.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1082.1" y="270.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="1079.5" y="243.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1082.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (144 samples, 2.76%)</title><rect x="1080.4" y="371.0" width="32.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1083.4" y="382.0">ro..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (144 samples, 2.76%)</title><rect x="1080.4" y="355.0" width="32.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1083.4" y="366.0">ro..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (2 samples, 0.04%)</title><rect x="1081.1" y="339.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1084.1" y="350.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.04%)</title><rect x="1081.1" y="323.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1084.1" y="334.0"></text>
</g>
<g>
<title>xdrrec_ops (138 samples, 2.65%)</title><rect x="1081.8" y="339.0" width="31.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1084.8" y="350.0">xd..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (3 samples, 0.06%)</title><rect x="1113.0" y="371.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1116.0" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (3 samples, 0.06%)</title><rect x="1113.0" y="355.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1116.0" y="366.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (2 samples, 0.04%)</title><rect x="1113.3" y="339.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1116.3" y="350.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (2 samples, 0.04%)</title><rect x="1113.3" y="323.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1116.3" y="334.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (2 samples, 0.04%)</title><rect x="1113.3" y="307.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1116.3" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (14 samples, 0.27%)</title><rect x="1113.7" y="371.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.7" y="382.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (11 samples, 0.21%)</title><rect x="1114.2" y="355.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1117.2" y="366.0"></text>
</g>
<g>
<title>__psynch_cvsignal (10 samples, 0.19%)</title><rect x="1114.2" y="339.0" width="2.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1117.2" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (110 samples, 2.11%)</title><rect x="1116.9" y="371.0" width="24.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1119.9" y="382.0">r..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (107 samples, 2.05%)</title><rect x="1116.9" y="355.0" width="24.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1119.9" y="366.0">r..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (80 samples, 1.53%)</title><rect x="1119.2" y="339.0" width="18.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.2" y="350.0"></text>
</g>
<g>
<title>__psynch_cvwait (64 samples, 1.23%)</title><rect x="1119.2" y="323.0" width="14.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1122.2" y="334.0"></text>
</g>
<g>
<title>_pthread_cond_wait (15 samples, 0.29%)</title><rect x="1133.6" y="323.0" width="3.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1136.6" y="334.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (2 samples, 0.04%)</title><rect x="1133.9" y="307.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1136.9" y="318.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (12 samples, 0.23%)</title><rect x="1134.3" y="307.0" width="2.7" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1137.3" y="318.0"></text>
</g>
<g>
<title>__psynch_mutexwait (12 samples, 0.23%)</title><rect x="1134.3" y="291.0" width="2.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1137.3" y="302.0"></text>
</g>
<g>
<title>std::__1::mutex::lock() (3 samples, 0.06%)</title><rect x="1137.3" y="339.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.3" y="350.0"></text>
</g>
<g>
<title>_pthread_mutex_lock_init_slow (3 samples, 0.06%)</title><rect x="1137.3" y="323.0" width="0.6" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1140.3" y="334.0"></text>
</g>
<g>
<title>_pthread_mutex_check_init_slow (3 samples, 0.06%)</title><rect x="1137.3" y="307.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1140.3" y="318.0"></text>
</g>
<g>
<title>xdrrec_ops (14 samples, 0.27%)</title><rect x="1137.9" y="339.0" width="3.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1140.9" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (19 samples, 0.36%)</title><rect x="1141.8" y="371.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1144.8" y="382.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (18 samples, 0.35%)</title><rect x="1141.8" y="355.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1144.8" y="366.0"></text>
</g>
<g>
<title>__psynch_cvsignal (18 samples, 0.35%)</title><rect x="1141.8" y="339.0" width="4.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1144.8" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (7 samples, 0.13%)</title><rect x="1146.8" y="403.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.8" y="414.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (5 samples, 0.10%)</title><rect x="1147.0" y="387.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1150.0" y="398.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="1147.0" y="371.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1150.0" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (6 samples, 0.12%)</title><rect x="1148.4" y="403.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1151.4" y="414.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (3 samples, 0.06%)</title><rect x="1148.4" y="387.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1151.4" y="398.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="1148.4" y="371.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.4" y="382.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.06%)</title><rect x="1148.4" y="355.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1151.4" y="366.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.06%)</title><rect x="1148.4" y="339.0" width="0.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1151.4" y="350.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.06%)</title><rect x="1148.4" y="323.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1151.4" y="334.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.06%)</title><rect x="1148.4" y="307.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1151.4" y="318.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (2 samples, 0.04%)</title><rect x="1149.0" y="387.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.0" y="398.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (2 samples, 0.04%)</title><rect x="1149.0" y="371.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.0" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (3 samples, 0.06%)</title><rect x="1149.7" y="403.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.7" y="414.0"></text>
</g>
<g>
<title>szone_size (2 samples, 0.04%)</title><rect x="1149.9" y="387.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1152.9" y="398.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="1152.4" y="451.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.4" y="462.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="1152.4" y="435.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1155.4" y="446.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.04%)</title><rect x="1152.4" y="419.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1155.4" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.toArray (3 samples, 0.06%)</title><rect x="1153.3" y="515.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1156.3" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (3 samples, 0.06%)</title><rect x="1153.3" y="499.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1156.3" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.06%)</title><rect x="1153.3" y="483.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1156.3" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (6 samples, 0.12%)</title><rect x="1154.2" y="595.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1157.2" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.06%)</title><rect x="1154.7" y="579.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1157.7" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.06%)</title><rect x="1155.8" y="595.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1158.8" y="606.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="1156.0" y="579.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1159.0" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (53 samples, 1.02%)</title><rect x="1156.7" y="611.0" width="12.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1159.7" y="622.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (53 samples, 1.02%)</title><rect x="1156.7" y="595.0" width="12.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1159.7" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (52 samples, 1.00%)</title><rect x="1157.0" y="579.0" width="11.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1160.0" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (51 samples, 0.98%)</title><rect x="1157.2" y="563.0" width="11.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1160.2" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (51 samples, 0.98%)</title><rect x="1157.2" y="547.0" width="11.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1160.2" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (3 samples, 0.06%)</title><rect x="1157.4" y="531.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1160.4" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3 samples, 0.06%)</title><rect x="1157.4" y="515.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1160.4" y="526.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.04%)</title><rect x="1157.6" y="499.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1160.6" y="510.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.04%)</title><rect x="1157.6" y="483.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1160.6" y="494.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.04%)</title><rect x="1157.6" y="467.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1160.6" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (2 samples, 0.04%)</title><rect x="1157.6" y="451.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1160.6" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (45 samples, 0.86%)</title><rect x="1158.1" y="531.0" width="10.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1161.1" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (44 samples, 0.84%)</title><rect x="1158.3" y="515.0" width="10.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1161.3" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (44 samples, 0.84%)</title><rect x="1158.3" y="499.0" width="10.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1161.3" y="510.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (6 samples, 0.12%)</title><rect x="1159.4" y="483.0" width="1.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1162.4" y="494.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.04%)</title><rect x="1160.3" y="467.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1163.3" y="478.0"></text>
</g>
<g>
<title>read (33 samples, 0.63%)</title><rect x="1160.8" y="483.0" width="7.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1163.8" y="494.0"></text>
</g>
<g>
<title>[tid=12803] (3 samples, 0.06%)</title><rect x="1169.2" y="675.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1172.2" y="686.0"></text>
</g>
<g>
<title>thread_start (3 samples, 0.06%)</title><rect x="1169.2" y="659.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1172.2" y="670.0"></text>
</g>
<g>
<title>_pthread_start (3 samples, 0.06%)</title><rect x="1169.2" y="643.0" width="0.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1172.2" y="654.0"></text>
</g>
<g>
<title>_pthread_body (3 samples, 0.06%)</title><rect x="1169.2" y="627.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1172.2" y="638.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.06%)</title><rect x="1169.2" y="611.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1172.2" y="622.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 0.06%)</title><rect x="1169.2" y="595.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.2" y="606.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.06%)</title><rect x="1169.2" y="579.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.2" y="590.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.06%)</title><rect x="1169.2" y="563.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.2" y="574.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.06%)</title><rect x="1169.2" y="547.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.2" y="558.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.06%)</title><rect x="1169.2" y="531.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.2" y="542.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.06%)</title><rect x="1169.2" y="515.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.2" y="526.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.06%)</title><rect x="1169.2" y="499.0" width="0.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1172.2" y="510.0"></text>
</g>
<g>
<title>[tid=15619] (3 samples, 0.06%)</title><rect x="1169.9" y="675.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1172.9" y="686.0"></text>
</g>
<g>
<title>thread_start (3 samples, 0.06%)</title><rect x="1169.9" y="659.0" width="0.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1172.9" y="670.0"></text>
</g>
<g>
<title>_pthread_start (3 samples, 0.06%)</title><rect x="1169.9" y="643.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1172.9" y="654.0"></text>
</g>
<g>
<title>_pthread_body (3 samples, 0.06%)</title><rect x="1169.9" y="627.0" width="0.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1172.9" y="638.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.06%)</title><rect x="1169.9" y="611.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1172.9" y="622.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 0.06%)</title><rect x="1169.9" y="595.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.9" y="606.0"></text>
</g>
<g>
<title>JavaThread::run() (3 samples, 0.06%)</title><rect x="1169.9" y="579.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.9" y="590.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (3 samples, 0.06%)</title><rect x="1169.9" y="563.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.9" y="574.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (3 samples, 0.06%)</title><rect x="1169.9" y="547.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.9" y="558.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (3 samples, 0.06%)</title><rect x="1169.9" y="531.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.9" y="542.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 0.06%)</title><rect x="1169.9" y="515.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.9" y="526.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (3 samples, 0.06%)</title><rect x="1169.9" y="499.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.9" y="510.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.06%)</title><rect x="1169.9" y="483.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.9" y="494.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.06%)</title><rect x="1169.9" y="467.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.9" y="478.0"></text>
</g>
<g>
<title>Compilation::build_hir() (3 samples, 0.06%)</title><rect x="1169.9" y="451.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.9" y="462.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (3 samples, 0.06%)</title><rect x="1169.9" y="435.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.9" y="446.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (3 samples, 0.06%)</title><rect x="1169.9" y="419.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.9" y="430.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (3 samples, 0.06%)</title><rect x="1169.9" y="403.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.9" y="414.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 0.06%)</title><rect x="1169.9" y="387.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.9" y="398.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 0.06%)</title><rect x="1169.9" y="371.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.9" y="382.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.04%)</title><rect x="1169.9" y="355.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.9" y="366.0"></text>
</g>
<g>
<title>[tid=15875] (77 samples, 1.48%)</title><rect x="1170.5" y="675.0" width="17.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1173.5" y="686.0"></text>
</g>
<g>
<title>thread_start (77 samples, 1.48%)</title><rect x="1170.5" y="659.0" width="17.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1173.5" y="670.0"></text>
</g>
<g>
<title>_pthread_start (77 samples, 1.48%)</title><rect x="1170.5" y="643.0" width="17.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1173.5" y="654.0"></text>
</g>
<g>
<title>_pthread_body (77 samples, 1.48%)</title><rect x="1170.5" y="627.0" width="17.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1173.5" y="638.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (77 samples, 1.48%)</title><rect x="1170.5" y="611.0" width="17.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1173.5" y="622.0"></text>
</g>
<g>
<title>Thread::call_run() (77 samples, 1.48%)</title><rect x="1170.5" y="595.0" width="17.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.5" y="606.0"></text>
</g>
<g>
<title>JavaThread::run() (77 samples, 1.48%)</title><rect x="1170.5" y="579.0" width="17.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.5" y="590.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (77 samples, 1.48%)</title><rect x="1170.5" y="563.0" width="17.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.5" y="574.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (77 samples, 1.48%)</title><rect x="1170.5" y="547.0" width="17.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.5" y="558.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (76 samples, 1.46%)</title><rect x="1170.5" y="531.0" width="17.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.5" y="542.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (76 samples, 1.46%)</title><rect x="1170.5" y="515.0" width="17.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.5" y="526.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (76 samples, 1.46%)</title><rect x="1170.5" y="499.0" width="17.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.5" y="510.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (21 samples, 0.40%)</title><rect x="1170.5" y="483.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.5" y="494.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.08%)</title><rect x="1170.5" y="467.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.5" y="478.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.08%)</title><rect x="1170.5" y="451.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.5" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.04%)</title><rect x="1170.8" y="435.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.8" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (17 samples, 0.33%)</title><rect x="1171.4" y="467.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.4" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 0.08%)</title><rect x="1172.1" y="451.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.1" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (2 samples, 0.04%)</title><rect x="1172.3" y="435.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.3" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.04%)</title><rect x="1172.3" y="419.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.3" y="430.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.04%)</title><rect x="1173.0" y="451.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.0" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.04%)</title><rect x="1173.7" y="451.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.7" y="462.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 0.06%)</title><rect x="1174.2" y="451.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.2" y="462.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.04%)</title><rect x="1174.4" y="435.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.4" y="446.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.04%)</title><rect x="1174.8" y="451.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.8" y="462.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.04%)</title><rect x="1174.8" y="435.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.8" y="446.0"></text>
</g>
<g>
<title>Compile::Optimize() (46 samples, 0.88%)</title><rect x="1175.3" y="483.0" width="10.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.3" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (42 samples, 0.81%)</title><rect x="1175.5" y="467.0" width="9.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.5" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (32 samples, 0.61%)</title><rect x="1176.0" y="451.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.0" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (31 samples, 0.59%)</title><rect x="1176.2" y="435.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.2" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (27 samples, 0.52%)</title><rect x="1176.2" y="419.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.2" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (2 samples, 0.04%)</title><rect x="1176.6" y="403.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.6" y="414.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (23 samples, 0.44%)</title><rect x="1177.1" y="403.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.1" y="414.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (5 samples, 0.10%)</title><rect x="1177.3" y="387.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.3" y="398.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (17 samples, 0.33%)</title><rect x="1178.5" y="387.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.5" y="398.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (15 samples, 0.29%)</title><rect x="1178.9" y="371.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.9" y="382.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (8 samples, 0.15%)</title><rect x="1180.5" y="355.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.5" y="366.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (2 samples, 0.04%)</title><rect x="1182.5" y="419.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.5" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (2 samples, 0.04%)</title><rect x="1182.5" y="403.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.5" y="414.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (2 samples, 0.04%)</title><rect x="1182.5" y="387.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.5" y="398.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (5 samples, 0.10%)</title><rect x="1183.4" y="451.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.4" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (4 samples, 0.08%)</title><rect x="1183.7" y="435.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.7" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (3 samples, 0.06%)</title><rect x="1183.9" y="419.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.9" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (3 samples, 0.06%)</title><rect x="1183.9" y="403.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.9" y="414.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (3 samples, 0.06%)</title><rect x="1183.9" y="387.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.9" y="398.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (2 samples, 0.04%)</title><rect x="1183.9" y="371.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.9" y="382.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.04%)</title><rect x="1184.6" y="451.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.6" y="462.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.04%)</title><rect x="1184.6" y="435.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.6" y="446.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.04%)</title><rect x="1185.0" y="467.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.0" y="478.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.04%)</title><rect x="1185.0" y="451.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.0" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.15%)</title><rect x="1185.9" y="483.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.9" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.15%)</title><rect x="1185.9" y="467.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.15%)</title><rect x="1185.9" y="451.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.15%)</title><rect x="1185.9" y="435.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.13%)</title><rect x="1185.9" y="419.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.9" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.13%)</title><rect x="1185.9" y="403.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.9" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.13%)</title><rect x="1185.9" y="387.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.13%)</title><rect x="1185.9" y="371.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.13%)</title><rect x="1185.9" y="355.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.12%)</title><rect x="1185.9" y="339.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.9" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.10%)</title><rect x="1186.2" y="323.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.2" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.10%)</title><rect x="1186.2" y="307.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.10%)</title><rect x="1186.2" y="291.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.10%)</title><rect x="1186.2" y="275.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.10%)</title><rect x="1186.2" y="259.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.2" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.10%)</title><rect x="1186.2" y="243.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.2" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.10%)</title><rect x="1186.2" y="227.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.10%)</title><rect x="1186.2" y="211.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.10%)</title><rect x="1186.2" y="195.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.06%)</title><rect x="1186.2" y="179.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.2" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="1186.2" y="163.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.2" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.06%)</title><rect x="1186.2" y="147.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.2" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.06%)</title><rect x="1186.2" y="131.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.2" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.06%)</title><rect x="1186.2" y="115.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.2" y="126.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.06%)</title><rect x="1186.2" y="99.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.2" y="110.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1186.4" y="83.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.4" y="94.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1186.4" y="67.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.4" y="78.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1186.4" y="51.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.4" y="62.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1186.4" y="35.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.4" y="46.0"></text>
</g>
<g>
<title>[tid=18947] (2 samples, 0.04%)</title><rect x="1188.0" y="675.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1191.0" y="686.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.04%)</title><rect x="1188.0" y="659.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1191.0" y="670.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.04%)</title><rect x="1188.0" y="643.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1191.0" y="654.0"></text>
</g>
<g>
<title>_pthread_body (2 samples, 0.04%)</title><rect x="1188.0" y="627.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1191.0" y="638.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.04%)</title><rect x="1188.0" y="611.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1191.0" y="622.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.04%)</title><rect x="1188.0" y="595.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.0" y="606.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (2 samples, 0.04%)</title><rect x="1188.0" y="579.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.0" y="590.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (2 samples, 0.04%)</title><rect x="1188.0" y="563.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.0" y="574.0"></text>
</g>
<g>
<title>[tid=22531] (6 samples, 0.12%)</title><rect x="1188.6" y="675.0" width="1.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1191.6" y="686.0"></text>
</g>
<g>
<title>thread_start (6 samples, 0.12%)</title><rect x="1188.6" y="659.0" width="1.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1191.6" y="670.0"></text>
</g>
<g>
<title>_pthread_start (6 samples, 0.12%)</title><rect x="1188.6" y="643.0" width="1.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1191.6" y="654.0"></text>
</g>
<g>
<title>_pthread_body (6 samples, 0.12%)</title><rect x="1188.6" y="627.0" width="1.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1191.6" y="638.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (6 samples, 0.12%)</title><rect x="1188.6" y="611.0" width="1.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1191.6" y="622.0"></text>
</g>
<g>
<title>Thread::call_run() (6 samples, 0.12%)</title><rect x="1188.6" y="595.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.6" y="606.0"></text>
</g>
<g>
<title>WatcherThread::run() (6 samples, 0.12%)</title><rect x="1188.6" y="579.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.6" y="590.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (6 samples, 0.12%)</title><rect x="1188.6" y="563.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.6" y="574.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (5 samples, 0.10%)</title><rect x="1188.9" y="547.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.9" y="558.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (5 samples, 0.10%)</title><rect x="1188.9" y="531.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.9" y="542.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 0.10%)</title><rect x="1188.9" y="515.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.9" y="526.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.08%)</title><rect x="1188.9" y="499.0" width="0.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1191.9" y="510.0"></text>
</g>
</g>
</svg>
