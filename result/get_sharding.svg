<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1414" onload="init(evt)" viewBox="0 0 1200 1414" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1397"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1397"> </text>
<g id="frames">
<g>
<title>all (1,069 samples, 100.00%)</title><rect x="10.0" y="1363.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="1374.0">all</text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.09%)</title><rect x="10.0" y="1347.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.09%)</title><rect x="11.1" y="1347.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.1" y="1358.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.09%)</title><rect x="11.1" y="1331.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="14.1" y="1342.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(Thread*) (1 samples, 0.09%)</title><rect x="11.1" y="1315.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="14.1" y="1326.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (1 samples, 0.09%)</title><rect x="11.1" y="1299.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.1" y="1310.0"></text>
</g>
<g>
<title>InterpreterRuntime::prepare_native_call(JavaThread*, Method*) (1 samples, 0.09%)</title><rect x="12.2" y="1347.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="15.2" y="1358.0"></text>
</g>
<g>
<title>NativeLookup::lookup(methodHandle const&amp;, bool&amp;, Thread*) (1 samples, 0.09%)</title><rect x="12.2" y="1331.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="15.2" y="1342.0"></text>
</g>
<g>
<title>NativeLookup::lookup_base(methodHandle const&amp;, bool&amp;, Thread*) (1 samples, 0.09%)</title><rect x="12.2" y="1315.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="15.2" y="1326.0"></text>
</g>
<g>
<title>NativeLookup::lookup_entry(methodHandle const&amp;, bool&amp;, Thread*) (1 samples, 0.09%)</title><rect x="12.2" y="1299.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="15.2" y="1310.0"></text>
</g>
<g>
<title>NativeLookup::lookup_style(methodHandle const&amp;, char*, char const*, int, bool, bool&amp;, Thread*) (1 samples, 0.09%)</title><rect x="12.2" y="1283.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="15.2" y="1294.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.09%)</title><rect x="12.2" y="1267.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="15.2" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="12.2" y="1251.0" width="1.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="15.2" y="1262.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.09%)</title><rect x="12.2" y="1235.0" width="1.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="15.2" y="1246.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (4 samples, 0.37%)</title><rect x="13.3" y="1347.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="16.3" y="1358.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="14.4" y="1331.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="17.4" y="1342.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.09%)</title><rect x="14.4" y="1315.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="17.4" y="1326.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.09%)</title><rect x="15.5" y="1331.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="18.5" y="1342.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.09%)</title><rect x="15.5" y="1315.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="18.5" y="1326.0"></text>
</g>
<g>
<title>update_heuristics(oopDesc*, bool) (1 samples, 0.09%)</title><rect x="15.5" y="1299.0" width="1.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="18.5" y="1310.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_enter(Handle, BasicLock*, Thread*) (1 samples, 0.09%)</title><rect x="16.6" y="1331.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="19.6" y="1342.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.19%)</title><rect x="17.7" y="1347.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="20.7" y="1358.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.19%)</title><rect x="17.7" y="1331.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="20.7" y="1342.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.09%)</title><rect x="18.8" y="1315.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="21.8" y="1326.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.09%)</title><rect x="18.8" y="1299.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="21.8" y="1310.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.09%)</title><rect x="18.8" y="1283.0" width="1.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="21.8" y="1294.0"></text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 0.28%)</title><rect x="19.9" y="1347.0" width="3.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="22.9" y="1358.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.09%)</title><rect x="19.9" y="1331.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="22.9" y="1342.0"></text>
</g>
<g>
<title>SharedRuntime::fixup_callers_callsite(Method*, unsigned char*) (1 samples, 0.09%)</title><rect x="21.0" y="1331.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="24.0" y="1342.0"></text>
</g>
<g>
<title>DirectNativeCallWrapper::set_destination_mt_safe(unsigned char*) (1 samples, 0.09%)</title><rect x="21.0" y="1315.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="24.0" y="1326.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="22.1" y="1331.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="25.1" y="1342.0"></text>
</g>
<g>
<title>[unknown_Java] (5 samples, 0.47%)</title><rect x="23.2" y="1347.0" width="5.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="26.2" y="1358.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="27.7" y="1331.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="30.7" y="1342.0"></text>
</g>
<g>
<title>_res (1 samples, 0.09%)</title><rect x="27.7" y="1315.0" width="1.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="30.7" y="1326.0"></text>
</g>
<g>
<title>one/nio/server/AcceptorThread.run (248 samples, 23.20%)</title><rect x="28.8" y="1347.0" width="273.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="31.8" y="1358.0">one/nio/server/AcceptorThread.run</text>
</g>
<g>
<title>I2C/C2I adapters (2 samples, 0.19%)</title><rect x="34.3" y="1331.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="37.3" y="1342.0"></text>
</g>
<g>
<title>one/nio/net/Socket.acceptNonBlocking (193 samples, 18.05%)</title><rect x="36.5" y="1331.0" width="213.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="39.5" y="1342.0">one/nio/net/Socket.acceptNon..</text>
</g>
<g>
<title>one/nio/net/JavaServerSocket.accept (178 samples, 16.65%)</title><rect x="37.6" y="1315.0" width="196.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="40.6" y="1326.0">one/nio/net/JavaServerSock..</text>
</g>
<g>
<title>one/nio/net/JavaServerSocket.accept (178 samples, 16.65%)</title><rect x="37.6" y="1299.0" width="196.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="40.6" y="1310.0">one/nio/net/JavaServerSock..</text>
</g>
<g>
<title>sun/nio/ch/ServerSocketChannelImpl.accept (178 samples, 16.65%)</title><rect x="37.6" y="1283.0" width="196.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="40.6" y="1294.0">sun/nio/ch/ServerSocketCha..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.09%)</title><rect x="38.7" y="1267.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="41.7" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.09%)</title><rect x="38.7" y="1251.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="41.7" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.09%)</title><rect x="38.7" y="1235.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="41.7" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.09%)</title><rect x="38.7" y="1219.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="41.7" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.09%)</title><rect x="38.7" y="1203.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="41.7" y="1214.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.configureBlocking (5 samples, 0.47%)</title><rect x="39.8" y="1267.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="42.8" y="1278.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_IOUtil_configureBlocking (4 samples, 0.37%)</title><rect x="39.8" y="1251.0" width="4.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="42.8" y="1262.0"></text>
</g>
<g>
<title>configureBlocking (4 samples, 0.37%)</title><rect x="39.8" y="1235.0" width="4.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="42.8" y="1246.0"></text>
</g>
<g>
<title>__fcntl (4 samples, 0.37%)</title><rect x="39.8" y="1219.0" width="4.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="42.8" y="1230.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.findNative (1 samples, 0.09%)</title><rect x="44.2" y="1251.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="47.2" y="1262.0"></text>
</g>
<g>
<title>java/lang/ClassLoader$NativeLibrary.findEntry (1 samples, 0.09%)</title><rect x="44.2" y="1235.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="47.2" y="1246.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_00024NativeLibrary_findEntry (1 samples, 0.09%)</title><rect x="44.2" y="1219.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="47.2" y="1230.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.09%)</title><rect x="44.2" y="1203.0" width="1.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="47.2" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="44.2" y="1187.0" width="1.1" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="47.2" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="44.2" y="1171.0" width="1.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="47.2" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="44.2" y="1155.0" width="1.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="47.2" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="44.2" y="1139.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="47.2" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="44.2" y="1123.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="47.2" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="44.2" y="1107.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="47.2" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="44.2" y="1091.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="47.2" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="44.2" y="1075.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="47.2" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="44.2" y="1059.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="47.2" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="44.2" y="1043.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="47.2" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/ServerSocketChannelImpl.accept (138 samples, 12.91%)</title><rect x="45.3" y="1267.0" width="152.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="48.3" y="1278.0">sun/nio/ch/ServerSo..</text>
</g>
<g>
<title>sun/nio/ch/ServerSocketChannelImpl.accept0 (138 samples, 12.91%)</title><rect x="45.3" y="1251.0" width="152.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="48.3" y="1262.0">sun/nio/ch/ServerSo..</text>
</g>
<g>
<title>JNI_OnLoad (1 samples, 0.09%)</title><rect x="47.5" y="1235.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="50.5" y="1246.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_ServerSocketChannelImpl_accept0 (38 samples, 3.55%)</title><rect x="48.6" y="1235.0" width="42.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="51.6" y="1246.0">Jav..</text>
</g>
<g>
<title>NET_IsIPv4Mapped (1 samples, 0.09%)</title><rect x="49.7" y="1219.0" width="1.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="52.7" y="1230.0"></text>
</g>
<g>
<title>NET_SockaddrToInetAddress (25 samples, 2.34%)</title><rect x="50.8" y="1219.0" width="27.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="53.8" y="1230.0">N..</text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (2 samples, 0.19%)</title><rect x="51.9" y="1203.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="54.9" y="1214.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.09%)</title><rect x="54.2" y="1203.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="57.2" y="1214.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.09%)</title><rect x="55.3" y="1203.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="58.3" y="1214.0"></text>
</g>
<g>
<title>NET_IsIPv4Mapped (1 samples, 0.09%)</title><rect x="56.4" y="1203.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="59.4" y="1214.0"></text>
</g>
<g>
<title>jni_NewObject (17 samples, 1.59%)</title><rect x="57.5" y="1203.0" width="18.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="60.5" y="1214.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (10 samples, 0.94%)</title><rect x="58.6" y="1187.0" width="11.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="61.6" y="1198.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (9 samples, 0.84%)</title><rect x="59.7" y="1171.0" width="9.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="62.7" y="1182.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (9 samples, 0.84%)</title><rect x="59.7" y="1155.0" width="9.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="62.7" y="1166.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_low_memory_detector() (1 samples, 0.09%)</title><rect x="61.9" y="1139.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="64.9" y="1150.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (6 samples, 0.56%)</title><rect x="63.0" y="1139.0" width="6.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="66.0" y="1150.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (6 samples, 0.56%)</title><rect x="63.0" y="1123.0" width="6.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="66.0" y="1134.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.09%)</title><rect x="69.6" y="1187.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="72.6" y="1198.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.09%)</title><rect x="69.6" y="1171.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="72.6" y="1182.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.09%)</title><rect x="69.6" y="1155.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="72.6" y="1166.0"></text>
</g>
<g>
<title>alloc_object(_jclass*, Thread*) (1 samples, 0.09%)</title><rect x="70.7" y="1187.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="73.7" y="1198.0"></text>
</g>
<g>
<title>InstanceKlass::check_valid_for_instantiation(bool, Thread*) (1 samples, 0.09%)</title><rect x="70.7" y="1171.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="73.7" y="1182.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (4 samples, 0.37%)</title><rect x="71.8" y="1187.0" width="4.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="74.8" y="1198.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.09%)</title><rect x="71.8" y="1171.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="74.8" y="1182.0"></text>
</g>
<g>
<title>Fingerprinter::Fingerprinter(methodHandle const&amp;) (1 samples, 0.09%)</title><rect x="72.9" y="1171.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="75.9" y="1182.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (1 samples, 0.09%)</title><rect x="74.0" y="1171.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="77.0" y="1182.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.09%)</title><rect x="75.1" y="1171.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="78.1" y="1182.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.09%)</title><rect x="76.2" y="1203.0" width="1.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="79.2" y="1214.0"></text>
</g>
<g>
<title>setInet6Address_scopeid (1 samples, 0.09%)</title><rect x="77.3" y="1203.0" width="1.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="80.3" y="1214.0"></text>
</g>
<g>
<title>jni_GetObjectField (1 samples, 0.09%)</title><rect x="77.3" y="1187.0" width="1.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="80.3" y="1198.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.09%)</title><rect x="78.4" y="1219.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="81.4" y="1230.0"></text>
</g>
<g>
<title>jni_NewObject (5 samples, 0.47%)</title><rect x="79.5" y="1219.0" width="5.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="82.5" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="79.5" y="1203.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="82.5" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.09%)</title><rect x="79.5" y="1187.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="82.5" y="1198.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.09%)</title><rect x="79.5" y="1171.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="82.5" y="1182.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.09%)</title><rect x="79.5" y="1155.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="82.5" y="1166.0"></text>
</g>
<g>
<title>alloc_object(_jclass*, Thread*) (1 samples, 0.09%)</title><rect x="80.6" y="1203.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="83.6" y="1214.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (3 samples, 0.28%)</title><rect x="81.7" y="1203.0" width="3.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="84.7" y="1214.0"></text>
</g>
<g>
<title>Fingerprinter::Fingerprinter(methodHandle const&amp;) (1 samples, 0.09%)</title><rect x="81.7" y="1187.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="84.7" y="1198.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.09%)</title><rect x="81.7" y="1171.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="84.7" y="1182.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (1 samples, 0.09%)</title><rect x="81.7" y="1155.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="84.7" y="1166.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (1 samples, 0.09%)</title><rect x="82.9" y="1187.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="85.9" y="1198.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.09%)</title><rect x="84.0" y="1187.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="87.0" y="1198.0"></text>
</g>
<g>
<title>jni_SetIntField (2 samples, 0.19%)</title><rect x="85.1" y="1219.0" width="2.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="88.1" y="1230.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.09%)</title><rect x="86.2" y="1203.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="89.2" y="1214.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (1 samples, 0.09%)</title><rect x="86.2" y="1187.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="89.2" y="1198.0"></text>
</g>
<g>
<title>EnableIf&lt;HasDecorator&lt;1097844ull, MO_UNORDERED&gt;::value, oopDesc*&gt;::type RawAccessBarrier&lt;1097844ull&gt;::load_internal&lt;1097844ull, oopDesc*&gt;(void*) (1 samples, 0.09%)</title><rect x="86.2" y="1171.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="89.2" y="1182.0"></text>
</g>
<g>
<title>jni_SetObjectArrayElement (2 samples, 0.19%)</title><rect x="87.3" y="1219.0" width="2.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="90.3" y="1230.0"></text>
</g>
<g>
<title>void ModRefBarrierSet::AccessBarrier&lt;2670710ull, G1BarrierSet&gt;::oop_store_in_heap&lt;unsigned int&gt;(unsigned int*, oopDesc*) (2 samples, 0.19%)</title><rect x="87.3" y="1203.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="90.3" y="1214.0"></text>
</g>
<g>
<title>void ModRefBarrierSet::AccessBarrier&lt;2670710ull, G1BarrierSet&gt;::oop_store_in_heap&lt;unsigned int&gt;(unsigned int*, oopDesc*) (1 samples, 0.09%)</title><rect x="89.5" y="1219.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="92.5" y="1230.0"></text>
</g>
<g>
<title>__accept (95 samples, 8.89%)</title><rect x="90.6" y="1235.0" width="104.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="93.6" y="1246.0">__accept</text>
</g>
<g>
<title>java/net/Inet6Address.&lt;init&gt; (1 samples, 0.09%)</title><rect x="195.4" y="1235.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="198.4" y="1246.0"></text>
</g>
<g>
<title>java/net/InetAddress.&lt;init&gt; (1 samples, 0.09%)</title><rect x="195.4" y="1219.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="198.4" y="1230.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress.&lt;init&gt; (1 samples, 0.09%)</title><rect x="196.5" y="1235.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="199.5" y="1246.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress$InetSocketAddressHolder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="196.5" y="1219.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="199.5" y="1230.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress.checkPort (1 samples, 0.09%)</title><rect x="196.5" y="1203.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="199.5" y="1214.0"></text>
</g>
<g>
<title>sun/nio/ch/ServerSocketChannelImpl.begin (1 samples, 0.09%)</title><rect x="197.7" y="1267.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="200.7" y="1278.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.09%)</title><rect x="197.7" y="1251.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="200.7" y="1262.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_NativeThread_current (1 samples, 0.09%)</title><rect x="197.7" y="1235.0" width="1.1" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="200.7" y="1246.0"></text>
</g>
<g>
<title>sun/nio/ch/ServerSocketChannelImpl.end (2 samples, 0.19%)</title><rect x="198.8" y="1267.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="201.8" y="1278.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.&lt;init&gt; (30 samples, 2.81%)</title><rect x="201.0" y="1267.0" width="33.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="204.0" y="1278.0">su..</text>
</g>
<g>
<title>java/nio/channels/SocketChannel.&lt;init&gt; (2 samples, 0.19%)</title><rect x="202.1" y="1251.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="205.1" y="1262.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.&lt;init&gt; (2 samples, 0.19%)</title><rect x="202.1" y="1235.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="205.1" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.&lt;init&gt; (1 samples, 0.09%)</title><rect x="204.3" y="1251.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="207.3" y="1262.0"></text>
</g>
<g>
<title>sun/nio/ch/Net.localAddress (26 samples, 2.43%)</title><rect x="205.4" y="1251.0" width="28.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="208.4" y="1262.0">su..</text>
</g>
<g>
<title>java/net/InetSocketAddress.&lt;init&gt; (1 samples, 0.09%)</title><rect x="206.5" y="1235.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="209.5" y="1246.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress$InetSocketAddressHolder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="206.5" y="1219.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="209.5" y="1230.0"></text>
</g>
<g>
<title>sun/nio/ch/Net.localInetAddress (19 samples, 1.78%)</title><rect x="207.6" y="1235.0" width="21.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="210.6" y="1246.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_Net_localInetAddress (12 samples, 1.12%)</title><rect x="207.6" y="1219.0" width="13.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="210.6" y="1230.0"></text>
</g>
<g>
<title>NET_SockaddrToInetAddress (10 samples, 0.94%)</title><rect x="208.7" y="1203.0" width="11.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="211.7" y="1214.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.09%)</title><rect x="208.7" y="1187.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="211.7" y="1198.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.09%)</title><rect x="208.7" y="1171.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="211.7" y="1182.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.09%)</title><rect x="208.7" y="1155.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="211.7" y="1166.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.09%)</title><rect x="208.7" y="1139.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="211.7" y="1150.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.09%)</title><rect x="208.7" y="1123.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="211.7" y="1134.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.09%)</title><rect x="208.7" y="1107.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="211.7" y="1118.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.09%)</title><rect x="208.7" y="1091.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="211.7" y="1102.0"></text>
</g>
<g>
<title>jni_NewObject (3 samples, 0.28%)</title><rect x="209.8" y="1187.0" width="3.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="212.8" y="1198.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="209.8" y="1171.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="212.8" y="1182.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.09%)</title><rect x="209.8" y="1155.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="212.8" y="1166.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.09%)</title><rect x="209.8" y="1139.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="212.8" y="1150.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.09%)</title><rect x="209.8" y="1123.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="212.8" y="1134.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.09%)</title><rect x="210.9" y="1171.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="213.9" y="1182.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (1 samples, 0.09%)</title><rect x="212.0" y="1171.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="215.0" y="1182.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="212.0" y="1155.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="215.0" y="1166.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.09%)</title><rect x="212.0" y="1139.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="215.0" y="1150.0"></text>
</g>
<g>
<title>setInet6Address_ipaddress (3 samples, 0.28%)</title><rect x="213.1" y="1187.0" width="3.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="216.1" y="1198.0"></text>
</g>
<g>
<title>jni_GetObjectField (3 samples, 0.28%)</title><rect x="213.1" y="1171.0" width="3.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="216.1" y="1182.0"></text>
</g>
<g>
<title>AccessBarrierSupport::resolve_unknown_oop_ref_strength(unsigned long long, oopDesc*, long) (1 samples, 0.09%)</title><rect x="214.2" y="1155.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="217.2" y="1166.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.09%)</title><rect x="215.3" y="1155.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="218.3" y="1166.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.09%)</title><rect x="215.3" y="1139.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="218.3" y="1150.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.09%)</title><rect x="215.3" y="1123.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="218.3" y="1134.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.09%)</title><rect x="215.3" y="1107.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="218.3" y="1118.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.09%)</title><rect x="215.3" y="1091.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="218.3" y="1102.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.09%)</title><rect x="215.3" y="1075.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="218.3" y="1086.0"></text>
</g>
<g>
<title>setInet6Address_scopeid (3 samples, 0.28%)</title><rect x="216.4" y="1187.0" width="3.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="219.4" y="1198.0"></text>
</g>
<g>
<title>jni_GetObjectField (1 samples, 0.09%)</title><rect x="216.4" y="1171.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="219.4" y="1182.0"></text>
</g>
<g>
<title>G1BarrierSet::enqueue_if_weak(unsigned long long, oopDesc*) (1 samples, 0.09%)</title><rect x="216.4" y="1155.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="219.4" y="1166.0"></text>
</g>
<g>
<title>jni_SetIntField (2 samples, 0.19%)</title><rect x="217.5" y="1171.0" width="2.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="220.5" y="1182.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.09%)</title><rect x="217.5" y="1155.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="220.5" y="1166.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.09%)</title><rect x="218.6" y="1155.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="221.6" y="1166.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (1 samples, 0.09%)</title><rect x="218.6" y="1139.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="221.6" y="1150.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::load&lt;oopDesc*&gt;(void*) (1 samples, 0.09%)</title><rect x="218.6" y="1123.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="221.6" y="1134.0"></text>
</g>
<g>
<title>setInetAddress_family (1 samples, 0.09%)</title><rect x="219.7" y="1203.0" width="1.1" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="222.7" y="1214.0"></text>
</g>
<g>
<title>__getsockname (7 samples, 0.65%)</title><rect x="220.8" y="1219.0" width="7.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="223.8" y="1230.0"></text>
</g>
<g>
<title>sun/nio/ch/Net.localPort (5 samples, 0.47%)</title><rect x="228.6" y="1235.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="231.6" y="1246.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_Net_localPort (1 samples, 0.09%)</title><rect x="228.6" y="1219.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="231.6" y="1230.0"></text>
</g>
<g>
<title>__getsockname (4 samples, 0.37%)</title><rect x="229.7" y="1219.0" width="4.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="232.7" y="1230.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.setBlocking (14 samples, 1.31%)</title><rect x="234.1" y="1315.0" width="15.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="237.1" y="1326.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.configureBlocking (13 samples, 1.22%)</title><rect x="235.2" y="1299.0" width="14.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="238.2" y="1310.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.implConfigureBlocking (11 samples, 1.03%)</title><rect x="237.4" y="1283.0" width="12.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="240.4" y="1294.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.configureBlocking (11 samples, 1.03%)</title><rect x="237.4" y="1267.0" width="12.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="240.4" y="1278.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_IOUtil_configureBlocking (11 samples, 1.03%)</title><rect x="237.4" y="1251.0" width="12.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="240.4" y="1262.0"></text>
</g>
<g>
<title>__fcntl (9 samples, 0.84%)</title><rect x="237.4" y="1235.0" width="9.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="240.4" y="1246.0"></text>
</g>
<g>
<title>configureBlocking (2 samples, 0.19%)</title><rect x="247.3" y="1235.0" width="2.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="250.3" y="1246.0"></text>
</g>
<g>
<title>__fcntl (2 samples, 0.19%)</title><rect x="247.3" y="1219.0" width="2.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="250.3" y="1230.0"></text>
</g>
<g>
<title>one/nio/server/Server.register (39 samples, 3.65%)</title><rect x="249.5" y="1331.0" width="43.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="252.5" y="1342.0">one/..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.register (35 samples, 3.27%)</title><rect x="250.6" y="1315.0" width="38.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="253.6" y="1326.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.enable (35 samples, 3.27%)</title><rect x="250.6" y="1299.0" width="38.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="253.6" y="1310.0">one..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.add (4 samples, 0.37%)</title><rect x="250.6" y="1283.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="253.6" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.offer (3 samples, 0.28%)</title><rect x="251.7" y="1267.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="254.7" y="1278.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.09%)</title><rect x="253.9" y="1251.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="256.9" y="1262.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.weakCompareAndSet (1 samples, 0.09%)</title><rect x="253.9" y="1235.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="256.9" y="1246.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.weakCompareAndSetReference (1 samples, 0.09%)</title><rect x="253.9" y="1219.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="256.9" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.compareAndSetReference (1 samples, 0.09%)</title><rect x="253.9" y="1203.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="256.9" y="1214.0"></text>
</g>
<g>
<title>Unsafe_CompareAndSetReference(JNIEnv_*, _jobject*, _jobject*, long, _jobject*, _jobject*) (1 samples, 0.09%)</title><rect x="253.9" y="1187.0" width="1.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="256.9" y="1198.0"></text>
</g>
<g>
<title>oopDesc* ModRefBarrierSet::AccessBarrier&lt;804918ull, G1BarrierSet&gt;::oop_atomic_cmpxchg_in_heap&lt;unsigned int&gt;(oopDesc*, unsigned int*, oopDesc*) (1 samples, 0.09%)</title><rect x="253.9" y="1171.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="256.9" y="1182.0"></text>
</g>
<g>
<title>G1BarrierSet::enqueue(oopDesc*) (1 samples, 0.09%)</title><rect x="253.9" y="1155.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="256.9" y="1166.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.wakeup (31 samples, 2.90%)</title><rect x="255.1" y="1283.0" width="34.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="258.1" y="1294.0">su..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.09%)</title><rect x="255.1" y="1267.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="258.1" y="1278.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (1 samples, 0.09%)</title><rect x="255.1" y="1251.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="258.1" y="1262.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.09%)</title><rect x="255.1" y="1235.0" width="1.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="258.1" y="1246.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.09%)</title><rect x="255.1" y="1219.0" width="1.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="258.1" y="1230.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write1 (30 samples, 2.81%)</title><rect x="256.2" y="1267.0" width="33.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="259.2" y="1278.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_IOUtil_write1 (1 samples, 0.09%)</title><rect x="256.2" y="1251.0" width="1.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="259.2" y="1262.0"></text>
</g>
<g>
<title>write (29 samples, 2.71%)</title><rect x="257.3" y="1251.0" width="32.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="260.3" y="1262.0">wr..</text>
</g>
<g>
<title>one/nio/server/Server.getSmallestSelector (3 samples, 0.28%)</title><rect x="289.3" y="1315.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="292.3" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadLocalRandom.nextInt (3 samples, 0.28%)</title><rect x="289.3" y="1299.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="292.3" y="1310.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.28%)</title><rect x="289.3" y="1283.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="292.3" y="1294.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (3 samples, 0.28%)</title><rect x="289.3" y="1267.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="292.3" y="1278.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.09%)</title><rect x="290.4" y="1251.0" width="1.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="293.4" y="1262.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.09%)</title><rect x="291.5" y="1251.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="294.5" y="1262.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.09%)</title><rect x="291.5" y="1235.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="294.5" y="1246.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.09%)</title><rect x="291.5" y="1219.0" width="1.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="294.5" y="1230.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.createSession (9 samples, 0.84%)</title><rect x="292.6" y="1331.0" width="9.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="295.6" y="1342.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.createSession (9 samples, 0.84%)</title><rect x="292.6" y="1315.0" width="9.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="295.6" y="1326.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/StorageSession.&lt;init&gt; (9 samples, 0.84%)</title><rect x="292.6" y="1299.0" width="9.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="295.6" y="1310.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.&lt;init&gt; (9 samples, 0.84%)</title><rect x="292.6" y="1283.0" width="9.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="295.6" y="1294.0"></text>
</g>
<g>
<title>one/nio/net/Session.&lt;init&gt; (1 samples, 0.09%)</title><rect x="300.3" y="1267.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="303.3" y="1278.0"></text>
</g>
<g>
<title>one/nio/net/Session.&lt;init&gt; (1 samples, 0.09%)</title><rect x="300.3" y="1251.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="303.3" y="1262.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="300.3" y="1235.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="303.3" y="1246.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.09%)</title><rect x="300.3" y="1219.0" width="1.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="303.3" y="1230.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="301.4" y="1267.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="304.4" y="1278.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.09%)</title><rect x="301.4" y="1251.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="304.4" y="1262.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.09%)</title><rect x="301.4" y="1235.0" width="1.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="304.4" y="1246.0"></text>
</g>
<g>
<title>_res (1 samples, 0.09%)</title><rect x="301.4" y="1219.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="304.4" y="1230.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (419 samples, 39.20%)</title><rect x="302.5" y="1347.0" width="462.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="305.5" y="1358.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>I2C/C2I adapters (5 samples, 0.47%)</title><rect x="316.9" y="1331.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="319.9" y="1342.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (1 samples, 0.09%)</title><rect x="322.4" y="1331.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="325.4" y="1342.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (225 samples, 21.05%)</title><rect x="323.5" y="1331.0" width="248.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="326.5" y="1342.0">one/nio/net/JavaSelector.select</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (3 samples, 0.28%)</title><rect x="323.5" y="1315.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="326.5" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.19%)</title><rect x="323.5" y="1299.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="326.5" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.09%)</title><rect x="324.6" y="1283.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="327.6" y="1294.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (1 samples, 0.09%)</title><rect x="325.7" y="1299.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="328.7" y="1310.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.09%)</title><rect x="325.7" y="1283.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="328.7" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.09%)</title><rect x="325.7" y="1267.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="328.7" y="1278.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (10 samples, 0.94%)</title><rect x="326.8" y="1315.0" width="11.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="329.8" y="1326.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.register (8 samples, 0.75%)</title><rect x="327.9" y="1299.0" width="8.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="330.9" y="1310.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.addKey (1 samples, 0.09%)</title><rect x="327.9" y="1283.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="330.9" y="1294.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.register (7 samples, 0.65%)</title><rect x="329.0" y="1283.0" width="7.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="332.0" y="1294.0"></text>
</g>
<g>
<title>java/nio/channels/SelectionKey.attach (1 samples, 0.09%)</title><rect x="330.1" y="1267.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="333.1" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$KeySetView.add (5 samples, 0.47%)</title><rect x="331.2" y="1267.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="334.2" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.putVal (4 samples, 0.37%)</title><rect x="332.3" y="1251.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="335.3" y="1262.0"></text>
</g>
<g>
<title>java/lang/Object.hashCode (3 samples, 0.28%)</title><rect x="332.3" y="1235.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="335.3" y="1246.0"></text>
</g>
<g>
<title>JVM_IHashCode (2 samples, 0.19%)</title><rect x="333.4" y="1219.0" width="2.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="336.4" y="1230.0"></text>
</g>
<g>
<title>ObjectSynchronizer::FastHashCode(Thread*, oopDesc*) (1 samples, 0.09%)</title><rect x="333.4" y="1203.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="336.4" y="1214.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.09%)</title><rect x="334.5" y="1203.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="337.5" y="1214.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.09%)</title><rect x="334.5" y="1187.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="337.5" y="1198.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.09%)</title><rect x="334.5" y="1171.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="337.5" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$Node.&lt;init&gt; (1 samples, 0.09%)</title><rect x="335.6" y="1235.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="338.6" y="1246.0"></text>
</g>
<g>
<title>java/lang/Object.hashCode (1 samples, 0.09%)</title><rect x="335.6" y="1219.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="338.6" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.09%)</title><rect x="336.7" y="1299.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="339.7" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (1 samples, 0.09%)</title><rect x="336.7" y="1283.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="339.7" y="1294.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.09%)</title><rect x="336.7" y="1267.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="339.7" y="1278.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.setRelease (1 samples, 0.09%)</title><rect x="336.7" y="1251.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="339.7" y="1262.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.09%)</title><rect x="336.7" y="1235.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="339.7" y="1246.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (211 samples, 19.74%)</title><rect x="337.8" y="1315.0" width="232.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="340.8" y="1326.0">sun/nio/ch/SelectorImpl.select</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (211 samples, 19.74%)</title><rect x="337.8" y="1299.0" width="232.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="340.8" y="1310.0">sun/nio/ch/SelectorImpl.lockAnd..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (210 samples, 19.64%)</title><rect x="338.9" y="1283.0" width="231.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="341.9" y="1294.0">sun/nio/ch/KQueueSelectorImpl.d..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (133 samples, 12.44%)</title><rect x="338.9" y="1267.0" width="146.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="341.9" y="1278.0">sun/nio/ch/KQueue...</text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.09%)</title><rect x="340.0" y="1251.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="343.0" y="1262.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.09%)</title><rect x="340.0" y="1235.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="343.0" y="1246.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.09%)</title><rect x="340.0" y="1219.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="343.0" y="1230.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.09%)</title><rect x="340.0" y="1203.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="343.0" y="1214.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.09%)</title><rect x="340.0" y="1187.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="343.0" y="1198.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (1 samples, 0.09%)</title><rect x="340.0" y="1171.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="343.0" y="1182.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::create_native_wrapper(methodHandle const&amp;) (1 samples, 0.09%)</title><rect x="340.0" y="1155.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="343.0" y="1166.0"></text>
</g>
<g>
<title>SharedRuntime::generate_native_wrapper(MacroAssembler*, methodHandle const&amp;, int, BasicType*, VMRegPair*, BasicType) (1 samples, 0.09%)</title><rect x="340.0" y="1139.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="343.0" y="1150.0"></text>
</g>
<g>
<title>Method::critical_native_function() (1 samples, 0.09%)</title><rect x="340.0" y="1123.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="343.0" y="1134.0"></text>
</g>
<g>
<title>NativeLookup::lookup_critical_entry(methodHandle const&amp;) (1 samples, 0.09%)</title><rect x="340.0" y="1107.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="343.0" y="1118.0"></text>
</g>
<g>
<title>NativeLookup::lookup_critical_style(methodHandle const&amp;, char*, char const*, int, bool) (1 samples, 0.09%)</title><rect x="340.0" y="1091.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="343.0" y="1102.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.09%)</title><rect x="340.0" y="1075.0" width="1.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="343.0" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="340.0" y="1059.0" width="1.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="343.0" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="340.0" y="1043.0" width="1.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="343.0" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="340.0" y="1027.0" width="1.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="343.0" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="340.0" y="1011.0" width="1.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="343.0" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="340.0" y="995.0" width="1.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="343.0" y="1006.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (2 samples, 0.19%)</title><rect x="341.2" y="1251.0" width="2.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="344.2" y="1262.0"></text>
</g>
<g>
<title>kevent (129 samples, 12.07%)</title><rect x="343.4" y="1251.0" width="142.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="346.4" y="1262.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (14 samples, 1.31%)</title><rect x="485.8" y="1267.0" width="15.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="488.8" y="1278.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.getDescriptor (1 samples, 0.09%)</title><rect x="485.8" y="1251.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="488.8" y="1262.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.clearInterrupt (10 samples, 0.94%)</title><rect x="486.9" y="1251.0" width="11.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="489.9" y="1262.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.drain (10 samples, 0.94%)</title><rect x="486.9" y="1235.0" width="11.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="489.9" y="1246.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_IOUtil_drain (1 samples, 0.09%)</title><rect x="489.1" y="1219.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="492.1" y="1230.0"></text>
</g>
<g>
<title>read (7 samples, 0.65%)</title><rect x="490.2" y="1219.0" width="7.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="493.2" y="1230.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.28%)</title><rect x="497.9" y="1251.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="500.9" y="1262.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.09%)</title><rect x="497.9" y="1235.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="500.9" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.09%)</title><rect x="497.9" y="1219.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="500.9" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.09%)</title><rect x="497.9" y="1203.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="500.9" y="1214.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.translateAndSetReadyOps (2 samples, 0.19%)</title><rect x="499.0" y="1235.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="502.0" y="1246.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateAndSetReadyOps (2 samples, 0.19%)</title><rect x="499.0" y="1219.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="502.0" y="1230.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateReadyOps (2 samples, 0.19%)</title><rect x="499.0" y="1203.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="502.0" y="1214.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.nioReadyOps (1 samples, 0.09%)</title><rect x="500.1" y="1187.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="503.1" y="1198.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (19 samples, 1.78%)</title><rect x="501.2" y="1267.0" width="21.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="504.2" y="1278.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.register (17 samples, 1.59%)</title><rect x="503.4" y="1251.0" width="18.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="506.4" y="1262.0"></text>
</g>
<g>
<title>kevent (16 samples, 1.50%)</title><rect x="504.5" y="1235.0" width="17.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="507.5" y="1246.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (5 samples, 0.47%)</title><rect x="522.2" y="1267.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="525.2" y="1278.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (5 samples, 0.47%)</title><rect x="522.2" y="1251.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="525.2" y="1262.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (3 samples, 0.28%)</title><rect x="523.3" y="1235.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="526.3" y="1246.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (3 samples, 0.28%)</title><rect x="523.3" y="1219.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="526.3" y="1230.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (3 samples, 0.28%)</title><rect x="523.3" y="1203.0" width="3.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="526.3" y="1214.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.09%)</title><rect x="524.4" y="1187.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="527.4" y="1198.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.09%)</title><rect x="525.5" y="1187.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="528.5" y="1198.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.09%)</title><rect x="526.6" y="1235.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="529.6" y="1246.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.09%)</title><rect x="526.6" y="1219.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="529.6" y="1230.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.09%)</title><rect x="526.6" y="1203.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="529.6" y="1214.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (39 samples, 3.65%)</title><rect x="527.7" y="1267.0" width="43.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="530.7" y="1278.0">sun/..</text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.isRegistered (1 samples, 0.09%)</title><rect x="528.8" y="1251.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="531.8" y="1262.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.cancelledKeys (1 samples, 0.09%)</title><rect x="529.9" y="1251.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="532.9" y="1262.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.deregister (1 samples, 0.09%)</title><rect x="531.0" y="1251.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="534.0" y="1262.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.channel (1 samples, 0.09%)</title><rect x="531.0" y="1235.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="534.0" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.replaceNode (1 samples, 0.09%)</title><rect x="531.0" y="1219.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="534.0" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.remove (1 samples, 0.09%)</title><rect x="532.1" y="1251.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="535.1" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.09%)</title><rect x="532.1" y="1235.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="535.1" y="1246.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.implDereg (14 samples, 1.31%)</title><rect x="533.2" y="1251.0" width="15.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="536.2" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.19%)</title><rect x="533.2" y="1235.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="536.2" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.19%)</title><rect x="533.2" y="1219.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="536.2" y="1230.0"></text>
</g>
<g>
<title>java/lang/Integer.hashCode (1 samples, 0.09%)</title><rect x="534.3" y="1203.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="537.3" y="1214.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.register (11 samples, 1.03%)</title><rect x="535.4" y="1235.0" width="12.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="538.4" y="1246.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_register (1 samples, 0.09%)</title><rect x="535.4" y="1219.0" width="1.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="538.4" y="1230.0"></text>
</g>
<g>
<title>kevent (10 samples, 0.94%)</title><rect x="536.5" y="1219.0" width="11.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="539.5" y="1230.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.registeredEvents (1 samples, 0.09%)</title><rect x="547.6" y="1235.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="550.6" y="1246.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.kill (20 samples, 1.87%)</title><rect x="548.7" y="1251.0" width="22.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="551.7" y="1262.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.close (20 samples, 1.87%)</title><rect x="548.7" y="1235.0" width="22.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="551.7" y="1246.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.close0 (20 samples, 1.87%)</title><rect x="548.7" y="1219.0" width="22.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="551.7" y="1230.0">s..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_close0 (2 samples, 0.19%)</title><rect x="548.7" y="1203.0" width="2.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="551.7" y="1214.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.09%)</title><rect x="549.8" y="1187.0" width="1.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="552.8" y="1198.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (18 samples, 1.68%)</title><rect x="550.9" y="1203.0" width="19.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="553.9" y="1214.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectedKeys (1 samples, 0.09%)</title><rect x="570.7" y="1315.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="573.7" y="1326.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (175 samples, 16.37%)</title><rect x="571.9" y="1331.0" width="193.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="574.9" y="1342.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (171 samples, 16.00%)</title><rect x="573.0" y="1315.0" width="188.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="576.0" y="1326.0">one/nio/http/HttpSession..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleSocketClosed (1 samples, 0.09%)</title><rect x="575.2" y="1299.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="578.2" y="1310.0"></text>
</g>
<g>
<title>one/nio/net/Session.scheduleClose (1 samples, 0.09%)</title><rect x="575.2" y="1283.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="578.2" y="1294.0"></text>
</g>
<g>
<title>one/nio/net/Session.close (1 samples, 0.09%)</title><rect x="575.2" y="1267.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="578.2" y="1278.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.close (1 samples, 0.09%)</title><rect x="575.2" y="1251.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="578.2" y="1262.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.close (1 samples, 0.09%)</title><rect x="575.2" y="1235.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="578.2" y="1246.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.implCloseChannel (1 samples, 0.09%)</title><rect x="575.2" y="1219.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="578.2" y="1230.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.implCloseSelectableChannel (1 samples, 0.09%)</title><rect x="575.2" y="1203.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="578.2" y="1214.0"></text>
</g>
<g>
<title>sun/nio/ch/Net.getSocketOption (1 samples, 0.09%)</title><rect x="575.2" y="1187.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="578.2" y="1198.0"></text>
</g>
<g>
<title>sun/nio/ch/Net.getIntOption0 (1 samples, 0.09%)</title><rect x="575.2" y="1171.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="578.2" y="1182.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.findNative (1 samples, 0.09%)</title><rect x="575.2" y="1155.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="578.2" y="1166.0"></text>
</g>
<g>
<title>java/lang/ClassLoader$NativeLibrary.findEntry (1 samples, 0.09%)</title><rect x="575.2" y="1139.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="578.2" y="1150.0"></text>
</g>
<g>
<title>JavaThread::check_special_condition_for_native_trans(JavaThread*) (1 samples, 0.09%)</title><rect x="575.2" y="1123.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="578.2" y="1134.0"></text>
</g>
<g>
<title>JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread*) (1 samples, 0.09%)</title><rect x="575.2" y="1107.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="578.2" y="1118.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.09%)</title><rect x="575.2" y="1091.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="578.2" y="1102.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="575.2" y="1075.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="578.2" y="1086.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="575.2" y="1059.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="578.2" y="1070.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.09%)</title><rect x="575.2" y="1043.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="578.2" y="1054.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.09%)</title><rect x="575.2" y="1027.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="578.2" y="1038.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (140 samples, 13.10%)</title><rect x="576.3" y="1299.0" width="154.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="579.3" y="1310.0">one/nio/http/HttpSes..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.09%)</title><rect x="576.3" y="1283.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="579.3" y="1294.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (129 samples, 12.07%)</title><rect x="577.4" y="1283.0" width="142.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="580.4" y="1294.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (129 samples, 12.07%)</title><rect x="577.4" y="1267.0" width="142.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="580.4" y="1278.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.09%)</title><rect x="577.4" y="1251.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="580.4" y="1262.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.handleDefault (128 samples, 11.97%)</title><rect x="578.5" y="1251.0" width="141.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="581.5" y="1262.0">ru/mail/polis/serv..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendError (128 samples, 11.97%)</title><rect x="578.5" y="1235.0" width="141.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="581.5" y="1246.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (67 samples, 6.27%)</title><rect x="581.8" y="1219.0" width="73.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="584.8" y="1230.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6 samples, 0.56%)</title><rect x="581.8" y="1203.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="584.8" y="1214.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (5 samples, 0.47%)</title><rect x="582.9" y="1187.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="585.9" y="1198.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.09%)</title><rect x="584.0" y="1171.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="587.0" y="1182.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (1 samples, 0.09%)</title><rect x="584.0" y="1155.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="587.0" y="1166.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.28%)</title><rect x="585.1" y="1171.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="588.1" y="1182.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (61 samples, 5.71%)</title><rect x="588.4" y="1203.0" width="67.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="591.4" y="1214.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/Session.write (61 samples, 5.71%)</title><rect x="588.4" y="1187.0" width="67.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="591.4" y="1198.0">one/nio..</text>
</g>
<g>
<title>java/lang/System.currentTimeMillis (1 samples, 0.09%)</title><rect x="588.4" y="1171.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="591.4" y="1182.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.09%)</title><rect x="588.4" y="1155.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="591.4" y="1166.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.09%)</title><rect x="588.4" y="1139.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="591.4" y="1150.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.09%)</title><rect x="588.4" y="1123.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="591.4" y="1134.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.09%)</title><rect x="588.4" y="1107.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="591.4" y="1118.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.09%)</title><rect x="588.4" y="1091.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="591.4" y="1102.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (1 samples, 0.09%)</title><rect x="588.4" y="1075.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="591.4" y="1086.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::create_native_wrapper(methodHandle const&amp;) (1 samples, 0.09%)</title><rect x="588.4" y="1059.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="591.4" y="1070.0"></text>
</g>
<g>
<title>SharedRuntime::generate_native_wrapper(MacroAssembler*, methodHandle const&amp;, int, BasicType*, VMRegPair*, BasicType) (1 samples, 0.09%)</title><rect x="588.4" y="1043.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="591.4" y="1054.0"></text>
</g>
<g>
<title>Method::critical_native_function() (1 samples, 0.09%)</title><rect x="588.4" y="1027.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="591.4" y="1038.0"></text>
</g>
<g>
<title>NativeLookup::lookup_critical_entry(methodHandle const&amp;) (1 samples, 0.09%)</title><rect x="588.4" y="1011.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="591.4" y="1022.0"></text>
</g>
<g>
<title>NativeLookup::lookup_critical_style(methodHandle const&amp;, char*, char const*, int, bool) (1 samples, 0.09%)</title><rect x="588.4" y="995.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="591.4" y="1006.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.09%)</title><rect x="588.4" y="979.0" width="1.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="591.4" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="588.4" y="963.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="591.4" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="588.4" y="947.0" width="1.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="591.4" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="588.4" y="931.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="591.4" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="588.4" y="915.0" width="1.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="591.4" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="588.4" y="899.0" width="1.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="591.4" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="588.4" y="883.0" width="1.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="591.4" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="588.4" y="867.0" width="1.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="591.4" y="878.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (60 samples, 5.61%)</title><rect x="589.5" y="1171.0" width="66.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="592.5" y="1182.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (60 samples, 5.61%)</title><rect x="589.5" y="1155.0" width="66.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="592.5" y="1166.0">one/nio..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (60 samples, 5.61%)</title><rect x="589.5" y="1139.0" width="66.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="592.5" y="1150.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (59 samples, 5.52%)</title><rect x="590.6" y="1123.0" width="65.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="593.6" y="1134.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (59 samples, 5.52%)</title><rect x="590.6" y="1107.0" width="65.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="593.6" y="1118.0">sun/nio..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (3 samples, 0.28%)</title><rect x="590.6" y="1091.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="593.6" y="1102.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (3 samples, 0.28%)</title><rect x="590.6" y="1075.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="593.6" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.28%)</title><rect x="590.6" y="1059.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="593.6" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory0 (3 samples, 0.28%)</title><rect x="590.6" y="1043.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="593.6" y="1054.0"></text>
</g>
<g>
<title>Unsafe_CopyMemory0(JNIEnv_*, _jobject*, _jobject*, long, _jobject*, long, long) (2 samples, 0.19%)</title><rect x="590.6" y="1027.0" width="2.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="593.6" y="1038.0"></text>
</g>
<g>
<title>JavaThread::check_is_terminated(JavaThread::TerminatedTypes) const (1 samples, 0.09%)</title><rect x="590.6" y="1011.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="593.6" y="1022.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ull, false&gt;(_jobject*) (1 samples, 0.09%)</title><rect x="591.7" y="1011.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="594.7" y="1022.0"></text>
</g>
<g>
<title>AccessInternal::OopLoadProxy&lt;oopDesc*, 1048576ull&gt;::OopLoadProxy(oopDesc**) (1 samples, 0.09%)</title><rect x="591.7" y="995.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="594.7" y="1006.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.09%)</title><rect x="592.8" y="1027.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="595.8" y="1038.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.flip (1 samples, 0.09%)</title><rect x="593.9" y="1091.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="596.9" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (52 samples, 4.86%)</title><rect x="595.0" y="1091.0" width="57.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="598.0" y="1102.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (51 samples, 4.77%)</title><rect x="596.1" y="1075.0" width="56.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="599.1" y="1086.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (51 samples, 4.77%)</title><rect x="596.1" y="1059.0" width="56.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="599.1" y="1070.0">sun/ni..</text>
</g>
<g>
<title>write (49 samples, 4.58%)</title><rect x="598.3" y="1043.0" width="54.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="601.3" y="1054.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.28%)</title><rect x="652.4" y="1091.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="655.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="653.5" y="1075.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="656.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="653.5" y="1059.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="656.5" y="1070.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.09%)</title><rect x="653.5" y="1043.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="656.5" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.09%)</title><rect x="654.6" y="1075.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="657.6" y="1086.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (3 samples, 0.28%)</title><rect x="655.7" y="1219.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="658.7" y="1230.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.19%)</title><rect x="656.8" y="1203.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="659.8" y="1214.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.09%)</title><rect x="658.0" y="1187.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="661.0" y="1198.0"></text>
</g>
<g>
<title>java/lang/Integer.stringSize (1 samples, 0.09%)</title><rect x="658.0" y="1171.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="661.0" y="1182.0"></text>
</g>
<g>
<title>one/nio/net/Session.scheduleClose (55 samples, 5.14%)</title><rect x="659.1" y="1219.0" width="60.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="662.1" y="1230.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/Session.close (55 samples, 5.14%)</title><rect x="659.1" y="1203.0" width="60.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="662.1" y="1214.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.unregister (5 samples, 0.47%)</title><rect x="660.2" y="1187.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="663.2" y="1198.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.disable (5 samples, 0.47%)</title><rect x="660.2" y="1171.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="663.2" y="1182.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectionKey.cancel (5 samples, 0.47%)</title><rect x="660.2" y="1155.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="663.2" y="1166.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.cancel (4 samples, 0.37%)</title><rect x="661.3" y="1139.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="664.3" y="1150.0"></text>
</g>
<g>
<title>java/util/HashSet.add (4 samples, 0.37%)</title><rect x="661.3" y="1123.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="664.3" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.37%)</title><rect x="661.3" y="1107.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="664.3" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.19%)</title><rect x="661.3" y="1091.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="664.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/Object.hashCode (2 samples, 0.19%)</title><rect x="661.3" y="1075.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="664.3" y="1086.0"></text>
</g>
<g>
<title>JVM_IHashCode (2 samples, 0.19%)</title><rect x="661.3" y="1059.0" width="2.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="664.3" y="1070.0"></text>
</g>
<g>
<title>ObjectSynchronizer::FastHashCode(Thread*, oopDesc*) (1 samples, 0.09%)</title><rect x="661.3" y="1043.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="664.3" y="1054.0"></text>
</g>
<g>
<title>JavaThread::is_lock_owned(unsigned char*) const (1 samples, 0.09%)</title><rect x="661.3" y="1027.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="664.3" y="1038.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.09%)</title><rect x="662.4" y="1043.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="665.4" y="1054.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.09%)</title><rect x="662.4" y="1027.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="665.4" y="1038.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.09%)</title><rect x="662.4" y="1011.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="665.4" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.19%)</title><rect x="663.5" y="1091.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="666.5" y="1102.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.close (49 samples, 4.58%)</title><rect x="665.7" y="1187.0" width="54.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="668.7" y="1198.0">one/n..</text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.close (49 samples, 4.58%)</title><rect x="665.7" y="1171.0" width="54.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="668.7" y="1182.0">java/..</text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.implCloseChannel (49 samples, 4.58%)</title><rect x="665.7" y="1155.0" width="54.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="668.7" y="1166.0">java/..</text>
</g>
<g>
<title>java/lang/Object.clone (1 samples, 0.09%)</title><rect x="667.9" y="1139.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="670.9" y="1150.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (1 samples, 0.09%)</title><rect x="667.9" y="1123.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="670.9" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.implCloseSelectableChannel (46 samples, 4.30%)</title><rect x="669.0" y="1139.0" width="50.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="672.0" y="1150.0">sun/n..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.09%)</title><rect x="670.1" y="1123.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="673.1" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.09%)</title><rect x="670.1" y="1107.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="673.1" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.09%)</title><rect x="670.1" y="1091.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="673.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.09%)</title><rect x="671.2" y="1123.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="674.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="671.2" y="1107.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="674.2" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/Net.getSocketOption (12 samples, 1.12%)</title><rect x="672.3" y="1123.0" width="13.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="675.3" y="1134.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.09%)</title><rect x="672.3" y="1107.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="675.3" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/Net.getIntOption0 (11 samples, 1.03%)</title><rect x="673.4" y="1107.0" width="12.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="676.4" y="1118.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_Net_getIntOption0 (9 samples, 0.84%)</title><rect x="673.4" y="1091.0" width="9.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="676.4" y="1102.0"></text>
</g>
<g>
<title>getsockopt (9 samples, 0.84%)</title><rect x="673.4" y="1075.0" width="9.9" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="676.4" y="1086.0"></text>
</g>
<g>
<title>NET_GetSockOpt (1 samples, 0.09%)</title><rect x="683.3" y="1091.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="686.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.findNative (1 samples, 0.09%)</title><rect x="684.4" y="1091.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="687.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/ClassLoader$NativeLibrary.findEntry (1 samples, 0.09%)</title><rect x="684.4" y="1075.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="687.4" y="1086.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_00024NativeLibrary_findEntry (1 samples, 0.09%)</title><rect x="684.4" y="1059.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="687.4" y="1070.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.09%)</title><rect x="684.4" y="1043.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="687.4" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="684.4" y="1027.0" width="1.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="687.4" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="684.4" y="1011.0" width="1.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="687.4" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="684.4" y="995.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="687.4" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="684.4" y="979.0" width="1.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="687.4" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="684.4" y="963.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="687.4" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="684.4" y="947.0" width="1.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="687.4" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="684.4" y="931.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="687.4" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="684.4" y="915.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="687.4" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="684.4" y="899.0" width="1.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="687.4" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="684.4" y="883.0" width="1.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="687.4" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="684.4" y="867.0" width="1.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="687.4" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="684.4" y="851.0" width="1.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="687.4" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="684.4" y="835.0" width="1.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="687.4" y="846.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="684.4" y="819.0" width="1.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="687.4" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="684.4" y="803.0" width="1.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="687.4" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="684.4" y="787.0" width="1.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="687.4" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/Net.shutdown (31 samples, 2.90%)</title><rect x="685.5" y="1123.0" width="34.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="688.5" y="1134.0">su..</text>
</g>
<g>
<title>shutdown (27 samples, 2.53%)</title><rect x="690.0" y="1107.0" width="29.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="693.0" y="1118.0">sh..</text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (4 samples, 0.37%)</title><rect x="719.8" y="1283.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="722.8" y="1294.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.09%)</title><rect x="720.9" y="1267.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="723.9" y="1278.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.09%)</title><rect x="720.9" y="1251.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="723.9" y="1262.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.09%)</title><rect x="720.9" y="1235.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="723.9" y="1246.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.09%)</title><rect x="720.9" y="1219.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="723.9" y="1230.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.09%)</title><rect x="720.9" y="1203.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="723.9" y="1214.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.09%)</title><rect x="720.9" y="1187.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="723.9" y="1198.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (2 samples, 0.19%)</title><rect x="722.0" y="1267.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="725.0" y="1278.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.28%)</title><rect x="724.2" y="1283.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="727.2" y="1294.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.19%)</title><rect x="725.3" y="1267.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="728.3" y="1278.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.09%)</title><rect x="725.3" y="1251.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="728.3" y="1262.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.09%)</title><rect x="726.4" y="1251.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="729.4" y="1262.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.09%)</title><rect x="726.4" y="1235.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="729.4" y="1246.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.09%)</title><rect x="726.4" y="1219.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="729.4" y="1230.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.28%)</title><rect x="727.5" y="1283.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="730.5" y="1294.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.28%)</title><rect x="727.5" y="1267.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="730.5" y="1278.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.09%)</title><rect x="729.7" y="1251.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="732.7" y="1262.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (1 samples, 0.09%)</title><rect x="729.7" y="1235.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="732.7" y="1246.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsOffCount (1 samples, 0.09%)</title><rect x="729.7" y="1219.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="732.7" y="1230.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (28 samples, 2.62%)</title><rect x="730.8" y="1299.0" width="30.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="733.8" y="1310.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (28 samples, 2.62%)</title><rect x="730.8" y="1283.0" width="30.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="733.8" y="1294.0">on..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.09%)</title><rect x="733.0" y="1267.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="736.0" y="1278.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (25 samples, 2.34%)</title><rect x="734.1" y="1267.0" width="27.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="737.1" y="1278.0">s..</text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.isBlocking (1 samples, 0.09%)</title><rect x="734.1" y="1251.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="737.1" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.09%)</title><rect x="735.2" y="1251.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="738.2" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.09%)</title><rect x="735.2" y="1235.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="738.2" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.09%)</title><rect x="735.2" y="1219.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="738.2" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.09%)</title><rect x="735.2" y="1203.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="738.2" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.09%)</title><rect x="735.2" y="1187.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="738.2" y="1198.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (23 samples, 2.15%)</title><rect x="736.3" y="1251.0" width="25.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="739.3" y="1262.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (23 samples, 2.15%)</title><rect x="736.3" y="1235.0" width="25.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="739.3" y="1246.0">s..</text>
</g>
<g>
<title>java/nio/Buffer.remaining (1 samples, 0.09%)</title><rect x="736.3" y="1219.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="739.3" y="1230.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (3 samples, 0.28%)</title><rect x="737.4" y="1219.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="740.4" y="1230.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3 samples, 0.28%)</title><rect x="737.4" y="1203.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="740.4" y="1214.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.09%)</title><rect x="737.4" y="1187.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="740.4" y="1198.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.09%)</title><rect x="737.4" y="1171.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="740.4" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.19%)</title><rect x="738.5" y="1187.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="741.5" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory0 (1 samples, 0.09%)</title><rect x="738.5" y="1171.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="741.5" y="1182.0"></text>
</g>
<g>
<title>Unsafe_CopyMemory0(JNIEnv_*, _jobject*, _jobject*, long, _jobject*, long, long) (1 samples, 0.09%)</title><rect x="738.5" y="1155.0" width="1.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="741.5" y="1166.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.09%)</title><rect x="738.5" y="1139.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="741.5" y="1150.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.09%)</title><rect x="738.5" y="1123.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="741.5" y="1134.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.09%)</title><rect x="738.5" y="1107.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="741.5" y="1118.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.09%)</title><rect x="738.5" y="1091.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="741.5" y="1102.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (1 samples, 0.09%)</title><rect x="738.5" y="1075.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="741.5" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.09%)</title><rect x="739.6" y="1171.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="742.6" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (1 samples, 0.09%)</title><rect x="739.6" y="1155.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="742.6" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (1 samples, 0.09%)</title><rect x="739.6" y="1139.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="742.6" y="1150.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (1 samples, 0.09%)</title><rect x="739.6" y="1123.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="742.6" y="1134.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.flip (1 samples, 0.09%)</title><rect x="740.7" y="1219.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="743.7" y="1230.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (14 samples, 1.31%)</title><rect x="741.8" y="1219.0" width="15.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="744.8" y="1230.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (14 samples, 1.31%)</title><rect x="741.8" y="1203.0" width="15.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="744.8" y="1214.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (14 samples, 1.31%)</title><rect x="741.8" y="1187.0" width="15.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="744.8" y="1198.0"></text>
</g>
<g>
<title>JNI_OnLoad (1 samples, 0.09%)</title><rect x="742.9" y="1171.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="745.9" y="1182.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.09%)</title><rect x="744.1" y="1171.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="747.1" y="1182.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.findNative (1 samples, 0.09%)</title><rect x="745.2" y="1171.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="748.2" y="1182.0"></text>
</g>
<g>
<title>java/lang/ClassLoader$NativeLibrary.findEntry (1 samples, 0.09%)</title><rect x="745.2" y="1155.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="748.2" y="1166.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_00024NativeLibrary_findEntry (1 samples, 0.09%)</title><rect x="745.2" y="1139.0" width="1.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="748.2" y="1150.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.09%)</title><rect x="745.2" y="1123.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="748.2" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="745.2" y="1107.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="748.2" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="745.2" y="1091.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="748.2" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="745.2" y="1075.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="748.2" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="745.2" y="1059.0" width="1.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="748.2" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="745.2" y="1043.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="748.2" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="745.2" y="1027.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="748.2" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="745.2" y="1011.0" width="1.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="748.2" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="745.2" y="995.0" width="1.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="748.2" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="745.2" y="979.0" width="1.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="748.2" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="745.2" y="963.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="748.2" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="745.2" y="947.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="748.2" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="745.2" y="931.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="748.2" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="745.2" y="915.0" width="1.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="748.2" y="926.0"></text>
</g>
<g>
<title>read (10 samples, 0.94%)</title><rect x="746.3" y="1171.0" width="11.0" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="749.3" y="1182.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.19%)</title><rect x="757.3" y="1219.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="760.3" y="1230.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocateDirect (1 samples, 0.09%)</title><rect x="757.3" y="1203.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="760.3" y="1214.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="757.3" y="1187.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="760.3" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.setMemory (1 samples, 0.09%)</title><rect x="757.3" y="1171.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="760.3" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.setMemory (1 samples, 0.09%)</title><rect x="757.3" y="1155.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="760.3" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.setMemory0 (1 samples, 0.09%)</title><rect x="757.3" y="1139.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="760.3" y="1150.0"></text>
</g>
<g>
<title>Unsafe_SetMemory0(JNIEnv_*, _jobject*, _jobject*, long, long, signed char) (1 samples, 0.09%)</title><rect x="757.3" y="1123.0" width="1.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="760.3" y="1134.0"></text>
</g>
<g>
<title>Copy::fill_to_memory_atomic(void*, unsigned long, unsigned char) (1 samples, 0.09%)</title><rect x="757.3" y="1107.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="760.3" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.09%)</title><rect x="758.4" y="1203.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="761.4" y="1214.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (1 samples, 0.09%)</title><rect x="758.4" y="1187.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="761.4" y="1198.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (2 samples, 0.19%)</title><rect x="759.5" y="1219.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="762.5" y="1230.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.28%)</title><rect x="761.7" y="1315.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="764.7" y="1326.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.19%)</title><rect x="762.8" y="1299.0" width="2.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="765.8" y="1310.0"></text>
</g>
<g>
<title>_res (1 samples, 0.09%)</title><rect x="762.8" y="1283.0" width="1.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="765.8" y="1294.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.09%)</title><rect x="763.9" y="1283.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="766.9" y="1294.0"></text>
</g>
<g>
<title>thread_start (385 samples, 36.01%)</title><rect x="765.0" y="1347.0" width="425.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="768.0" y="1358.0">thread_start</text>
</g>
<g>
<title>_pthread_start (385 samples, 36.01%)</title><rect x="765.0" y="1331.0" width="425.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="768.0" y="1342.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (385 samples, 36.01%)</title><rect x="765.0" y="1315.0" width="425.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="768.0" y="1326.0">_pthread_body</text>
</g>
<g>
<title>thread_native_entry(Thread*) (385 samples, 36.01%)</title><rect x="765.0" y="1299.0" width="425.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="768.0" y="1310.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (385 samples, 36.01%)</title><rect x="765.0" y="1283.0" width="425.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="768.0" y="1294.0">Thread::call_run()</text>
</g>
<g>
<title>ConcurrentGCThread::run() (32 samples, 2.99%)</title><rect x="765.0" y="1267.0" width="35.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="768.0" y="1278.0">Con..</text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (32 samples, 2.99%)</title><rect x="765.0" y="1251.0" width="35.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="768.0" y="1262.0">G1Y..</text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (15 samples, 1.40%)</title><rect x="765.0" y="1235.0" width="16.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="768.0" y="1246.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (15 samples, 1.40%)</title><rect x="765.0" y="1219.0" width="16.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="768.0" y="1230.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (15 samples, 1.40%)</title><rect x="765.0" y="1203.0" width="16.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="768.0" y="1214.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (7 samples, 0.65%)</title><rect x="768.3" y="1187.0" width="7.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="771.3" y="1198.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (7 samples, 0.65%)</title><rect x="768.3" y="1171.0" width="7.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="771.3" y="1182.0"></text>
</g>
<g>
<title>G1Analytics::predict_card_num(unsigned long, bool) const (1 samples, 0.09%)</title><rect x="768.3" y="1155.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="771.3" y="1166.0"></text>
</g>
<g>
<title>G1Analytics::predict_object_copy_time_ms(unsigned long, bool) const (1 samples, 0.09%)</title><rect x="769.4" y="1155.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="772.4" y="1166.0"></text>
</g>
<g>
<title>G1Policy::predict_bytes_to_copy(HeapRegion*) const (4 samples, 0.37%)</title><rect x="770.5" y="1155.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="773.5" y="1166.0"></text>
</g>
<g>
<title>G1Policy::predict_yg_surv_rate(int, SurvRateGroup*) const (4 samples, 0.37%)</title><rect x="770.5" y="1139.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="773.5" y="1150.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.09%)</title><rect x="775.0" y="1155.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="778.0" y="1166.0"></text>
</g>
<g>
<title>Monitor::IUnlock(bool) (1 samples, 0.09%)</title><rect x="776.1" y="1187.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="779.1" y="1198.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.37%)</title><rect x="777.2" y="1187.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="780.2" y="1198.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (4 samples, 0.37%)</title><rect x="777.2" y="1171.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="780.2" y="1182.0"></text>
</g>
<g>
<title>Monitor::TryFast() (4 samples, 0.37%)</title><rect x="777.2" y="1155.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="780.2" y="1166.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (17 samples, 1.59%)</title><rect x="781.6" y="1235.0" width="18.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="784.6" y="1246.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (17 samples, 1.59%)</title><rect x="781.6" y="1219.0" width="18.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="784.6" y="1230.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (16 samples, 1.50%)</title><rect x="782.7" y="1203.0" width="17.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="785.7" y="1214.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (16 samples, 1.50%)</title><rect x="782.7" y="1187.0" width="17.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="785.7" y="1198.0"></text>
</g>
<g>
<title>__gettimeofday (3 samples, 0.28%)</title><rect x="782.7" y="1171.0" width="3.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="785.7" y="1182.0"></text>
</g>
<g>
<title>__psynch_cvwait (13 samples, 1.22%)</title><rect x="786.0" y="1171.0" width="14.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="789.0" y="1182.0"></text>
</g>
<g>
<title>GangWorker::loop() (19 samples, 1.78%)</title><rect x="800.3" y="1267.0" width="21.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="803.3" y="1278.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (16 samples, 1.50%)</title><rect x="800.3" y="1251.0" width="17.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="803.3" y="1262.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.28%)</title><rect x="800.3" y="1235.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="803.3" y="1246.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.19%)</title><rect x="800.3" y="1219.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="803.3" y="1230.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (2 samples, 0.19%)</title><rect x="800.3" y="1203.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="803.3" y="1214.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (2 samples, 0.19%)</title><rect x="800.3" y="1187.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="803.3" y="1198.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.19%)</title><rect x="800.3" y="1171.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="803.3" y="1182.0"></text>
</g>
<g>
<title>void ObjArrayKlass::oop_oop_iterate_elements&lt;unsigned int, G1ScanEvacuatedObjClosure&gt;(objArrayOopDesc*, G1ScanEvacuatedObjClosure*) (1 samples, 0.09%)</title><rect x="801.4" y="1155.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="804.4" y="1166.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.09%)</title><rect x="801.4" y="1139.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="804.4" y="1150.0"></text>
</g>
<g>
<title>OWSTTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="802.6" y="1219.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="805.6" y="1230.0"></text>
</g>
<g>
<title>OWSTTaskTerminator::do_spin_master_work(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="802.6" y="1203.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="805.6" y="1214.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.09%)</title><rect x="802.6" y="1187.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="805.6" y="1198.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.09%)</title><rect x="803.7" y="1235.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="806.7" y="1246.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.09%)</title><rect x="803.7" y="1219.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="806.7" y="1230.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.09%)</title><rect x="803.7" y="1203.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="806.7" y="1214.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (1 samples, 0.09%)</title><rect x="803.7" y="1187.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="806.7" y="1198.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_buffer(CardTableEntryClosure*, BufferNode*, bool, unsigned int) (1 samples, 0.09%)</title><rect x="803.7" y="1171.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="806.7" y="1182.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.09%)</title><rect x="803.7" y="1155.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="806.7" y="1166.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.09%)</title><rect x="803.7" y="1139.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="806.7" y="1150.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceMirrorKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (1 samples, 0.09%)</title><rect x="803.7" y="1123.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="806.7" y="1134.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (3 samples, 0.28%)</title><rect x="804.8" y="1235.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="807.8" y="1246.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (3 samples, 0.28%)</title><rect x="804.8" y="1219.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="807.8" y="1230.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (3 samples, 0.28%)</title><rect x="804.8" y="1203.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="807.8" y="1214.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (2 samples, 0.19%)</title><rect x="804.8" y="1187.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="807.8" y="1198.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_card(MemRegion, unsigned int) (2 samples, 0.19%)</title><rect x="804.8" y="1171.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="807.8" y="1182.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringScanRSClosure&gt;(MemRegion, G1ScanObjsDuringScanRSClosure*) (2 samples, 0.19%)</title><rect x="804.8" y="1155.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="807.8" y="1166.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (2 samples, 0.19%)</title><rect x="804.8" y="1139.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="807.8" y="1150.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.09%)</title><rect x="805.9" y="1123.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="808.9" y="1134.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.09%)</title><rect x="805.9" y="1107.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="808.9" y="1118.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_strong_code_roots(HeapRegion*) (1 samples, 0.09%)</title><rect x="807.0" y="1187.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="810.0" y="1198.0"></text>
</g>
<g>
<title>G1CodeRootSetTable::nmethods_do(CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="807.0" y="1171.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="810.0" y="1182.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.09%)</title><rect x="807.0" y="1155.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="810.0" y="1166.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (9 samples, 0.84%)</title><rect x="808.1" y="1235.0" width="9.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="811.1" y="1246.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (7 samples, 0.65%)</title><rect x="808.1" y="1219.0" width="7.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="811.1" y="1230.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (3 samples, 0.28%)</title><rect x="808.1" y="1203.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="811.1" y="1214.0"></text>
</g>
<g>
<title>G1CLDScanClosure::do_cld(ClassLoaderData*) (3 samples, 0.28%)</title><rect x="808.1" y="1187.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="811.1" y="1198.0"></text>
</g>
<g>
<title>ClassLoaderData::ChunkedHandleList::oops_do(OopClosure*) (3 samples, 0.28%)</title><rect x="808.1" y="1171.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="811.1" y="1182.0"></text>
</g>
<g>
<title>void G1ParCopyClosure&lt;(G1Barrier)1, (G1Mark)0&gt;::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (3 samples, 0.28%)</title><rect x="808.1" y="1155.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="811.1" y="1166.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (3 samples, 0.28%)</title><rect x="808.1" y="1139.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="811.1" y="1150.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (3 samples, 0.28%)</title><rect x="808.1" y="1123.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="811.1" y="1134.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 0.28%)</title><rect x="808.1" y="1107.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="811.1" y="1118.0"></text>
</g>
<g>
<title>void InstanceRefKlass::oop_oop_iterate_reverse&lt;unsigned int, G1ScanEvacuatedObjClosure&gt;(oopDesc*, G1ScanEvacuatedObjClosure*) (1 samples, 0.09%)</title><rect x="810.3" y="1091.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="813.3" y="1102.0"></text>
</g>
<g>
<title>ReferenceProcessor::discover_reference(oopDesc*, ReferenceType) (1 samples, 0.09%)</title><rect x="810.3" y="1075.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="813.3" y="1086.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (4 samples, 0.37%)</title><rect x="811.4" y="1203.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="814.4" y="1214.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (4 samples, 0.37%)</title><rect x="811.4" y="1187.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="814.4" y="1198.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (4 samples, 0.37%)</title><rect x="811.4" y="1171.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="814.4" y="1182.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool) (4 samples, 0.37%)</title><rect x="811.4" y="1155.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="814.4" y="1166.0"></text>
</g>
<g>
<title>InterpreterOopMap::iterate_oop(OffsetClosure*) const (3 samples, 0.28%)</title><rect x="811.4" y="1139.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="814.4" y="1150.0"></text>
</g>
<g>
<title>void G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (3 samples, 0.28%)</title><rect x="811.4" y="1123.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="814.4" y="1134.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 0.28%)</title><rect x="811.4" y="1107.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="814.4" y="1118.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.28%)</title><rect x="811.4" y="1091.0" width="3.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="814.4" y="1102.0"></text>
</g>
<g>
<title>void G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.09%)</title><rect x="814.7" y="1139.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="817.7" y="1150.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (1 samples, 0.09%)</title><rect x="814.7" y="1123.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="817.7" y="1134.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.09%)</title><rect x="814.7" y="1107.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="817.7" y="1118.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.09%)</title><rect x="814.7" y="1091.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="817.7" y="1102.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.09%)</title><rect x="814.7" y="1075.0" width="1.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="817.7" y="1086.0"></text>
</g>
<g>
<title>G1RootProcessor::process_string_table_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.09%)</title><rect x="815.8" y="1219.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="818.8" y="1230.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (1 samples, 0.09%)</title><rect x="815.8" y="1203.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="818.8" y="1214.0"></text>
</g>
<g>
<title>void G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.09%)</title><rect x="815.8" y="1187.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="818.8" y="1198.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (1 samples, 0.09%)</title><rect x="815.8" y="1171.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="818.8" y="1182.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.09%)</title><rect x="815.8" y="1155.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="818.8" y="1166.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.09%)</title><rect x="815.8" y="1139.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="818.8" y="1150.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.09%)</title><rect x="816.9" y="1219.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="819.9" y="1230.0"></text>
</g>
<g>
<title>SymbolPropertyTable::oops_do(OopClosure*) (1 samples, 0.09%)</title><rect x="816.9" y="1203.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="819.9" y="1214.0"></text>
</g>
<g>
<title>void G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.09%)</title><rect x="816.9" y="1187.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="819.9" y="1198.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (1 samples, 0.09%)</title><rect x="816.9" y="1171.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="819.9" y="1182.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.09%)</title><rect x="816.9" y="1155.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="819.9" y="1166.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.09%)</title><rect x="818.0" y="1251.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="821.0" y="1262.0"></text>
</g>
<g>
<title>ParallelSPCleanupThreadClosure::do_thread(Thread*) (1 samples, 0.09%)</title><rect x="818.0" y="1235.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="821.0" y="1246.0"></text>
</g>
<g>
<title>ObjectSynchronizer::deflate_thread_local_monitors(Thread*, DeflateMonitorCounters*) (1 samples, 0.09%)</title><rect x="818.0" y="1219.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="821.0" y="1230.0"></text>
</g>
<g>
<title>Thread::muxAcquire(long volatile*, char const*) (1 samples, 0.09%)</title><rect x="818.0" y="1203.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="821.0" y="1214.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.09%)</title><rect x="818.0" y="1187.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="821.0" y="1198.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.09%)</title><rect x="818.0" y="1171.0" width="1.1" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="821.0" y="1182.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (2 samples, 0.19%)</title><rect x="819.1" y="1251.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="822.1" y="1262.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (2 samples, 0.19%)</title><rect x="819.1" y="1235.0" width="2.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="822.1" y="1246.0"></text>
</g>
<g>
<title>JavaThread::run() (256 samples, 23.95%)</title><rect x="821.3" y="1267.0" width="282.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="824.3" y="1278.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (256 samples, 23.95%)</title><rect x="821.3" y="1251.0" width="282.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="824.3" y="1262.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (252 samples, 23.57%)</title><rect x="821.3" y="1235.0" width="278.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="824.3" y="1246.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (239 samples, 22.36%)</title><rect x="821.3" y="1219.0" width="263.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="824.3" y="1230.0">CompileBroker::invoke_compiler_on_m..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (223 samples, 20.86%)</title><rect x="821.3" y="1203.0" width="246.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="824.3" y="1214.0">C2Compiler::compile_method(ciEnv*..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (223 samples, 20.86%)</title><rect x="821.3" y="1187.0" width="246.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="824.3" y="1198.0">Compile::Compile(ciEnv*, C2Compil..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (2 samples, 0.19%)</title><rect x="821.3" y="1171.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="824.3" y="1182.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (2 samples, 0.19%)</title><rect x="821.3" y="1155.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="824.3" y="1166.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.19%)</title><rect x="821.3" y="1139.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="824.3" y="1150.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="821.3" y="1123.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="824.3" y="1134.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.09%)</title><rect x="821.3" y="1107.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="824.3" y="1118.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.09%)</title><rect x="821.3" y="1091.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="824.3" y="1102.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.09%)</title><rect x="821.3" y="1075.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="824.3" y="1086.0"></text>
</g>
<g>
<title>ciMethodBlocks::make_block_at(int) (1 samples, 0.09%)</title><rect x="821.3" y="1059.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="824.3" y="1070.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="821.3" y="1043.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="824.3" y="1054.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.09%)</title><rect x="821.3" y="1027.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="824.3" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="822.4" y="1123.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="825.4" y="1134.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="822.4" y="1107.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="825.4" y="1118.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="822.4" y="1091.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="825.4" y="1102.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="822.4" y="1075.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="825.4" y="1086.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="822.4" y="1059.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="825.4" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="822.4" y="1043.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="825.4" y="1054.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="822.4" y="1027.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="825.4" y="1038.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="822.4" y="1011.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="825.4" y="1022.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.09%)</title><rect x="822.4" y="995.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="825.4" y="1006.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(LinkInfo const&amp;) (1 samples, 0.09%)</title><rect x="822.4" y="979.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="825.4" y="990.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (135 samples, 12.63%)</title><rect x="823.5" y="1171.0" width="149.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="826.5" y="1182.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (7 samples, 0.65%)</title><rect x="823.5" y="1155.0" width="7.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="826.5" y="1166.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (4 samples, 0.37%)</title><rect x="823.5" y="1139.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="826.5" y="1150.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.09%)</title><rect x="826.8" y="1123.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="829.8" y="1134.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.09%)</title><rect x="826.8" y="1107.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="829.8" y="1118.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="826.8" y="1091.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="829.8" y="1102.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="826.8" y="1075.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="829.8" y="1086.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (3 samples, 0.28%)</title><rect x="827.9" y="1139.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="830.9" y="1150.0"></text>
</g>
<g>
<title>CodeBuffer::initialize(int, int) (1 samples, 0.09%)</title><rect x="827.9" y="1123.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="830.9" y="1134.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.09%)</title><rect x="827.9" y="1107.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="830.9" y="1118.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.09%)</title><rect x="827.9" y="1091.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="830.9" y="1102.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.19%)</title><rect x="829.0" y="1123.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="832.0" y="1134.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (2 samples, 0.19%)</title><rect x="829.0" y="1107.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="832.0" y="1118.0"></text>
</g>
<g>
<title>CallStaticJavaDirectNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.09%)</title><rect x="829.0" y="1091.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="832.0" y="1102.0"></text>
</g>
<g>
<title>CodeBuffer::CodeBuffer(unsigned char*, int) (1 samples, 0.09%)</title><rect x="830.1" y="1091.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="833.1" y="1102.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.28%)</title><rect x="831.3" y="1155.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="834.3" y="1166.0"></text>
</g>
<g>
<title>CallStaticJavaDirectNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.09%)</title><rect x="832.4" y="1139.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="835.4" y="1150.0"></text>
</g>
<g>
<title>CompiledStaticCall::emit_to_interp_stub(CodeBuffer&amp;, unsigned char*) (1 samples, 0.09%)</title><rect x="832.4" y="1123.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="835.4" y="1134.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.09%)</title><rect x="833.5" y="1139.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="836.5" y="1150.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.09%)</title><rect x="833.5" y="1123.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="836.5" y="1134.0"></text>
</g>
<g>
<title>DebugInformationRecorder::serialize_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.09%)</title><rect x="833.5" y="1107.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="836.5" y="1118.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="833.5" y="1091.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="836.5" y="1102.0"></text>
</g>
<g>
<title>DIR_Chunk* GrowableArray&lt;DIR_Chunk*&gt;::insert_sorted&lt;&amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;) (1 samples, 0.09%)</title><rect x="833.5" y="1075.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="836.5" y="1086.0"></text>
</g>
<g>
<title>int GrowableArray&lt;DIR_Chunk*&gt;::find_sorted&lt;DIR_Chunk*, &amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="833.5" y="1059.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="836.5" y="1070.0"></text>
</g>
<g>
<title>DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;) (1 samples, 0.09%)</title><rect x="833.5" y="1043.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="836.5" y="1054.0"></text>
</g>
<g>
<title>Matcher::match() (16 samples, 1.50%)</title><rect x="834.6" y="1155.0" width="17.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="837.6" y="1166.0"></text>
</g>
<g>
<title>ConNode::Opcode() const (1 samples, 0.09%)</title><rect x="834.6" y="1139.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="837.6" y="1150.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (4 samples, 0.37%)</title><rect x="835.7" y="1139.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="838.7" y="1150.0"></text>
</g>
<g>
<title>Matcher::clone_address_expressions(AddPNode*, Matcher::MStack&amp;, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="839.0" y="1123.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="842.0" y="1134.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (11 samples, 1.03%)</title><rect x="840.1" y="1139.0" width="12.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="843.1" y="1150.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.09%)</title><rect x="840.1" y="1123.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="843.1" y="1134.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.09%)</title><rect x="841.2" y="1123.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="844.2" y="1134.0"></text>
</g>
<g>
<title>ProjNode::ProjNode(Node*, unsigned int, bool) (1 samples, 0.09%)</title><rect x="841.2" y="1107.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="844.2" y="1118.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.09%)</title><rect x="841.2" y="1091.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="844.2" y="1102.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.09%)</title><rect x="841.2" y="1075.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="844.2" y="1086.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="841.2" y="1059.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="844.2" y="1070.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (9 samples, 0.84%)</title><rect x="842.3" y="1123.0" width="9.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="845.3" y="1134.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (3 samples, 0.28%)</title><rect x="847.8" y="1107.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="850.8" y="1118.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.09%)</title><rect x="848.9" y="1091.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="851.9" y="1102.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.09%)</title><rect x="848.9" y="1075.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="851.9" y="1086.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.09%)</title><rect x="850.0" y="1091.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="853.0" y="1102.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.09%)</title><rect x="850.0" y="1075.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="853.0" y="1086.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="850.0" y="1059.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="853.0" y="1070.0"></text>
</g>
<g>
<title>ReturnNode::match_edge(unsigned int) const (1 samples, 0.09%)</title><rect x="851.1" y="1107.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="854.1" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.09%)</title><rect x="852.2" y="1155.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="855.2" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.09%)</title><rect x="852.2" y="1139.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="855.2" y="1150.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.09%)</title><rect x="852.2" y="1123.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="855.2" y="1134.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.09%)</title><rect x="852.2" y="1107.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="855.2" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (10 samples, 0.94%)</title><rect x="853.3" y="1155.0" width="11.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="856.3" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.09%)</title><rect x="853.3" y="1139.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="856.3" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (9 samples, 0.84%)</title><rect x="854.4" y="1139.0" width="10.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="857.4" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.09%)</title><rect x="854.4" y="1123.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="857.4" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.09%)</title><rect x="855.5" y="1123.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="858.5" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.09%)</title><rect x="855.5" y="1107.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="858.5" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (2 samples, 0.19%)</title><rect x="856.6" y="1123.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="859.6" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int, long*) (1 samples, 0.09%)</title><rect x="857.7" y="1107.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="860.7" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.09%)</title><rect x="857.7" y="1091.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="860.7" y="1102.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.09%)</title><rect x="857.7" y="1075.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="860.7" y="1086.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.09%)</title><rect x="857.7" y="1059.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="860.7" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.09%)</title><rect x="858.8" y="1123.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="861.8" y="1134.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.09%)</title><rect x="860.0" y="1123.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="863.0" y="1134.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.09%)</title><rect x="860.0" y="1107.0" width="1.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="863.0" y="1118.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.28%)</title><rect x="861.1" y="1123.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="864.1" y="1134.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="862.2" y="1107.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="865.2" y="1118.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.09%)</title><rect x="862.2" y="1091.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="865.2" y="1102.0"></text>
</g>
<g>
<title>PhaseLive::freeset(Block*) (1 samples, 0.09%)</title><rect x="863.3" y="1107.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="866.3" y="1118.0"></text>
</g>
<g>
<title>PhaseLive::add_livein(Block*, IndexSet*) (1 samples, 0.09%)</title><rect x="863.3" y="1091.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="866.3" y="1102.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.09%)</title><rect x="863.3" y="1075.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="866.3" y="1086.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.09%)</title><rect x="863.3" y="1059.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="866.3" y="1070.0"></text>
</g>
<g>
<title>IndexSet::populate_free_list() (1 samples, 0.09%)</title><rect x="863.3" y="1043.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="866.3" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (98 samples, 9.17%)</title><rect x="864.4" y="1155.0" width="108.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="867.4" y="1166.0">PhaseChaitin:..</text>
</g>
<g>
<title>CallStaticJavaDirectNode::oper_input_base() const (1 samples, 0.09%)</title><rect x="864.4" y="1139.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="867.4" y="1150.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.09%)</title><rect x="865.5" y="1139.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="868.5" y="1150.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.09%)</title><rect x="866.6" y="1139.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="869.6" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (8 samples, 0.75%)</title><rect x="867.7" y="1139.0" width="8.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="870.7" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.09%)</title><rect x="868.8" y="1123.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="871.8" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (3 samples, 0.28%)</title><rect x="869.9" y="1123.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="872.9" y="1134.0"></text>
</g>
<g>
<title>RegMask::find_first_set(int) const (2 samples, 0.19%)</title><rect x="871.0" y="1107.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="874.0" y="1118.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (2 samples, 0.19%)</title><rect x="871.0" y="1091.0" width="2.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="874.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.19%)</title><rect x="873.2" y="1123.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="876.2" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="873.2" y="1107.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="876.2" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.09%)</title><rect x="874.3" y="1107.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="877.3" y="1118.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.09%)</title><rect x="875.4" y="1123.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="878.4" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (8 samples, 0.75%)</title><rect x="876.5" y="1139.0" width="8.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="879.5" y="1150.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.09%)</title><rect x="879.8" y="1123.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="882.8" y="1134.0"></text>
</g>
<g>
<title>MachSafePointNode::in_RegMask(unsigned int) const (1 samples, 0.09%)</title><rect x="880.9" y="1123.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="883.9" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.09%)</title><rect x="882.0" y="1123.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="885.0" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(MachSpillCopyNode::SpillType, Node*, Node*, unsigned int) (1 samples, 0.09%)</title><rect x="882.0" y="1107.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="885.0" y="1118.0"></text>
</g>
<g>
<title>MachSpillCopyNode::ideal_reg() const (1 samples, 0.09%)</title><rect x="882.0" y="1091.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="885.0" y="1102.0"></text>
</g>
<g>
<title>loadINode::rule() const (1 samples, 0.09%)</title><rect x="883.1" y="1123.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="886.1" y="1134.0"></text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.09%)</title><rect x="884.2" y="1123.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="887.2" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (20 samples, 1.87%)</title><rect x="885.3" y="1139.0" width="22.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="888.3" y="1150.0">P..</text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.09%)</title><rect x="886.4" y="1123.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="889.4" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.19%)</title><rect x="887.5" y="1123.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="890.5" y="1134.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (2 samples, 0.19%)</title><rect x="887.5" y="1107.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="890.5" y="1118.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.09%)</title><rect x="888.7" y="1091.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="891.7" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (1 samples, 0.09%)</title><rect x="889.8" y="1123.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="892.8" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 0.47%)</title><rect x="890.9" y="1123.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="893.9" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="892.0" y="1107.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="895.0" y="1118.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (3 samples, 0.28%)</title><rect x="893.1" y="1107.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="896.1" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::lower_pressure(Block*, unsigned int, LRG&amp;, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.09%)</title><rect x="896.4" y="1123.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="899.4" y="1134.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.09%)</title><rect x="896.4" y="1107.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="899.4" y="1118.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.09%)</title><rect x="896.4" y="1091.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="899.4" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (8 samples, 0.75%)</title><rect x="897.5" y="1123.0" width="8.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="900.5" y="1134.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.19%)</title><rect x="899.7" y="1107.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="902.7" y="1118.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (4 samples, 0.37%)</title><rect x="901.9" y="1107.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="904.9" y="1118.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.09%)</title><rect x="906.3" y="1123.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="909.3" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::cache_lrg_info() (1 samples, 0.09%)</title><rect x="907.4" y="1139.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="910.4" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::de_ssa() (1 samples, 0.09%)</title><rect x="908.5" y="1139.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="911.5" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (11 samples, 1.03%)</title><rect x="909.6" y="1139.0" width="12.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="912.6" y="1150.0"></text>
</g>
<g>
<title>MachNode::bottom_type() const (1 samples, 0.09%)</title><rect x="915.1" y="1123.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="918.1" y="1134.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.09%)</title><rect x="916.2" y="1123.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="919.2" y="1134.0"></text>
</g>
<g>
<title>RegMask::is_bound(unsigned int) const (1 samples, 0.09%)</title><rect x="917.4" y="1123.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="920.4" y="1134.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.09%)</title><rect x="917.4" y="1107.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="920.4" y="1118.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (2 samples, 0.19%)</title><rect x="918.5" y="1123.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="921.5" y="1134.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.09%)</title><rect x="919.6" y="1107.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="922.6" y="1118.0"></text>
</g>
<g>
<title>RegMask::is_vector(unsigned int) (1 samples, 0.09%)</title><rect x="920.7" y="1123.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="923.7" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.19%)</title><rect x="921.8" y="1139.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="924.8" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (14 samples, 1.31%)</title><rect x="924.0" y="1139.0" width="15.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="927.0" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (8 samples, 0.75%)</title><rect x="928.4" y="1123.0" width="8.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="931.4" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.09%)</title><rect x="936.1" y="1107.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="939.1" y="1118.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.09%)</title><rect x="936.1" y="1091.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="939.1" y="1102.0"></text>
</g>
<g>
<title>Compile::record_dead_node(unsigned int) (1 samples, 0.09%)</title><rect x="936.1" y="1075.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="939.1" y="1086.0"></text>
</g>
<g>
<title>RegMask::find_first_elem() const (2 samples, 0.19%)</title><rect x="937.2" y="1123.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="940.2" y="1134.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.09%)</title><rect x="938.3" y="1107.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="941.3" y="1118.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (6 samples, 0.56%)</title><rect x="939.4" y="1139.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="942.4" y="1150.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="939.4" y="1123.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="942.4" y="1134.0"></text>
</g>
<g>
<title>LiveRangeMap::find(Node const*) (1 samples, 0.09%)</title><rect x="939.4" y="1107.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="942.4" y="1118.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (5 samples, 0.47%)</title><rect x="940.5" y="1123.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="943.5" y="1134.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (5 samples, 0.47%)</title><rect x="940.5" y="1107.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="943.5" y="1118.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.09%)</title><rect x="940.5" y="1091.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="943.5" y="1102.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.09%)</title><rect x="940.5" y="1075.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="943.5" y="1086.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.09%)</title><rect x="941.6" y="1091.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="944.6" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.09%)</title><rect x="941.6" y="1075.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="944.6" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.09%)</title><rect x="942.7" y="1091.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="945.7" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::test_edge_sq(unsigned int, unsigned int) const (1 samples, 0.09%)</title><rect x="943.8" y="1091.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="946.8" y="1102.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.09%)</title><rect x="944.9" y="1091.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="947.9" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (4 samples, 0.37%)</title><rect x="946.1" y="1139.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="949.1" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (4 samples, 0.37%)</title><rect x="946.1" y="1123.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="949.1" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="949.4" y="1107.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="952.4" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (4 samples, 0.37%)</title><rect x="950.5" y="1139.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="953.5" y="1150.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.09%)</title><rect x="950.5" y="1123.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="953.5" y="1134.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.09%)</title><rect x="950.5" y="1107.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="953.5" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (2 samples, 0.19%)</title><rect x="951.6" y="1123.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="954.6" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="953.8" y="1123.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="956.8" y="1134.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (14 samples, 1.31%)</title><rect x="954.9" y="1139.0" width="15.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="957.9" y="1150.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.09%)</title><rect x="962.6" y="1123.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="965.6" y="1134.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.19%)</title><rect x="963.7" y="1123.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="966.7" y="1134.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.28%)</title><rect x="965.9" y="1123.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="968.9" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="968.1" y="1107.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="971.1" y="1118.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.09%)</title><rect x="969.2" y="1123.0" width="1.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="972.2" y="1134.0"></text>
</g>
<g>
<title>PhiNode::out_RegMask() const (1 samples, 0.09%)</title><rect x="970.3" y="1139.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="973.3" y="1150.0"></text>
</g>
<g>
<title>loadConINode::bottom_type() const (1 samples, 0.09%)</title><rect x="971.4" y="1139.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="974.4" y="1150.0"></text>
</g>
<g>
<title>Compile::Optimize() (52 samples, 4.86%)</title><rect x="972.5" y="1171.0" width="57.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="975.5" y="1182.0">Compil..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (3 samples, 0.28%)</title><rect x="972.5" y="1155.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="975.5" y="1166.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (3 samples, 0.28%)</title><rect x="972.5" y="1139.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="975.5" y="1150.0"></text>
</g>
<g>
<title>Unique_Node_List::pop() (1 samples, 0.09%)</title><rect x="974.8" y="1123.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="977.8" y="1134.0"></text>
</g>
<g>
<title>Node_List::size() const (1 samples, 0.09%)</title><rect x="974.8" y="1107.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="977.8" y="1118.0"></text>
</g>
<g>
<title>Compile::optimize_loops(PhaseIterGVN&amp;, LoopOptsMode) (14 samples, 1.31%)</title><rect x="975.9" y="1155.0" width="15.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="978.9" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (14 samples, 1.31%)</title><rect x="975.9" y="1139.0" width="15.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="978.9" y="1150.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="975.9" y="1123.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="978.9" y="1134.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="975.9" y="1107.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="978.9" y="1118.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="975.9" y="1091.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="978.9" y="1102.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="975.9" y="1075.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="978.9" y="1086.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="975.9" y="1059.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="978.9" y="1070.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="975.9" y="1043.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="978.9" y="1054.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="975.9" y="1027.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="978.9" y="1038.0"></text>
</g>
<g>
<title>IdealLoopTree::adjust_loop_exit_prob(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="975.9" y="1011.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="978.9" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(Node*) const (1 samples, 0.09%)</title><rect x="975.9" y="995.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="978.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.09%)</title><rect x="975.9" y="979.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="978.9" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.09%)</title><rect x="975.9" y="963.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="978.9" y="974.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.09%)</title><rect x="975.9" y="947.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="978.9" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.09%)</title><rect x="977.0" y="1123.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="980.0" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.19%)</title><rect x="978.1" y="1123.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="981.1" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.09%)</title><rect x="978.1" y="1107.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="981.1" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (1 samples, 0.09%)</title><rect x="979.2" y="1107.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="982.2" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.09%)</title><rect x="979.2" y="1091.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="982.2" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.09%)</title><rect x="979.2" y="1075.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="982.2" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.09%)</title><rect x="979.2" y="1059.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="982.2" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update_helper(Node*) const (1 samples, 0.09%)</title><rect x="979.2" y="1043.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="982.2" y="1054.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.09%)</title><rect x="979.2" y="1027.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="982.2" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.56%)</title><rect x="980.3" y="1123.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="983.3" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (5 samples, 0.47%)</title><rect x="981.4" y="1107.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="984.4" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.09%)</title><rect x="981.4" y="1091.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="984.4" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.09%)</title><rect x="981.4" y="1075.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="984.4" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update_helper(Node*) const (1 samples, 0.09%)</title><rect x="981.4" y="1059.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="984.4" y="1070.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.09%)</title><rect x="981.4" y="1043.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="984.4" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.19%)</title><rect x="982.5" y="1091.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="985.5" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.09%)</title><rect x="982.5" y="1075.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="985.5" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="982.5" y="1059.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="985.5" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="982.5" y="1043.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="985.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.09%)</title><rect x="982.5" y="1027.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="985.5" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.09%)</title><rect x="982.5" y="1011.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="985.5" y="1022.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.09%)</title><rect x="982.5" y="995.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="985.5" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.09%)</title><rect x="983.6" y="1075.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="986.6" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.09%)</title><rect x="983.6" y="1059.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="986.6" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.09%)</title><rect x="983.6" y="1043.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="986.6" y="1054.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.09%)</title><rect x="983.6" y="1027.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="986.6" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (2 samples, 0.19%)</title><rect x="984.7" y="1091.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="987.7" y="1102.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.09%)</title><rect x="985.8" y="1075.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="988.8" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (3 samples, 0.28%)</title><rect x="986.9" y="1123.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="989.9" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.19%)</title><rect x="988.0" y="1107.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="991.0" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.09%)</title><rect x="989.1" y="1091.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="992.1" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.09%)</title><rect x="989.1" y="1075.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="992.1" y="1086.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.09%)</title><rect x="989.1" y="1059.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="992.1" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="990.2" y="1123.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="993.2" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="990.2" y="1107.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="993.2" y="1118.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseGVN*) (1 samples, 0.09%)</title><rect x="990.2" y="1091.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="993.2" y="1102.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*, bool) (1 samples, 0.09%)</title><rect x="990.2" y="1075.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="993.2" y="1086.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.09%)</title><rect x="991.3" y="1155.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="994.3" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (1 samples, 0.09%)</title><rect x="991.3" y="1139.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="994.3" y="1150.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.09%)</title><rect x="992.4" y="1155.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="995.4" y="1166.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.09%)</title><rect x="992.4" y="1139.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="995.4" y="1150.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 0.19%)</title><rect x="993.5" y="1155.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="996.5" y="1166.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (2 samples, 0.19%)</title><rect x="993.5" y="1139.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="996.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (17 samples, 1.59%)</title><rect x="995.7" y="1155.0" width="18.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="998.7" y="1166.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.19%)</title><rect x="995.7" y="1139.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="998.7" y="1150.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="995.7" y="1123.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="998.7" y="1134.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="995.7" y="1107.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="998.7" y="1118.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="995.7" y="1091.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="998.7" y="1102.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="995.7" y="1075.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="998.7" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.09%)</title><rect x="995.7" y="1059.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="998.7" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl_helper(IdealLoopTree*, ProjNode*, ProjNode*, CountedLoopNode*, ConNode*, Invariance&amp;, Deoptimization::DeoptReason) (1 samples, 0.09%)</title><rect x="995.7" y="1043.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="998.7" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dominated_by(Node*, Node*, bool, bool) (1 samples, 0.09%)</title><rect x="995.7" y="1027.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="998.7" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_input_of(Node*, int, Node*) (1 samples, 0.09%)</title><rect x="995.7" y="1011.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="998.7" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::rehash_node_delayed(Node*) (1 samples, 0.09%)</title><rect x="995.7" y="995.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="998.7" y="1006.0"></text>
</g>
<g>
<title>PhaseValues::hash_delete(Node*) (1 samples, 0.09%)</title><rect x="995.7" y="979.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="998.7" y="990.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.09%)</title><rect x="995.7" y="963.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="998.7" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.09%)</title><rect x="996.8" y="1123.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="999.8" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_should_follow_branches(IdealLoopTree*, ProjNode*, float&amp;) (1 samples, 0.09%)</title><rect x="996.8" y="1107.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="999.8" y="1118.0"></text>
</g>
<g>
<title>IdealLoopTree::compute_profile_trip_cnt(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="996.8" y="1091.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="999.8" y="1102.0"></text>
</g>
<g>
<title>IdealLoopTree::compute_profile_trip_cnt_helper(Node*) (1 samples, 0.09%)</title><rect x="996.8" y="1075.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="999.8" y="1086.0"></text>
</g>
<g>
<title>Node::is_If() const (1 samples, 0.09%)</title><rect x="996.8" y="1059.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="999.8" y="1070.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.09%)</title><rect x="997.9" y="1139.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1000.9" y="1150.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.09%)</title><rect x="999.0" y="1139.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1002.0" y="1150.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="999.0" y="1123.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1002.0" y="1134.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="999.0" y="1107.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1002.0" y="1118.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="999.0" y="1091.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1002.0" y="1102.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.09%)</title><rect x="999.0" y="1075.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1002.0" y="1086.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.09%)</title><rect x="999.0" y="1059.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1002.0" y="1070.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.09%)</title><rect x="999.0" y="1043.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1002.0" y="1054.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.09%)</title><rect x="999.0" y="1027.0" width="1.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1002.0" y="1038.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.09%)</title><rect x="999.0" y="1011.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1002.0" y="1022.0"></text>
</g>
<g>
<title>large_malloc (1 samples, 0.09%)</title><rect x="999.0" y="995.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1002.0" y="1006.0"></text>
</g>
<g>
<title>mvm_allocate_pages (1 samples, 0.09%)</title><rect x="999.0" y="979.0" width="1.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1002.0" y="990.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (1 samples, 0.09%)</title><rect x="999.0" y="963.0" width="1.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1002.0" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.28%)</title><rect x="1000.1" y="1139.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1003.1" y="1150.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.19%)</title><rect x="1001.2" y="1123.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1004.2" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (8 samples, 0.75%)</title><rect x="1003.5" y="1139.0" width="8.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1006.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (6 samples, 0.56%)</title><rect x="1005.7" y="1123.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1008.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (4 samples, 0.37%)</title><rect x="1005.7" y="1107.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1008.7" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.19%)</title><rect x="1005.7" y="1091.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1008.7" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1005.7" y="1075.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1008.7" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1005.7" y="1059.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1008.7" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.09%)</title><rect x="1005.7" y="1043.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1008.7" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.09%)</title><rect x="1005.7" y="1027.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1008.7" y="1038.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.09%)</title><rect x="1005.7" y="1011.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1008.7" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.09%)</title><rect x="1006.8" y="1075.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1009.8" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.09%)</title><rect x="1006.8" y="1059.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1009.8" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update_helper(Node*) const (1 samples, 0.09%)</title><rect x="1006.8" y="1043.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1009.8" y="1054.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.09%)</title><rect x="1006.8" y="1027.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1009.8" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1007.9" y="1091.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1010.9" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1007.9" y="1075.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1010.9" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1007.9" y="1059.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1010.9" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.09%)</title><rect x="1009.0" y="1091.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1012.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.09%)</title><rect x="1009.0" y="1075.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1012.0" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.09%)</title><rect x="1009.0" y="1059.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1012.0" y="1070.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.09%)</title><rect x="1009.0" y="1043.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1012.0" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (2 samples, 0.19%)</title><rect x="1010.1" y="1107.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1013.1" y="1118.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (2 samples, 0.19%)</title><rect x="1010.1" y="1091.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1013.1" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 0.19%)</title><rect x="1012.3" y="1139.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1015.3" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (1 samples, 0.09%)</title><rect x="1012.3" y="1123.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1015.3" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.09%)</title><rect x="1013.4" y="1123.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1016.4" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.09%)</title><rect x="1013.4" y="1107.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1016.4" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.09%)</title><rect x="1014.5" y="1155.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1017.5" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.09%)</title><rect x="1014.5" y="1139.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1017.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (9 samples, 0.84%)</title><rect x="1015.6" y="1155.0" width="9.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1018.6" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1015.6" y="1139.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1018.6" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 0.65%)</title><rect x="1016.7" y="1139.0" width="7.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1019.7" y="1150.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1016.7" y="1123.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1019.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::is_IterGVN() (1 samples, 0.09%)</title><rect x="1016.7" y="1107.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1019.7" y="1118.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1017.8" y="1123.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1020.8" y="1134.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1017.8" y="1107.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1020.8" y="1118.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1017.8" y="1091.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1020.8" y="1102.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.09%)</title><rect x="1017.8" y="1075.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1020.8" y="1086.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseGVN*) (1 samples, 0.09%)</title><rect x="1018.9" y="1123.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1021.9" y="1134.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1020.0" y="1123.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1023.0" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1021.1" y="1123.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1024.1" y="1134.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.09%)</title><rect x="1021.1" y="1107.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1024.1" y="1118.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.09%)</title><rect x="1021.1" y="1091.0" width="1.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1024.1" y="1102.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1022.2" y="1123.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1025.2" y="1134.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.09%)</title><rect x="1022.2" y="1107.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1025.2" y="1118.0"></text>
</g>
<g>
<title>VectorSet::operator&lt;&lt;=(unsigned int) (1 samples, 0.09%)</title><rect x="1022.2" y="1091.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1025.2" y="1102.0"></text>
</g>
<g>
<title>VectorSet::grow(unsigned int) (1 samples, 0.09%)</title><rect x="1022.2" y="1075.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1025.2" y="1086.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.09%)</title><rect x="1023.3" y="1123.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1026.3" y="1134.0"></text>
</g>
<g>
<title>Unique_Node_List::pop() (1 samples, 0.09%)</title><rect x="1024.4" y="1139.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1027.4" y="1150.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.19%)</title><rect x="1025.5" y="1155.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1028.5" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1025.5" y="1139.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1028.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1025.5" y="1123.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1028.5" y="1134.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.09%)</title><rect x="1025.5" y="1107.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1028.5" y="1118.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1025.5" y="1091.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1028.5" y="1102.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.09%)</title><rect x="1026.6" y="1139.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1029.6" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1026.6" y="1123.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1029.6" y="1134.0"></text>
</g>
<g>
<title>LoadPNode::Opcode() const (1 samples, 0.09%)</title><rect x="1026.6" y="1107.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1029.6" y="1118.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.19%)</title><rect x="1027.7" y="1155.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1030.7" y="1166.0"></text>
</g>
<g>
<title>Chunk::next_chop() (2 samples, 0.19%)</title><rect x="1027.7" y="1139.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1030.7" y="1150.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (2 samples, 0.19%)</title><rect x="1027.7" y="1123.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1030.7" y="1134.0"></text>
</g>
<g>
<title>free_large (1 samples, 0.09%)</title><rect x="1027.7" y="1107.0" width="1.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1030.7" y="1118.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (1 samples, 0.09%)</title><rect x="1027.7" y="1091.0" width="1.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1030.7" y="1102.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (1 samples, 0.09%)</title><rect x="1027.7" y="1075.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1030.7" y="1086.0"></text>
</g>
<g>
<title>madvise (1 samples, 0.09%)</title><rect x="1028.8" y="1107.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1031.8" y="1118.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (2 samples, 0.19%)</title><rect x="1029.9" y="1171.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1032.9" y="1182.0"></text>
</g>
<g>
<title>Node::has_special_unique_user() const (1 samples, 0.09%)</title><rect x="1031.0" y="1155.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1034.0" y="1166.0"></text>
</g>
<g>
<title>CompileWrapper::CompileWrapper(Compile*) (1 samples, 0.09%)</title><rect x="1032.2" y="1171.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1035.2" y="1182.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (1 samples, 0.09%)</title><rect x="1032.2" y="1155.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1035.2" y="1166.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1032.2" y="1139.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1035.2" y="1150.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.09%)</title><rect x="1032.2" y="1123.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1035.2" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (27 samples, 2.53%)</title><rect x="1033.3" y="1171.0" width="29.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1036.3" y="1182.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (27 samples, 2.53%)</title><rect x="1033.3" y="1155.0" width="29.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1036.3" y="1166.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (26 samples, 2.43%)</title><rect x="1033.3" y="1139.0" width="28.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1036.3" y="1150.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (26 samples, 2.43%)</title><rect x="1033.3" y="1123.0" width="28.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1036.3" y="1134.0">Pa..</text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.09%)</title><rect x="1033.3" y="1107.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1036.3" y="1118.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.09%)</title><rect x="1033.3" y="1091.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1036.3" y="1102.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1033.3" y="1075.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1036.3" y="1086.0"></text>
</g>
<g>
<title>IfFalseNode::always_taken(TypeTuple const*) const (1 samples, 0.09%)</title><rect x="1033.3" y="1059.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1036.3" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (23 samples, 2.15%)</title><rect x="1034.4" y="1107.0" width="25.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1037.4" y="1118.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.19%)</title><rect x="1034.4" y="1091.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1037.4" y="1102.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1034.4" y="1075.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1037.4" y="1086.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1034.4" y="1059.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1037.4" y="1070.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.09%)</title><rect x="1034.4" y="1043.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1037.4" y="1054.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1034.4" y="1027.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1037.4" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1034.4" y="1011.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1037.4" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1034.4" y="995.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1037.4" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1034.4" y="979.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1037.4" y="990.0"></text>
</g>
<g>
<title>CounterData::is_CounterData() const (1 samples, 0.09%)</title><rect x="1035.5" y="1075.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1038.5" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (19 samples, 1.78%)</title><rect x="1036.6" y="1091.0" width="20.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1039.6" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (19 samples, 1.78%)</title><rect x="1036.6" y="1075.0" width="20.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1039.6" y="1086.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.09%)</title><rect x="1036.6" y="1059.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1039.6" y="1070.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.09%)</title><rect x="1036.6" y="1043.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1039.6" y="1054.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.09%)</title><rect x="1036.6" y="1027.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1039.6" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (18 samples, 1.68%)</title><rect x="1037.7" y="1059.0" width="19.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1040.7" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (18 samples, 1.68%)</title><rect x="1037.7" y="1043.0" width="19.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1040.7" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (17 samples, 1.59%)</title><rect x="1037.7" y="1027.0" width="18.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1040.7" y="1038.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1037.7" y="1011.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1040.7" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (15 samples, 1.40%)</title><rect x="1038.8" y="1011.0" width="16.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1041.8" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (15 samples, 1.40%)</title><rect x="1038.8" y="995.0" width="16.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1041.8" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (15 samples, 1.40%)</title><rect x="1038.8" y="979.0" width="16.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1041.8" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (15 samples, 1.40%)</title><rect x="1038.8" y="963.0" width="16.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1041.8" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (13 samples, 1.22%)</title><rect x="1038.8" y="947.0" width="14.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1041.8" y="958.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (3 samples, 0.28%)</title><rect x="1038.8" y="931.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1041.8" y="942.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1038.8" y="915.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1041.8" y="926.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1038.8" y="899.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1041.8" y="910.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1038.8" y="883.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1041.8" y="894.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.09%)</title><rect x="1038.8" y="867.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1041.8" y="878.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.09%)</title><rect x="1038.8" y="851.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1041.8" y="862.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle const&amp;, Thread*) (1 samples, 0.09%)</title><rect x="1038.8" y="835.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1041.8" y="846.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol_or_null() (1 samples, 0.09%)</title><rect x="1038.8" y="819.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1041.8" y="830.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1038.8" y="803.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1041.8" y="814.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.19%)</title><rect x="1039.9" y="915.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1042.9" y="926.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (2 samples, 0.19%)</title><rect x="1039.9" y="899.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1042.9" y="910.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.19%)</title><rect x="1039.9" y="883.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1042.9" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.19%)</title><rect x="1039.9" y="867.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1042.9" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.19%)</title><rect x="1039.9" y="851.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1042.9" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.19%)</title><rect x="1039.9" y="835.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1042.9" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.19%)</title><rect x="1039.9" y="819.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1042.9" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (2 samples, 0.19%)</title><rect x="1039.9" y="803.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1042.9" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1039.9" y="787.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1042.9" y="798.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.09%)</title><rect x="1039.9" y="771.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1042.9" y="782.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1039.9" y="755.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1042.9" y="766.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1039.9" y="739.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1042.9" y="750.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1039.9" y="723.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1042.9" y="734.0"></text>
</g>
<g>
<title>ciField::initialize_from(fieldDescriptor*) (1 samples, 0.09%)</title><rect x="1039.9" y="707.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1042.9" y="718.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1039.9" y="691.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1042.9" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_putstatic(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1041.0" y="787.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1044.0" y="798.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.09%)</title><rect x="1041.0" y="771.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1044.0" y="782.0"></text>
</g>
<g>
<title>ciField::will_link(ciMethod*, Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1041.0" y="755.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1044.0" y="766.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.09%)</title><rect x="1041.0" y="739.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1044.0" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.09%)</title><rect x="1041.0" y="723.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1044.0" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.09%)</title><rect x="1041.0" y="707.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1044.0" y="718.0"></text>
</g>
<g>
<title>fieldDescriptor::reinitialize(InstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1041.0" y="691.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1044.0" y="702.0"></text>
</g>
<g>
<title>constantPoolHandle::~constantPoolHandle() (1 samples, 0.09%)</title><rect x="1041.0" y="675.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1044.0" y="686.0"></text>
</g>
<g>
<title>Compile::optimize_virtual_call(ciMethod*, int, ciInstanceKlass*, ciKlass*, ciMethod*, TypeOopPtr const*, bool, bool&amp;, int&amp;, bool) (1 samples, 0.09%)</title><rect x="1042.1" y="931.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1045.1" y="942.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.09%)</title><rect x="1042.1" y="915.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1045.1" y="926.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.09%)</title><rect x="1042.1" y="899.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1045.1" y="910.0"></text>
</g>
<g>
<title>Dependencies::find_unique_concrete_method(Klass*, Method*) (1 samples, 0.09%)</title><rect x="1042.1" y="883.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1045.1" y="894.0"></text>
</g>
<g>
<title>ClassHierarchyWalker::find_witness_anywhere(Klass*, bool, bool) (1 samples, 0.09%)</title><rect x="1042.1" y="867.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1045.1" y="878.0"></text>
</g>
<g>
<title>Klass::next_sibling(bool) const (1 samples, 0.09%)</title><rect x="1042.1" y="851.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1045.1" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.75%)</title><rect x="1043.2" y="931.0" width="8.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1046.2" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.75%)</title><rect x="1043.2" y="915.0" width="8.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1046.2" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.75%)</title><rect x="1043.2" y="899.0" width="8.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1046.2" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.75%)</title><rect x="1043.2" y="883.0" width="8.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1046.2" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.56%)</title><rect x="1043.2" y="867.0" width="6.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1046.2" y="878.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1043.2" y="851.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1046.2" y="862.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1043.2" y="835.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1046.2" y="846.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1043.2" y="819.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1046.2" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.47%)</title><rect x="1044.3" y="851.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1047.3" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.47%)</title><rect x="1044.3" y="835.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1047.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.47%)</title><rect x="1044.3" y="819.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1047.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.47%)</title><rect x="1044.3" y="803.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1047.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.37%)</title><rect x="1044.3" y="787.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1047.3" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.37%)</title><rect x="1044.3" y="771.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1047.3" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.37%)</title><rect x="1044.3" y="755.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1047.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.37%)</title><rect x="1044.3" y="739.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1047.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.37%)</title><rect x="1044.3" y="723.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1047.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.28%)</title><rect x="1044.3" y="707.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1047.3" y="718.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1044.3" y="691.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1047.3" y="702.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1044.3" y="675.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1047.3" y="686.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.09%)</title><rect x="1044.3" y="659.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1047.3" y="670.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1044.3" y="643.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1047.3" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1044.3" y="627.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1047.3" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.09%)</title><rect x="1044.3" y="611.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1047.3" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1045.4" y="691.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1048.4" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1045.4" y="675.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1048.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1045.4" y="659.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1048.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1045.4" y="643.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1048.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1045.4" y="627.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1048.4" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1045.4" y="611.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1048.4" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1045.4" y="595.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1048.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1045.4" y="579.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1048.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1045.4" y="563.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1048.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1045.4" y="547.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1048.4" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1045.4" y="531.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1048.4" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1045.4" y="515.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1048.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1045.4" y="499.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1048.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1045.4" y="483.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1048.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1045.4" y="467.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1048.4" y="478.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.09%)</title><rect x="1045.4" y="451.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1048.4" y="462.0"></text>
</g>
<g>
<title>ciField::will_link(ciMethod*, Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1045.4" y="435.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1048.4" y="446.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.09%)</title><rect x="1045.4" y="419.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1048.4" y="430.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.09%)</title><rect x="1045.4" y="403.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1048.4" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.09%)</title><rect x="1045.4" y="387.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1048.4" y="398.0"></text>
</g>
<g>
<title>fieldDescriptor::reinitialize(InstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1045.4" y="371.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1048.4" y="382.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.09%)</title><rect x="1045.4" y="355.0" width="1.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1048.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1046.5" y="547.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1049.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1046.5" y="531.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1049.5" y="542.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1046.5" y="515.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1049.5" y="526.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1046.5" y="499.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1049.5" y="510.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.09%)</title><rect x="1047.6" y="707.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1050.6" y="718.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.09%)</title><rect x="1047.6" y="691.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1050.6" y="702.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1047.6" y="675.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1050.6" y="686.0"></text>
</g>
<g>
<title>AndINode::mul_opcode() const (1 samples, 0.09%)</title><rect x="1047.6" y="659.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1050.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.09%)</title><rect x="1048.7" y="787.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1051.7" y="798.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.09%)</title><rect x="1048.7" y="771.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1051.7" y="782.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.09%)</title><rect x="1048.7" y="755.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1051.7" y="766.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.09%)</title><rect x="1048.7" y="739.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1051.7" y="750.0"></text>
</g>
<g>
<title>ciMethod::raw_liveness_at_bci(int) (1 samples, 0.09%)</title><rect x="1048.7" y="723.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1051.7" y="734.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.09%)</title><rect x="1048.7" y="707.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1051.7" y="718.0"></text>
</g>
<g>
<title>MethodLiveness::init_gen_kill() (1 samples, 0.09%)</title><rect x="1048.7" y="691.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1051.7" y="702.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill(ciMethod*) (1 samples, 0.09%)</title><rect x="1048.7" y="675.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1051.7" y="686.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill_range(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1048.7" y="659.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1051.7" y="670.0"></text>
</g>
<g>
<title>ciBytecodeStream::next() (1 samples, 0.09%)</title><rect x="1048.7" y="643.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1051.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.09%)</title><rect x="1049.8" y="867.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1052.8" y="878.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.09%)</title><rect x="1049.8" y="851.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1052.8" y="862.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.09%)</title><rect x="1049.8" y="835.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1052.8" y="846.0"></text>
</g>
<g>
<title>GraphKit::combine_exception_states(SafePointNode*, SafePointNode*) (1 samples, 0.09%)</title><rect x="1049.8" y="819.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1052.8" y="830.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.09%)</title><rect x="1049.8" y="803.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1052.8" y="814.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.09%)</title><rect x="1049.8" y="787.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1052.8" y="798.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1049.8" y="771.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1052.8" y="782.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.09%)</title><rect x="1049.8" y="755.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1052.8" y="766.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.09%)</title><rect x="1050.9" y="867.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1053.9" y="878.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.09%)</title><rect x="1050.9" y="851.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1053.9" y="862.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1050.9" y="835.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1053.9" y="846.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseGVN*) const (1 samples, 0.09%)</title><rect x="1050.9" y="819.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1053.9" y="830.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1050.9" y="803.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1053.9" y="814.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1052.0" y="931.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1055.0" y="942.0"></text>
</g>
<g>
<title>UncommonTrapCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1052.0" y="915.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1055.0" y="926.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.09%)</title><rect x="1052.0" y="899.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1055.0" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::uncommon_trap_Type() (1 samples, 0.09%)</title><rect x="1052.0" y="883.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1055.0" y="894.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1052.0" y="867.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1055.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1053.1" y="947.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1056.1" y="958.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1053.1" y="931.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1056.1" y="942.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.09%)</title><rect x="1053.1" y="915.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1056.1" y="926.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1053.1" y="899.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1056.1" y="910.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.09%)</title><rect x="1053.1" y="883.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1056.1" y="894.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.09%)</title><rect x="1053.1" y="867.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1056.1" y="878.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.09%)</title><rect x="1053.1" y="851.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1056.1" y="862.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.09%)</title><rect x="1053.1" y="835.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1056.1" y="846.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.09%)</title><rect x="1053.1" y="819.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1056.1" y="830.0"></text>
</g>
<g>
<title>flsl (1 samples, 0.09%)</title><rect x="1053.1" y="803.0" width="1.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1056.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.09%)</title><rect x="1054.2" y="947.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1057.2" y="958.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.09%)</title><rect x="1054.2" y="931.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1057.2" y="942.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1055.3" y="1011.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1058.3" y="1022.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.09%)</title><rect x="1056.4" y="1027.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1059.4" y="1038.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.09%)</title><rect x="1056.4" y="1011.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1059.4" y="1022.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.09%)</title><rect x="1056.4" y="995.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1059.4" y="1006.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1056.4" y="979.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1059.4" y="990.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1056.4" y="963.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1059.4" y="974.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1056.4" y="947.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1059.4" y="958.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1057.5" y="1091.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1060.5" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1057.5" y="1075.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1060.5" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1057.5" y="1059.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1060.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1057.5" y="1043.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1060.5" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1057.5" y="1027.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1060.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1057.5" y="1011.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1060.5" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1057.5" y="995.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1060.5" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1057.5" y="979.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1060.5" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1057.5" y="963.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1060.5" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1057.5" y="947.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1060.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1057.5" y="931.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1060.5" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1057.5" y="915.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1060.5" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1057.5" y="899.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1060.5" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1057.5" y="883.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1060.5" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1057.5" y="867.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1060.5" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1057.5" y="851.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1060.5" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1057.5" y="835.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1060.5" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1057.5" y="819.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1060.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1057.5" y="803.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1060.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1057.5" y="787.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1060.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1057.5" y="771.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1060.5" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1057.5" y="755.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1060.5" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1057.5" y="739.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1060.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1057.5" y="723.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1060.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1057.5" y="707.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1060.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1057.5" y="691.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1060.5" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1057.5" y="675.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1060.5" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1057.5" y="659.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1060.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1057.5" y="643.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1060.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1057.5" y="627.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1060.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1057.5" y="611.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1060.5" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1057.5" y="595.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1060.5" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1057.5" y="579.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1060.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1057.5" y="563.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1060.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1057.5" y="547.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1060.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1057.5" y="531.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1060.5" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1057.5" y="515.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1060.5" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1057.5" y="499.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1060.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.09%)</title><rect x="1057.5" y="483.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1060.5" y="494.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.09%)</title><rect x="1057.5" y="467.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1060.5" y="478.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.09%)</title><rect x="1057.5" y="451.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1060.5" y="462.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1058.6" y="595.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1061.6" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1058.6" y="579.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1061.6" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1058.6" y="563.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1061.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1058.6" y="547.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1061.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1058.6" y="531.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1061.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1058.6" y="515.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1061.6" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1058.6" y="499.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1061.6" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1058.6" y="483.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1061.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1058.6" y="467.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1061.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1058.6" y="451.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1061.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1058.6" y="435.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1061.6" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1058.6" y="419.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1061.6" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1058.6" y="403.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1061.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1058.6" y="387.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1061.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1058.6" y="371.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1061.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1058.6" y="355.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1061.6" y="366.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1058.6" y="339.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1061.6" y="350.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1058.6" y="323.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1061.6" y="334.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.09%)</title><rect x="1058.6" y="307.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1061.6" y="318.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1058.6" y="291.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1061.6" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1058.6" y="275.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1061.6" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1058.6" y="259.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1061.6" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1058.6" y="243.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1061.6" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1058.6" y="227.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1061.6" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1058.6" y="211.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1061.6" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1058.6" y="195.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1061.6" y="206.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1058.6" y="179.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1061.6" y="190.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1058.6" y="163.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1061.6" y="174.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1058.6" y="147.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1061.6" y="158.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1058.6" y="131.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1061.6" y="142.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1058.6" y="115.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1061.6" y="126.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.09%)</title><rect x="1058.6" y="99.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1061.6" y="110.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.09%)</title><rect x="1058.6" y="83.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1061.6" y="94.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.09%)</title><rect x="1058.6" y="67.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1061.6" y="78.0"></text>
</g>
<g>
<title>SymbolTable::lookup_common(char const*, int, unsigned int) (1 samples, 0.09%)</title><rect x="1058.6" y="51.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1061.6" y="62.0"></text>
</g>
<g>
<title>SymbolTable::lookup_shared(char const*, int, unsigned int) (1 samples, 0.09%)</title><rect x="1058.6" y="35.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1061.6" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1059.7" y="1107.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1062.7" y="1118.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1059.7" y="1091.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1062.7" y="1102.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long long) (1 samples, 0.09%)</title><rect x="1059.7" y="1075.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1062.7" y="1086.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.09%)</title><rect x="1059.7" y="1059.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1062.7" y="1070.0"></text>
</g>
<g>
<title>C2AccessFence::C2AccessFence(C2Access&amp;) (1 samples, 0.09%)</title><rect x="1059.7" y="1043.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1062.7" y="1054.0"></text>
</g>
<g>
<title>Parse::do_instanceof() (1 samples, 0.09%)</title><rect x="1060.9" y="1107.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1063.9" y="1118.0"></text>
</g>
<g>
<title>GraphKit::gen_instanceof(Node*, Node*, bool) (1 samples, 0.09%)</title><rect x="1060.9" y="1091.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1063.9" y="1102.0"></text>
</g>
<g>
<title>GraphKit::null_check_oop(Node*, Node**, bool, bool, bool) (1 samples, 0.09%)</title><rect x="1060.9" y="1075.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1063.9" y="1086.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.09%)</title><rect x="1060.9" y="1059.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1063.9" y="1070.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.09%)</title><rect x="1060.9" y="1043.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1063.9" y="1054.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1060.9" y="1027.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1063.9" y="1038.0"></text>
</g>
<g>
<title>Parse::init_blocks() (1 samples, 0.09%)</title><rect x="1062.0" y="1139.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1065.0" y="1150.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.19%)</title><rect x="1063.1" y="1171.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1066.1" y="1182.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 0.19%)</title><rect x="1063.1" y="1155.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1066.1" y="1166.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.09%)</title><rect x="1065.3" y="1171.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1068.3" y="1182.0"></text>
</g>
<g>
<title>TypeTuple::make_range(ciSignature*) (1 samples, 0.09%)</title><rect x="1065.3" y="1155.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1068.3" y="1166.0"></text>
</g>
<g>
<title>TypeTuple::fields(unsigned int) (1 samples, 0.09%)</title><rect x="1065.3" y="1139.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1068.3" y="1150.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (1 samples, 0.09%)</title><rect x="1066.4" y="1171.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1069.4" y="1182.0"></text>
</g>
<g>
<title>nmethod::post_compiled_method_load_event() (1 samples, 0.09%)</title><rect x="1066.4" y="1155.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1069.4" y="1166.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.09%)</title><rect x="1066.4" y="1139.0" width="1.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1069.4" y="1150.0"></text>
</g>
<g>
<title>CompilationLog::log_nmethod(JavaThread*, nmethod*) (1 samples, 0.09%)</title><rect x="1067.5" y="1203.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1070.5" y="1214.0"></text>
</g>
<g>
<title>StringEventLog::log(Thread*, char const*, ...) (1 samples, 0.09%)</title><rect x="1067.5" y="1187.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1070.5" y="1198.0"></text>
</g>
<g>
<title>StringEventLog::logv(Thread*, char const*, __va_list_tag*) (1 samples, 0.09%)</title><rect x="1067.5" y="1171.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1070.5" y="1182.0"></text>
</g>
<g>
<title>jio_vsnprintf (1 samples, 0.09%)</title><rect x="1067.5" y="1155.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1070.5" y="1166.0"></text>
</g>
<g>
<title>os::vsnprintf(char*, unsigned long, char const*, __va_list_tag*) (1 samples, 0.09%)</title><rect x="1067.5" y="1139.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1070.5" y="1150.0"></text>
</g>
<g>
<title>vsnprintf (1 samples, 0.09%)</title><rect x="1067.5" y="1123.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1070.5" y="1134.0"></text>
</g>
<g>
<title>_vsnprintf (1 samples, 0.09%)</title><rect x="1067.5" y="1107.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1070.5" y="1118.0"></text>
</g>
<g>
<title>__v2printf (1 samples, 0.09%)</title><rect x="1067.5" y="1091.0" width="1.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1070.5" y="1102.0"></text>
</g>
<g>
<title>__vfprintf (1 samples, 0.09%)</title><rect x="1067.5" y="1075.0" width="1.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1070.5" y="1086.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (14 samples, 1.31%)</title><rect x="1068.6" y="1203.0" width="15.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1071.6" y="1214.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (14 samples, 1.31%)</title><rect x="1068.6" y="1187.0" width="15.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1071.6" y="1198.0"></text>
</g>
<g>
<title>Compilation::compile_method() (14 samples, 1.31%)</title><rect x="1068.6" y="1171.0" width="15.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1071.6" y="1182.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (13 samples, 1.22%)</title><rect x="1068.6" y="1155.0" width="14.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1071.6" y="1166.0"></text>
</g>
<g>
<title>Compilation::build_hir() (6 samples, 0.56%)</title><rect x="1068.6" y="1139.0" width="6.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1071.6" y="1150.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (5 samples, 0.47%)</title><rect x="1068.6" y="1123.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1071.6" y="1134.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (5 samples, 0.47%)</title><rect x="1068.6" y="1107.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1071.6" y="1118.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (5 samples, 0.47%)</title><rect x="1068.6" y="1091.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1071.6" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (5 samples, 0.47%)</title><rect x="1068.6" y="1075.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1071.6" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (5 samples, 0.47%)</title><rect x="1068.6" y="1059.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1071.6" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (2 samples, 0.19%)</title><rect x="1068.6" y="1043.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1071.6" y="1054.0"></text>
</g>
<g>
<title>ValueStack::copy(ValueStack::Kind, int) (1 samples, 0.09%)</title><rect x="1068.6" y="1027.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1071.6" y="1038.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.09%)</title><rect x="1068.6" y="1011.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1071.6" y="1022.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1068.6" y="995.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1071.6" y="1006.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.09%)</title><rect x="1068.6" y="979.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1071.6" y="990.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.09%)</title><rect x="1069.7" y="1027.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1072.7" y="1038.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1069.7" y="1011.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1072.7" y="1022.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1069.7" y="995.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1072.7" y="1006.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1069.7" y="979.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1072.7" y="990.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1069.7" y="963.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1072.7" y="974.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.09%)</title><rect x="1069.7" y="947.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1072.7" y="958.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.09%)</title><rect x="1069.7" y="931.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1072.7" y="942.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1069.7" y="915.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1072.7" y="926.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1069.7" y="899.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1072.7" y="910.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1069.7" y="883.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1072.7" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (3 samples, 0.28%)</title><rect x="1070.8" y="1043.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1073.8" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.19%)</title><rect x="1070.8" y="1027.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1073.8" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.19%)</title><rect x="1070.8" y="1011.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1073.8" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.09%)</title><rect x="1070.8" y="995.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1073.8" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.09%)</title><rect x="1070.8" y="979.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1073.8" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1070.8" y="963.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1073.8" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1070.8" y="947.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1073.8" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::try_method_handle_inline(ciMethod*, bool) (1 samples, 0.09%)</title><rect x="1070.8" y="931.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1073.8" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1070.8" y="915.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1073.8" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1070.8" y="899.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1073.8" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.09%)</title><rect x="1070.8" y="883.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1073.8" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.09%)</title><rect x="1070.8" y="867.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1073.8" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1070.8" y="851.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1073.8" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1070.8" y="835.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1073.8" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1070.8" y="819.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1073.8" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.09%)</title><rect x="1070.8" y="803.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1073.8" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.09%)</title><rect x="1070.8" y="787.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1073.8" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1070.8" y="771.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1073.8" y="782.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1070.8" y="755.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1073.8" y="766.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1070.8" y="739.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1073.8" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1070.8" y="723.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1073.8" y="734.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1070.8" y="707.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1073.8" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.09%)</title><rect x="1071.9" y="995.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1074.9" y="1006.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.09%)</title><rect x="1071.9" y="979.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1074.9" y="990.0"></text>
</g>
<g>
<title>BlockListBuilder::mark_loops() (1 samples, 0.09%)</title><rect x="1071.9" y="963.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1074.9" y="974.0"></text>
</g>
<g>
<title>BlockListBuilder::mark_loops(BlockBegin*, bool) (1 samples, 0.09%)</title><rect x="1071.9" y="947.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1074.9" y="958.0"></text>
</g>
<g>
<title>BlockListBuilder::mark_loops(BlockBegin*, bool) (1 samples, 0.09%)</title><rect x="1071.9" y="931.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1074.9" y="942.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1073.0" y="1027.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1076.0" y="1038.0"></text>
</g>
<g>
<title>ConstantPool::impl_tag_ref_at(int, bool) (1 samples, 0.09%)</title><rect x="1073.0" y="1011.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1076.0" y="1022.0"></text>
</g>
<g>
<title>IR::compute_code() (1 samples, 0.09%)</title><rect x="1074.1" y="1123.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1077.1" y="1134.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::ComputeLinearScanOrder(Compilation*, BlockBegin*) (1 samples, 0.09%)</title><rect x="1074.1" y="1107.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1077.1" y="1118.0"></text>
</g>
<g>
<title>GrowableArray&lt;BlockBegin*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.09%)</title><rect x="1074.1" y="1091.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1077.1" y="1102.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1074.1" y="1075.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1077.1" y="1086.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (3 samples, 0.28%)</title><rect x="1075.2" y="1139.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1078.2" y="1150.0"></text>
</g>
<g>
<title>Compilation::emit_code_epilog(LIR_Assembler*) (1 samples, 0.09%)</title><rect x="1075.2" y="1123.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1078.2" y="1134.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_stubs(CodeStubList*) (1 samples, 0.09%)</title><rect x="1075.2" y="1107.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1078.2" y="1118.0"></text>
</g>
<g>
<title>CounterOverflowStub::emit_code(LIR_Assembler*) (1 samples, 0.09%)</title><rect x="1075.2" y="1091.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1078.2" y="1102.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.09%)</title><rect x="1075.2" y="1075.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1078.2" y="1086.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.09%)</title><rect x="1075.2" y="1059.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1078.2" y="1070.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.09%)</title><rect x="1075.2" y="1043.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1078.2" y="1054.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.09%)</title><rect x="1075.2" y="1027.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1078.2" y="1038.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (2 samples, 0.19%)</title><rect x="1076.3" y="1123.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1079.3" y="1134.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_lir_list(LIR_List*) (2 samples, 0.19%)</title><rect x="1076.3" y="1107.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1079.3" y="1118.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op2(LIR_Op2*) (1 samples, 0.09%)</title><rect x="1076.3" y="1091.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1079.3" y="1102.0"></text>
</g>
<g>
<title>LIR_OpBranch::emit_code(LIR_Assembler*) (1 samples, 0.09%)</title><rect x="1077.4" y="1091.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1080.4" y="1102.0"></text>
</g>
<g>
<title>Assembler::jcc(Assembler::Condition, Label&amp;, bool) (1 samples, 0.09%)</title><rect x="1077.4" y="1075.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1080.4" y="1086.0"></text>
</g>
<g>
<title>Label::add_patch_at(CodeBuffer*, int, char const*, int) (1 samples, 0.09%)</title><rect x="1077.4" y="1059.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1080.4" y="1070.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (4 samples, 0.37%)</title><rect x="1078.5" y="1139.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1081.5" y="1150.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.09%)</title><rect x="1078.5" y="1123.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1081.5" y="1134.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.09%)</title><rect x="1078.5" y="1107.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1081.5" y="1118.0"></text>
</g>
<g>
<title>LIRGenerator::do_Goto(Goto*) (1 samples, 0.09%)</title><rect x="1078.5" y="1091.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1081.5" y="1102.0"></text>
</g>
<g>
<title>LIRGenerator::move_to_phi(ValueStack*) (1 samples, 0.09%)</title><rect x="1078.5" y="1075.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1081.5" y="1086.0"></text>
</g>
<g>
<title>PhiResolverState::reset(int) (1 samples, 0.09%)</title><rect x="1078.5" y="1059.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1081.5" y="1070.0"></text>
</g>
<g>
<title>GrowableArray&lt;ResolveNode*&gt;::raw_at_put_grow(int, ResolveNode* const&amp;, ResolveNode* const&amp;) (1 samples, 0.09%)</title><rect x="1078.5" y="1043.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1081.5" y="1054.0"></text>
</g>
<g>
<title>GrowableArray&lt;ResolveNode*&gt;::grow(int) (1 samples, 0.09%)</title><rect x="1078.5" y="1027.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1081.5" y="1038.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (3 samples, 0.28%)</title><rect x="1079.6" y="1123.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1082.6" y="1134.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (2 samples, 0.19%)</title><rect x="1079.6" y="1107.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1082.6" y="1118.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (2 samples, 0.19%)</title><rect x="1079.6" y="1091.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1082.6" y="1102.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(IntervalState, int) (1 samples, 0.09%)</title><rect x="1079.6" y="1075.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1082.6" y="1086.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.09%)</title><rect x="1080.7" y="1075.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1083.7" y="1086.0"></text>
</g>
<g>
<title>LinearScanWalker::init_vars_for_alloc(Interval*) (1 samples, 0.09%)</title><rect x="1080.7" y="1059.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1083.7" y="1070.0"></text>
</g>
<g>
<title>LIRGenerator::is_vreg_flag_set(int, LIRGenerator::VregFlag) (1 samples, 0.09%)</title><rect x="1080.7" y="1043.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1083.7" y="1054.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.09%)</title><rect x="1081.8" y="1107.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1084.8" y="1118.0"></text>
</g>
<g>
<title>Interval::add_range(int, int) (1 samples, 0.09%)</title><rect x="1081.8" y="1091.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1084.8" y="1102.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1081.8" y="1075.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1084.8" y="1086.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.09%)</title><rect x="1081.8" y="1059.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1084.8" y="1070.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.09%)</title><rect x="1082.9" y="1155.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1085.9" y="1166.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (1 samples, 0.09%)</title><rect x="1082.9" y="1139.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1085.9" y="1150.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle const&amp;, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (1 samples, 0.09%)</title><rect x="1082.9" y="1123.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1085.9" y="1134.0"></text>
</g>
<g>
<title>nmethod::log_new_nmethod() const (1 samples, 0.09%)</title><rect x="1082.9" y="1107.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1085.9" y="1118.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (1 samples, 0.09%)</title><rect x="1084.0" y="1203.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1087.0" y="1214.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.09%)</title><rect x="1084.0" y="1187.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1087.0" y="1198.0"></text>
</g>
<g>
<title>ciObjectFactory::find_non_perm(oopDesc*) (1 samples, 0.09%)</title><rect x="1084.0" y="1171.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1087.0" y="1182.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1084.0" y="1155.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1087.0" y="1166.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1084.0" y="1139.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1087.0" y="1150.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;573558ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 573558ull&gt;::oop_access_barrier(oopDesc*, long) (1 samples, 0.09%)</title><rect x="1084.0" y="1123.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1087.0" y="1134.0"></text>
</g>
<g>
<title>CompileBroker::possibly_add_compiler_threads() (1 samples, 0.09%)</title><rect x="1085.1" y="1219.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1088.1" y="1230.0"></text>
</g>
<g>
<title>os::Bsd::available_memory() (1 samples, 0.09%)</title><rect x="1085.1" y="1203.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1088.1" y="1214.0"></text>
</g>
<g>
<title>host_statistics64 (1 samples, 0.09%)</title><rect x="1085.1" y="1187.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1088.1" y="1198.0"></text>
</g>
<g>
<title>_block_invoke.modules (1 samples, 0.09%)</title><rect x="1085.1" y="1171.0" width="1.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1088.1" y="1182.0"></text>
</g>
<g>
<title>CompileQueue::get() (12 samples, 1.12%)</title><rect x="1086.2" y="1219.0" width="13.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1089.2" y="1230.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (12 samples, 1.12%)</title><rect x="1086.2" y="1203.0" width="13.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1089.2" y="1214.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (12 samples, 1.12%)</title><rect x="1086.2" y="1187.0" width="13.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1089.2" y="1198.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="1086.2" y="1171.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1089.2" y="1182.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.09%)</title><rect x="1086.2" y="1155.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1089.2" y="1166.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.09%)</title><rect x="1086.2" y="1139.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1089.2" y="1150.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.28%)</title><rect x="1087.3" y="1171.0" width="3.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1090.3" y="1182.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (8 samples, 0.75%)</title><rect x="1090.7" y="1171.0" width="8.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1093.7" y="1182.0"></text>
</g>
<g>
<title>__psynch_cvwait (8 samples, 0.75%)</title><rect x="1090.7" y="1155.0" width="8.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1093.7" y="1166.0"></text>
</g>
<g>
<title>NMethodSweeper::sweeper_loop() (1 samples, 0.09%)</title><rect x="1099.5" y="1235.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1102.5" y="1246.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.09%)</title><rect x="1099.5" y="1219.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1102.5" y="1230.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.09%)</title><rect x="1099.5" y="1203.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1102.5" y="1214.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.09%)</title><rect x="1099.5" y="1187.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1102.5" y="1198.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.09%)</title><rect x="1099.5" y="1171.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1102.5" y="1182.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (3 samples, 0.28%)</title><rect x="1100.6" y="1235.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1103.6" y="1246.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (2 samples, 0.19%)</title><rect x="1100.6" y="1219.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1103.6" y="1230.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (2 samples, 0.19%)</title><rect x="1100.6" y="1203.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1103.6" y="1214.0"></text>
</g>
<g>
<title>JvmtiCompiledMethodLoadEventMark::JvmtiCompiledMethodLoadEventMark(JavaThread*, nmethod*, void*) (2 samples, 0.19%)</title><rect x="1100.6" y="1187.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1103.6" y="1198.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (2 samples, 0.19%)</title><rect x="1100.6" y="1171.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1103.6" y="1182.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.09%)</title><rect x="1101.7" y="1155.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1104.7" y="1166.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.09%)</title><rect x="1101.7" y="1139.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1104.7" y="1150.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.09%)</title><rect x="1102.8" y="1219.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1105.8" y="1230.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.09%)</title><rect x="1102.8" y="1203.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1105.8" y="1214.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.09%)</title><rect x="1102.8" y="1187.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1105.8" y="1198.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.09%)</title><rect x="1102.8" y="1171.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1105.8" y="1182.0"></text>
</g>
<g>
<title>VMError::is_error_reported() (1 samples, 0.09%)</title><rect x="1103.9" y="1267.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1106.9" y="1278.0"></text>
</g>
<g>
<title>VMThread::run() (8 samples, 0.75%)</title><rect x="1105.0" y="1267.0" width="8.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1108.0" y="1278.0"></text>
</g>
<g>
<title>VMThread::loop() (8 samples, 0.75%)</title><rect x="1105.0" y="1251.0" width="8.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1108.0" y="1262.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (5 samples, 0.47%)</title><rect x="1105.0" y="1235.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1108.0" y="1246.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (5 samples, 0.47%)</title><rect x="1105.0" y="1219.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1108.0" y="1230.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 0.47%)</title><rect x="1105.0" y="1203.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1108.0" y="1214.0"></text>
</g>
<g>
<title>__gettimeofday (1 samples, 0.09%)</title><rect x="1105.0" y="1187.0" width="1.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1108.0" y="1198.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.37%)</title><rect x="1106.1" y="1187.0" width="4.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1109.1" y="1198.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (3 samples, 0.28%)</title><rect x="1110.5" y="1235.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1113.5" y="1246.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.09%)</title><rect x="1110.5" y="1219.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1113.5" y="1230.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.09%)</title><rect x="1110.5" y="1203.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1113.5" y="1214.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.09%)</title><rect x="1110.5" y="1187.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1113.5" y="1198.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.09%)</title><rect x="1110.5" y="1171.0" width="1.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1113.5" y="1182.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (2 samples, 0.19%)</title><rect x="1111.6" y="1219.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1114.6" y="1230.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (2 samples, 0.19%)</title><rect x="1111.6" y="1203.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1114.6" y="1214.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (2 samples, 0.19%)</title><rect x="1111.6" y="1187.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1114.6" y="1198.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (2 samples, 0.19%)</title><rect x="1111.6" y="1171.0" width="2.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1114.6" y="1182.0"></text>
</g>
<g>
<title>WatcherThread::run() (69 samples, 6.45%)</title><rect x="1113.8" y="1267.0" width="76.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1116.8" y="1278.0">WatcherT..</text>
</g>
<g>
<title>WatcherThread::sleep() const (69 samples, 6.45%)</title><rect x="1113.8" y="1251.0" width="76.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1116.8" y="1262.0">WatcherT..</text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (67 samples, 6.27%)</title><rect x="1114.9" y="1235.0" width="74.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1117.9" y="1246.0">Monitor:..</text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (67 samples, 6.27%)</title><rect x="1114.9" y="1219.0" width="74.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1117.9" y="1230.0">Monitor:..</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (66 samples, 6.17%)</title><rect x="1114.9" y="1203.0" width="72.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1117.9" y="1214.0">os::Plat..</text>
</g>
<g>
<title>__gettimeofday (5 samples, 0.47%)</title><rect x="1114.9" y="1187.0" width="5.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1117.9" y="1198.0"></text>
</g>
<g>
<title>__psynch_cvwait (58 samples, 5.43%)</title><rect x="1120.5" y="1187.0" width="64.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1123.5" y="1198.0">__psync..</text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.09%)</title><rect x="1184.5" y="1187.0" width="1.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1187.5" y="1198.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.09%)</title><rect x="1184.5" y="1171.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1187.5" y="1182.0"></text>
</g>
<g>
<title>to_abstime(timespec*, long, bool) (2 samples, 0.19%)</title><rect x="1185.6" y="1187.0" width="2.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1188.6" y="1198.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.09%)</title><rect x="1186.7" y="1171.0" width="1.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1189.7" y="1182.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.09%)</title><rect x="1186.7" y="1155.0" width="1.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1189.7" y="1166.0"></text>
</g>
<g>
<title>pthread_cond_timedwait (1 samples, 0.09%)</title><rect x="1187.8" y="1203.0" width="1.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1190.8" y="1214.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="1188.9" y="1235.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.9" y="1246.0"></text>
</g>
</g>
</svg>
