<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1078" onload="init(evt)" viewBox="0 0 1200 1078" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1061"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1061"> </text>
<g id="frames">
<g>
<title>all (1,830 samples, 100.00%)</title><rect x="10.0" y="1027.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="1038.0">all</text>
</g>
<g>
<title>[NIO Selector #0 tid=23811] (361 samples, 19.73%)</title><rect x="10.0" y="1011.0" width="232.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="13.0" y="1022.0">[NIO Selector #0 tid=23811]</text>
</g>
<g>
<title>[not_walkable_Java] (5 samples, 0.27%)</title><rect x="10.0" y="995.0" width="3.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>SharedRuntime::fixup_callers_callsite(Method*, unsigned char*) (2 samples, 0.11%)</title><rect x="11.3" y="979.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="14.3" y="990.0"></text>
</g>
<g>
<title>nmethod::verified_entry_point() const (1 samples, 0.05%)</title><rect x="12.6" y="979.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="15.6" y="990.0"></text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.11%)</title><rect x="13.2" y="995.0" width="1.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="16.2" y="1006.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (354 samples, 19.34%)</title><rect x="14.5" y="995.0" width="228.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="17.5" y="1006.0">one/nio/server/SelectorThread...</text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (1 samples, 0.05%)</title><rect x="14.5" y="979.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="17.5" y="990.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (1 samples, 0.05%)</title><rect x="14.5" y="963.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="17.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.05%)</title><rect x="14.5" y="947.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.5" y="958.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (203 samples, 11.09%)</title><rect x="15.2" y="979.0" width="130.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="18.2" y="990.0">one/nio/net/Java..</text>
</g>
<g>
<title>java/lang/System.nanoTime (3 samples, 0.16%)</title><rect x="19.7" y="963.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.7" y="974.0"></text>
</g>
<g>
<title>JVM_NanoTime (1 samples, 0.05%)</title><rect x="19.7" y="947.0" width="0.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="22.7" y="958.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.11%)</title><rect x="20.3" y="947.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="23.3" y="958.0"></text>
</g>
<g>
<title>_res (1 samples, 0.05%)</title><rect x="21.0" y="931.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="24.0" y="942.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (1 samples, 0.05%)</title><rect x="21.6" y="963.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.6" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.05%)</title><rect x="21.6" y="947.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="24.6" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.05%)</title><rect x="21.6" y="931.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="24.6" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (190 samples, 10.38%)</title><rect x="22.3" y="963.0" width="122.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="25.3" y="974.0">sun/nio/ch/Sele..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (190 samples, 10.38%)</title><rect x="22.3" y="947.0" width="122.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="25.3" y="958.0">sun/nio/ch/Sele..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (189 samples, 10.33%)</title><rect x="22.9" y="931.0" width="121.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="25.9" y="942.0">sun/nio/ch/KQue..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (182 samples, 9.95%)</title><rect x="23.5" y="915.0" width="117.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="26.5" y="926.0">sun/nio/ch/KQu..</text>
</g>
<g>
<title>JNI_OnLoad (1 samples, 0.05%)</title><rect x="28.7" y="899.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="31.7" y="910.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (1 samples, 0.05%)</title><rect x="29.3" y="899.0" width="0.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="32.3" y="910.0"></text>
</g>
<g>
<title>kevent (172 samples, 9.40%)</title><rect x="30.0" y="899.0" width="110.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="33.0" y="910.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (4 samples, 0.22%)</title><rect x="140.9" y="915.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="143.9" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.16%)</title><rect x="141.5" y="899.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="144.5" y="910.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.16%)</title><rect x="141.5" y="883.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="144.5" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.16%)</title><rect x="141.5" y="867.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="144.5" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.16%)</title><rect x="141.5" y="851.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="144.5" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.05%)</title><rect x="142.2" y="835.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="145.2" y="846.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.05%)</title><rect x="142.8" y="835.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="145.8" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.05%)</title><rect x="143.5" y="915.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="146.5" y="926.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.05%)</title><rect x="143.5" y="899.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="146.5" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (1 samples, 0.05%)</title><rect x="144.1" y="915.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="147.1" y="926.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (1 samples, 0.05%)</title><rect x="144.1" y="899.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="147.1" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.05%)</title><rect x="144.1" y="883.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="147.1" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (2 samples, 0.11%)</title><rect x="144.8" y="963.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="147.8" y="974.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (1 samples, 0.05%)</title><rect x="145.4" y="947.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="148.4" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (1 samples, 0.05%)</title><rect x="145.4" y="931.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="148.4" y="942.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (150 samples, 8.20%)</title><rect x="146.1" y="979.0" width="96.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="149.1" y="990.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (150 samples, 8.20%)</title><rect x="146.1" y="963.0" width="96.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="149.1" y="974.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (115 samples, 6.28%)</title><rect x="146.1" y="947.0" width="74.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="149.1" y="958.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (104 samples, 5.68%)</title><rect x="148.6" y="931.0" width="67.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="151.6" y="942.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (104 samples, 5.68%)</title><rect x="148.6" y="915.0" width="67.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="151.6" y="926.0">one/nio..</text>
</g>
<g>
<title>RequestHandler0_status.handleRequest (103 samples, 5.63%)</title><rect x="148.6" y="899.0" width="66.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="151.6" y="910.0">Request..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (102 samples, 5.57%)</title><rect x="148.6" y="883.0" width="65.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="151.6" y="894.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (101 samples, 5.52%)</title><rect x="148.6" y="867.0" width="65.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="151.6" y="878.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (13 samples, 0.71%)</title><rect x="148.6" y="851.0" width="8.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="151.6" y="862.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="150.6" y="835.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="153.6" y="846.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (9 samples, 0.49%)</title><rect x="151.2" y="835.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="154.2" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (4 samples, 0.22%)</title><rect x="151.9" y="819.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="154.9" y="830.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.05%)</title><rect x="153.8" y="803.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="156.8" y="814.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.05%)</title><rect x="153.8" y="787.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="156.8" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.22%)</title><rect x="154.4" y="819.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="157.4" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.22%)</title><rect x="154.4" y="803.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="157.4" y="814.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.05%)</title><rect x="156.4" y="787.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="159.4" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.05%)</title><rect x="156.4" y="771.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="159.4" y="782.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (88 samples, 4.81%)</title><rect x="157.0" y="851.0" width="56.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="160.0" y="862.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/Session.write (88 samples, 4.81%)</title><rect x="157.0" y="835.0" width="56.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="160.0" y="846.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (87 samples, 4.75%)</title><rect x="157.7" y="819.0" width="56.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="160.7" y="830.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (87 samples, 4.75%)</title><rect x="157.7" y="803.0" width="56.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="160.7" y="814.0">one/ni..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (87 samples, 4.75%)</title><rect x="157.7" y="787.0" width="56.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="160.7" y="798.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (87 samples, 4.75%)</title><rect x="157.7" y="771.0" width="56.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="160.7" y="782.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (87 samples, 4.75%)</title><rect x="157.7" y="755.0" width="56.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="160.7" y="766.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (84 samples, 4.59%)</title><rect x="157.7" y="739.0" width="54.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="160.7" y="750.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (84 samples, 4.59%)</title><rect x="157.7" y="723.0" width="54.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="160.7" y="734.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (84 samples, 4.59%)</title><rect x="157.7" y="707.0" width="54.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="160.7" y="718.0">sun/n..</text>
</g>
<g>
<title>write (83 samples, 4.54%)</title><rect x="158.3" y="691.0" width="53.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="161.3" y="702.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.16%)</title><rect x="211.8" y="739.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="214.8" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.05%)</title><rect x="213.1" y="723.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="216.1" y="734.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.05%)</title><rect x="213.1" y="707.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="216.1" y="718.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.05%)</title><rect x="213.1" y="691.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="216.1" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="213.1" y="675.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="216.1" y="686.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.05%)</title><rect x="213.1" y="659.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="216.1" y="670.0"></text>
</g>
<g>
<title>one/nio/server/Server.incRequestsProcessed (1 samples, 0.05%)</title><rect x="213.8" y="867.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="216.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.incrementAndGet (1 samples, 0.05%)</title><rect x="213.8" y="851.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="216.8" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.status (1 samples, 0.05%)</title><rect x="214.4" y="883.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="217.4" y="894.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (1 samples, 0.05%)</title><rect x="214.4" y="867.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="217.4" y="878.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.05%)</title><rect x="214.4" y="851.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="217.4" y="862.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.05%)</title><rect x="215.0" y="899.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="218.0" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.05%)</title><rect x="215.0" y="883.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="218.0" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.05%)</title><rect x="215.0" y="867.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="218.0" y="878.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.05%)</title><rect x="215.0" y="851.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="218.0" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.05%)</title><rect x="215.0" y="835.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="218.0" y="846.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.11%)</title><rect x="215.7" y="931.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="218.7" y="942.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.05%)</title><rect x="215.7" y="915.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="218.7" y="926.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.05%)</title><rect x="215.7" y="899.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="218.7" y="910.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.05%)</title><rect x="215.7" y="883.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="218.7" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.05%)</title><rect x="215.7" y="867.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="218.7" y="878.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.05%)</title><rect x="216.3" y="915.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="219.3" y="926.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.05%)</title><rect x="216.3" y="899.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="219.3" y="910.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.11%)</title><rect x="217.0" y="931.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="220.0" y="942.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.11%)</title><rect x="217.0" y="915.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="220.0" y="926.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.11%)</title><rect x="217.0" y="899.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="220.0" y="910.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.05%)</title><rect x="217.6" y="883.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="220.6" y="894.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.05%)</title><rect x="217.6" y="867.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="220.6" y="878.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.05%)</title><rect x="217.6" y="851.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="220.6" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.16%)</title><rect x="218.3" y="931.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="221.3" y="942.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.16%)</title><rect x="218.3" y="915.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="221.3" y="926.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.05%)</title><rect x="219.6" y="899.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="222.6" y="910.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.05%)</title><rect x="219.6" y="883.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="222.6" y="894.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.05%)</title><rect x="219.6" y="867.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="222.6" y="878.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (35 samples, 1.91%)</title><rect x="220.2" y="947.0" width="22.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="223.2" y="958.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (35 samples, 1.91%)</title><rect x="220.2" y="931.0" width="22.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="223.2" y="942.0">o..</text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.05%)</title><rect x="222.1" y="915.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="225.1" y="926.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.05%)</title><rect x="222.1" y="899.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="225.1" y="910.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.05%)</title><rect x="222.1" y="883.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="225.1" y="894.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::method_invocation_event(methodHandle const&amp;, methodHandle const&amp;, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.05%)</title><rect x="222.1" y="867.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="225.1" y="878.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::call_event(Method*, CompLevel, JavaThread*) (1 samples, 0.05%)</title><rect x="222.1" y="851.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="225.1" y="862.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::common(bool (SimpleThresholdPolicy::*)(int, int, CompLevel, Method*), Method*, CompLevel, bool) (1 samples, 0.05%)</title><rect x="222.1" y="835.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="225.1" y="846.0"></text>
</g>
<g>
<title>Method::is_setter() const (1 samples, 0.05%)</title><rect x="222.1" y="819.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="225.1" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.05%)</title><rect x="222.8" y="915.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="225.8" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (30 samples, 1.64%)</title><rect x="223.4" y="915.0" width="19.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="226.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.05%)</title><rect x="223.4" y="899.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="226.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.05%)</title><rect x="223.4" y="883.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="226.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.05%)</title><rect x="223.4" y="867.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="226.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.05%)</title><rect x="223.4" y="851.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="226.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (1 samples, 0.05%)</title><rect x="223.4" y="835.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="226.4" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (29 samples, 1.58%)</title><rect x="224.1" y="899.0" width="18.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="227.1" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (29 samples, 1.58%)</title><rect x="224.1" y="883.0" width="18.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="227.1" y="894.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (4 samples, 0.22%)</title><rect x="224.1" y="867.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="227.1" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3 samples, 0.16%)</title><rect x="224.7" y="851.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="227.7" y="862.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.16%)</title><rect x="224.7" y="835.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="227.7" y="846.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory0 (2 samples, 0.11%)</title><rect x="224.7" y="819.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="227.7" y="830.0"></text>
</g>
<g>
<title>Unsafe_CopyMemory0(JNIEnv_*, _jobject*, _jobject*, long, _jobject*, long, long) (2 samples, 0.11%)</title><rect x="224.7" y="803.0" width="1.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="227.7" y="814.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.05%)</title><rect x="225.4" y="787.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="228.4" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.05%)</title><rect x="226.0" y="819.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="229.0" y="830.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (1 samples, 0.05%)</title><rect x="226.0" y="803.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="229.0" y="814.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (1 samples, 0.05%)</title><rect x="226.0" y="787.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="229.0" y="798.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (1 samples, 0.05%)</title><rect x="226.0" y="771.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="229.0" y="782.0"></text>
</g>
<g>
<title>java/lang/Class.isArray (1 samples, 0.05%)</title><rect x="226.0" y="755.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="229.0" y="766.0"></text>
</g>
<g>
<title>JVM_IsArrayClass (1 samples, 0.05%)</title><rect x="226.0" y="739.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="229.0" y="750.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.05%)</title><rect x="226.0" y="723.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="229.0" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (23 samples, 1.26%)</title><rect x="226.7" y="867.0" width="14.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="229.7" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (23 samples, 1.26%)</title><rect x="226.7" y="851.0" width="14.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="229.7" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (23 samples, 1.26%)</title><rect x="226.7" y="835.0" width="14.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="229.7" y="846.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.05%)</title><rect x="226.7" y="819.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="229.7" y="830.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.05%)</title><rect x="226.7" y="803.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="229.7" y="814.0"></text>
</g>
<g>
<title>read (22 samples, 1.20%)</title><rect x="227.3" y="819.0" width="14.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="230.3" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.05%)</title><rect x="241.5" y="867.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="244.5" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.05%)</title><rect x="241.5" y="851.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="244.5" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.05%)</title><rect x="242.1" y="867.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="245.1" y="878.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=24579] (404 samples, 22.08%)</title><rect x="242.8" y="1011.0" width="260.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="245.8" y="1022.0">[NIO Selector #1 tid=24579]</text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (1 samples, 0.05%)</title><rect x="242.8" y="995.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="245.8" y="1006.0"></text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.11%)</title><rect x="243.4" y="995.0" width="1.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="246.4" y="1006.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (401 samples, 21.91%)</title><rect x="244.7" y="995.0" width="258.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="247.7" y="1006.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (1 samples, 0.05%)</title><rect x="245.4" y="979.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="248.4" y="990.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (1 samples, 0.05%)</title><rect x="245.4" y="963.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="248.4" y="974.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (261 samples, 14.26%)</title><rect x="246.0" y="979.0" width="168.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="249.0" y="990.0">one/nio/net/JavaSelect..</text>
</g>
<g>
<title>_res (1 samples, 0.05%)</title><rect x="248.6" y="963.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="251.6" y="974.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (5 samples, 0.27%)</title><rect x="249.2" y="963.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="252.2" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.11%)</title><rect x="249.9" y="947.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="252.9" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.11%)</title><rect x="249.9" y="931.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="252.9" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (2 samples, 0.11%)</title><rect x="251.2" y="947.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="254.2" y="958.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.11%)</title><rect x="251.2" y="931.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="254.2" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.11%)</title><rect x="251.2" y="915.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="254.2" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (2 samples, 0.11%)</title><rect x="251.2" y="899.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="254.2" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.05%)</title><rect x="251.8" y="883.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="254.8" y="894.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (2 samples, 0.11%)</title><rect x="252.4" y="963.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="255.4" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (249 samples, 13.61%)</title><rect x="253.7" y="963.0" width="160.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="256.7" y="974.0">sun/nio/ch/SelectorI..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (248 samples, 13.55%)</title><rect x="254.4" y="947.0" width="159.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="257.4" y="958.0">sun/nio/ch/SelectorI..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (247 samples, 13.50%)</title><rect x="255.0" y="931.0" width="159.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="258.0" y="942.0">sun/nio/ch/KQueueSel..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (241 samples, 13.17%)</title><rect x="255.0" y="915.0" width="155.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="258.0" y="926.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (4 samples, 0.22%)</title><rect x="259.5" y="899.0" width="2.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="262.5" y="910.0"></text>
</g>
<g>
<title>kevent (230 samples, 12.57%)</title><rect x="262.1" y="899.0" width="148.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="265.1" y="910.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (5 samples, 0.27%)</title><rect x="410.4" y="915.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="413.4" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.05%)</title><rect x="410.4" y="899.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="413.4" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.05%)</title><rect x="410.4" y="883.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="413.4" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (4 samples, 0.22%)</title><rect x="411.1" y="899.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="414.1" y="910.0"></text>
</g>
<g>
<title>InlineCacheBuffer (1 samples, 0.05%)</title><rect x="411.7" y="883.0" width="0.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="414.7" y="894.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.11%)</title><rect x="412.4" y="883.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="415.4" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.11%)</title><rect x="412.4" y="867.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="415.4" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.11%)</title><rect x="412.4" y="851.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="415.4" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.11%)</title><rect x="412.4" y="835.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="415.4" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (1 samples, 0.05%)</title><rect x="413.7" y="915.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="416.7" y="926.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (1 samples, 0.05%)</title><rect x="413.7" y="899.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="416.7" y="910.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.05%)</title><rect x="413.7" y="883.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="416.7" y="894.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.05%)</title><rect x="413.7" y="867.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="416.7" y="878.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.05%)</title><rect x="413.7" y="851.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="416.7" y="862.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (138 samples, 7.54%)</title><rect x="414.3" y="979.0" width="89.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="417.3" y="990.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (137 samples, 7.49%)</title><rect x="414.3" y="963.0" width="88.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="417.3" y="974.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (98 samples, 5.36%)</title><rect x="414.3" y="947.0" width="63.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="417.3" y="958.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (91 samples, 4.97%)</title><rect x="414.3" y="931.0" width="58.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="417.3" y="942.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (91 samples, 4.97%)</title><rect x="414.3" y="915.0" width="58.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="417.3" y="926.0">one/ni..</text>
</g>
<g>
<title>RequestHandler0_status.handleRequest (90 samples, 4.92%)</title><rect x="414.3" y="899.0" width="58.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="417.3" y="910.0">Reques..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (88 samples, 4.81%)</title><rect x="414.3" y="883.0" width="56.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="417.3" y="894.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (87 samples, 4.75%)</title><rect x="414.3" y="867.0" width="56.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="417.3" y="878.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (11 samples, 0.60%)</title><rect x="414.3" y="851.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="417.3" y="862.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="414.9" y="835.0" width="0.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="417.9" y="846.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (9 samples, 0.49%)</title><rect x="415.6" y="835.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="418.6" y="846.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.05%)</title><rect x="415.6" y="819.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="418.6" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (4 samples, 0.22%)</title><rect x="416.2" y="819.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="419.2" y="830.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.05%)</title><rect x="418.2" y="803.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="421.2" y="814.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.05%)</title><rect x="418.2" y="787.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="421.2" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.22%)</title><rect x="418.8" y="819.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="421.8" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.22%)</title><rect x="418.8" y="803.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="421.8" y="814.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (76 samples, 4.15%)</title><rect x="421.4" y="851.0" width="49.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="424.4" y="862.0">one/n..</text>
</g>
<g>
<title>one/nio/net/Session.write (75 samples, 4.10%)</title><rect x="422.0" y="835.0" width="48.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="425.0" y="846.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (75 samples, 4.10%)</title><rect x="422.0" y="819.0" width="48.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="425.0" y="830.0">one/..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (74 samples, 4.04%)</title><rect x="422.7" y="803.0" width="47.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="425.7" y="814.0">one/..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (74 samples, 4.04%)</title><rect x="422.7" y="787.0" width="47.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="425.7" y="798.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (74 samples, 4.04%)</title><rect x="422.7" y="771.0" width="47.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="425.7" y="782.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (73 samples, 3.99%)</title><rect x="423.3" y="755.0" width="47.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="426.3" y="766.0">sun/..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.05%)</title><rect x="423.3" y="739.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="426.3" y="750.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.05%)</title><rect x="423.3" y="723.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="426.3" y="734.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.05%)</title><rect x="423.3" y="707.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="426.3" y="718.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.05%)</title><rect x="423.3" y="691.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="426.3" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (1 samples, 0.05%)</title><rect x="423.3" y="675.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="426.3" y="686.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (1 samples, 0.05%)</title><rect x="423.3" y="659.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="426.3" y="670.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (1 samples, 0.05%)</title><rect x="423.3" y="643.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="426.3" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (71 samples, 3.88%)</title><rect x="424.0" y="739.0" width="45.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="427.0" y="750.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (71 samples, 3.88%)</title><rect x="424.0" y="723.0" width="45.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="427.0" y="734.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (71 samples, 3.88%)</title><rect x="424.0" y="707.0" width="45.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="427.0" y="718.0">sun/..</text>
</g>
<g>
<title>write (69 samples, 3.77%)</title><rect x="425.3" y="691.0" width="44.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="428.3" y="702.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.05%)</title><rect x="469.7" y="739.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="472.7" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.05%)</title><rect x="469.7" y="723.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="472.7" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (1 samples, 0.05%)</title><rect x="469.7" y="707.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="472.7" y="718.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1 samples, 0.05%)</title><rect x="470.4" y="867.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="473.4" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.status (2 samples, 0.11%)</title><rect x="471.0" y="883.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="474.0" y="894.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (2 samples, 0.11%)</title><rect x="471.0" y="867.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="474.0" y="878.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (2 samples, 0.11%)</title><rect x="471.0" y="851.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="474.0" y="862.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.05%)</title><rect x="472.3" y="899.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="475.3" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.05%)</title><rect x="472.3" y="883.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="475.3" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.05%)</title><rect x="472.3" y="867.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="475.3" y="878.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.05%)</title><rect x="472.3" y="851.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="475.3" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.05%)</title><rect x="472.3" y="835.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="475.3" y="846.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (6 samples, 0.33%)</title><rect x="473.0" y="931.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="476.0" y="942.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.16%)</title><rect x="473.0" y="915.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="476.0" y="926.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.11%)</title><rect x="473.6" y="899.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="476.6" y="910.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.11%)</title><rect x="473.6" y="883.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="476.6" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.11%)</title><rect x="473.6" y="867.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="476.6" y="878.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.16%)</title><rect x="474.9" y="915.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="477.9" y="926.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.11%)</title><rect x="475.6" y="899.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="478.6" y="910.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.05%)</title><rect x="476.8" y="931.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="479.8" y="942.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.05%)</title><rect x="476.8" y="915.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="479.8" y="926.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.05%)</title><rect x="476.8" y="899.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="479.8" y="910.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.05%)</title><rect x="476.8" y="883.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="479.8" y="894.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.05%)</title><rect x="476.8" y="867.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="479.8" y="878.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (39 samples, 2.13%)</title><rect x="477.5" y="947.0" width="25.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="480.5" y="958.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (38 samples, 2.08%)</title><rect x="477.5" y="931.0" width="24.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="480.5" y="942.0">o..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.11%)</title><rect x="477.5" y="915.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="480.5" y="926.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.11%)</title><rect x="477.5" y="899.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="480.5" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.11%)</title><rect x="477.5" y="883.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="480.5" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (36 samples, 1.97%)</title><rect x="478.8" y="915.0" width="23.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="481.8" y="926.0">s..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.05%)</title><rect x="478.8" y="899.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="481.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.05%)</title><rect x="478.8" y="883.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="481.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.05%)</title><rect x="478.8" y="867.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="481.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.05%)</title><rect x="478.8" y="851.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="481.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.05%)</title><rect x="478.8" y="835.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="481.8" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.05%)</title><rect x="478.8" y="819.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="481.8" y="830.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.05%)</title><rect x="478.8" y="803.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="481.8" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (35 samples, 1.91%)</title><rect x="479.4" y="899.0" width="22.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="482.4" y="910.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (35 samples, 1.91%)</title><rect x="479.4" y="883.0" width="22.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="482.4" y="894.0">s..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (4 samples, 0.22%)</title><rect x="479.4" y="867.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="482.4" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (4 samples, 0.22%)</title><rect x="479.4" y="851.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="482.4" y="862.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.05%)</title><rect x="480.1" y="835.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="483.1" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="480.1" y="819.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="483.1" y="830.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.05%)</title><rect x="480.1" y="803.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="483.1" y="814.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="480.1" y="787.0" width="0.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="483.1" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.11%)</title><rect x="480.7" y="835.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="483.7" y="846.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.11%)</title><rect x="480.7" y="819.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="483.7" y="830.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.11%)</title><rect x="480.7" y="803.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="483.7" y="814.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (2 samples, 0.11%)</title><rect x="480.7" y="787.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="483.7" y="798.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (1 samples, 0.05%)</title><rect x="481.4" y="771.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="484.4" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (30 samples, 1.64%)</title><rect x="482.0" y="867.0" width="19.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="485.0" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (29 samples, 1.58%)</title><rect x="482.6" y="851.0" width="18.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="485.6" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (29 samples, 1.58%)</title><rect x="482.6" y="835.0" width="18.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="485.6" y="846.0"></text>
</g>
<g>
<title>read (28 samples, 1.53%)</title><rect x="483.3" y="819.0" width="18.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="486.3" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.05%)</title><rect x="501.3" y="867.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="504.3" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.05%)</title><rect x="501.3" y="851.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="504.3" y="862.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (1 samples, 0.05%)</title><rect x="502.0" y="931.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="505.0" y="942.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.05%)</title><rect x="502.6" y="963.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="505.6" y="974.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.05%)</title><rect x="502.6" y="947.0" width="0.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="505.6" y="958.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=25091] (341 samples, 18.63%)</title><rect x="503.3" y="1011.0" width="219.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="506.3" y="1022.0">[NIO Selector #2 tid=25091]</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (341 samples, 18.63%)</title><rect x="503.3" y="995.0" width="219.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="506.3" y="1006.0">one/nio/server/SelectorThread..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (193 samples, 10.55%)</title><rect x="505.2" y="979.0" width="124.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="508.2" y="990.0">one/nio/net/Jav..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (5 samples, 0.27%)</title><rect x="505.2" y="963.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="508.2" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (188 samples, 10.27%)</title><rect x="508.4" y="963.0" width="121.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="511.4" y="974.0">sun/nio/ch/Sele..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (188 samples, 10.27%)</title><rect x="508.4" y="947.0" width="121.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="511.4" y="958.0">sun/nio/ch/Sele..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (188 samples, 10.27%)</title><rect x="508.4" y="931.0" width="121.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="511.4" y="942.0">sun/nio/ch/KQue..</text>
</g>
<g>
<title>java/lang/Math.min (1 samples, 0.05%)</title><rect x="508.4" y="915.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="511.4" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (183 samples, 10.00%)</title><rect x="509.1" y="915.0" width="118.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="512.1" y="926.0">sun/nio/ch/KQu..</text>
</g>
<g>
<title>kevent (175 samples, 9.56%)</title><rect x="514.2" y="899.0" width="112.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="517.2" y="910.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 0.16%)</title><rect x="627.1" y="915.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="630.1" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.05%)</title><rect x="627.7" y="899.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="630.7" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.05%)</title><rect x="627.7" y="883.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="630.7" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (1 samples, 0.05%)</title><rect x="628.4" y="899.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="631.4" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.translateAndSetReadyOps (1 samples, 0.05%)</title><rect x="628.4" y="883.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="631.4" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.05%)</title><rect x="629.0" y="915.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="632.0" y="926.0"></text>
</g>
<g>
<title>java/util/HashSet.isEmpty (1 samples, 0.05%)</title><rect x="629.0" y="899.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="632.0" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.isEmpty (1 samples, 0.05%)</title><rect x="629.0" y="883.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="632.0" y="894.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (145 samples, 7.92%)</title><rect x="629.7" y="979.0" width="93.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="632.7" y="990.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (145 samples, 7.92%)</title><rect x="629.7" y="963.0" width="93.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="632.7" y="974.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (107 samples, 5.85%)</title><rect x="629.7" y="947.0" width="69.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="632.7" y="958.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (95 samples, 5.19%)</title><rect x="631.0" y="931.0" width="61.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="634.0" y="942.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (94 samples, 5.14%)</title><rect x="631.6" y="915.0" width="60.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="634.6" y="926.0">one/ni..</text>
</g>
<g>
<title>RequestHandler0_status.handleRequest (93 samples, 5.08%)</title><rect x="631.6" y="899.0" width="60.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="634.6" y="910.0">Reques..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (91 samples, 4.97%)</title><rect x="631.6" y="883.0" width="58.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="634.6" y="894.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (89 samples, 4.86%)</title><rect x="631.6" y="867.0" width="57.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="634.6" y="878.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6 samples, 0.33%)</title><rect x="631.6" y="851.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="634.6" y="862.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (5 samples, 0.27%)</title><rect x="632.2" y="835.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="635.2" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.11%)</title><rect x="632.2" y="819.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="635.2" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.16%)</title><rect x="633.5" y="819.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="636.5" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.16%)</title><rect x="633.5" y="803.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="636.5" y="814.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (83 samples, 4.54%)</title><rect x="635.5" y="851.0" width="53.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="638.5" y="862.0">one/n..</text>
</g>
<g>
<title>one/nio/net/Session.write (83 samples, 4.54%)</title><rect x="635.5" y="835.0" width="53.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="638.5" y="846.0">one/n..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (82 samples, 4.48%)</title><rect x="636.1" y="819.0" width="52.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="639.1" y="830.0">one/n..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (81 samples, 4.43%)</title><rect x="636.8" y="803.0" width="52.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="639.8" y="814.0">one/n..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (81 samples, 4.43%)</title><rect x="636.8" y="787.0" width="52.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="639.8" y="798.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (81 samples, 4.43%)</title><rect x="636.8" y="771.0" width="52.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="639.8" y="782.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (79 samples, 4.32%)</title><rect x="638.0" y="755.0" width="51.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="641.0" y="766.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (77 samples, 4.21%)</title><rect x="638.0" y="739.0" width="49.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="641.0" y="750.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (77 samples, 4.21%)</title><rect x="638.0" y="723.0" width="49.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="641.0" y="734.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (77 samples, 4.21%)</title><rect x="638.0" y="707.0" width="49.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="641.0" y="718.0">sun/n..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.05%)</title><rect x="638.7" y="691.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="641.7" y="702.0"></text>
</g>
<g>
<title>write (75 samples, 4.10%)</title><rect x="639.3" y="691.0" width="48.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="642.3" y="702.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.11%)</title><rect x="687.7" y="739.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="690.7" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.05%)</title><rect x="687.7" y="723.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="690.7" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.05%)</title><rect x="687.7" y="707.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="690.7" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.05%)</title><rect x="688.3" y="723.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="691.3" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.next (1 samples, 0.05%)</title><rect x="688.3" y="707.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="691.3" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.11%)</title><rect x="689.0" y="867.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="692.0" y="878.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.05%)</title><rect x="689.6" y="851.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="692.6" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.status (2 samples, 0.11%)</title><rect x="690.3" y="883.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="693.3" y="894.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (2 samples, 0.11%)</title><rect x="690.3" y="867.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="693.3" y="878.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.11%)</title><rect x="690.3" y="851.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="693.3" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.05%)</title><rect x="690.9" y="835.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="693.9" y="846.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.05%)</title><rect x="691.6" y="899.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="694.6" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.05%)</title><rect x="691.6" y="883.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="694.6" y="894.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (7 samples, 0.38%)</title><rect x="692.2" y="931.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="695.2" y="942.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (4 samples, 0.22%)</title><rect x="692.2" y="915.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="695.2" y="926.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.16%)</title><rect x="692.9" y="899.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="695.9" y="910.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.16%)</title><rect x="692.9" y="883.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="695.9" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.16%)</title><rect x="692.9" y="867.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="695.9" y="878.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.11%)</title><rect x="694.8" y="915.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="697.8" y="926.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.11%)</title><rect x="694.8" y="899.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="697.8" y="910.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.05%)</title><rect x="696.1" y="915.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="699.1" y="926.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (1 samples, 0.05%)</title><rect x="696.7" y="931.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="699.7" y="942.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.05%)</title><rect x="697.4" y="931.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="700.4" y="942.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.05%)</title><rect x="698.0" y="931.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="701.0" y="942.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.05%)</title><rect x="698.0" y="915.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="701.0" y="926.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (38 samples, 2.08%)</title><rect x="698.7" y="947.0" width="24.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="701.7" y="958.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (37 samples, 2.02%)</title><rect x="699.3" y="931.0" width="23.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="702.3" y="942.0">o..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (37 samples, 2.02%)</title><rect x="699.3" y="915.0" width="23.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="702.3" y="926.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (36 samples, 1.97%)</title><rect x="699.9" y="899.0" width="23.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="702.9" y="910.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (36 samples, 1.97%)</title><rect x="699.9" y="883.0" width="23.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="702.9" y="894.0">s..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (6 samples, 0.33%)</title><rect x="699.9" y="867.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="702.9" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (6 samples, 0.33%)</title><rect x="699.9" y="851.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="702.9" y="862.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.05%)</title><rect x="700.6" y="835.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="703.6" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="700.6" y="819.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="703.6" y="830.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.05%)</title><rect x="700.6" y="803.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="703.6" y="814.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="700.6" y="787.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="703.6" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (4 samples, 0.22%)</title><rect x="701.2" y="835.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="704.2" y="846.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory0 (1 samples, 0.05%)</title><rect x="701.2" y="819.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="704.2" y="830.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="701.2" y="803.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="704.2" y="814.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (3 samples, 0.16%)</title><rect x="701.9" y="819.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="704.9" y="830.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (3 samples, 0.16%)</title><rect x="701.9" y="803.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="704.9" y="814.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPointer (1 samples, 0.05%)</title><rect x="701.9" y="787.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="704.9" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (2 samples, 0.11%)</title><rect x="702.5" y="787.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="705.5" y="798.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (2 samples, 0.11%)</title><rect x="702.5" y="771.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="705.5" y="782.0"></text>
</g>
<g>
<title>java/lang/Class.isArray (2 samples, 0.11%)</title><rect x="702.5" y="755.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="705.5" y="766.0"></text>
</g>
<g>
<title>JVM_IsArrayClass (2 samples, 0.11%)</title><rect x="702.5" y="739.0" width="1.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="705.5" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.11%)</title><rect x="702.5" y="723.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="705.5" y="734.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.11%)</title><rect x="702.5" y="707.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="705.5" y="718.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.11%)</title><rect x="702.5" y="691.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="705.5" y="702.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.11%)</title><rect x="702.5" y="675.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="705.5" y="686.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.11%)</title><rect x="702.5" y="659.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="705.5" y="670.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (2 samples, 0.11%)</title><rect x="702.5" y="643.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="705.5" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (28 samples, 1.53%)</title><rect x="703.8" y="867.0" width="18.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="706.8" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (27 samples, 1.48%)</title><rect x="704.5" y="851.0" width="17.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="707.5" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (27 samples, 1.48%)</title><rect x="704.5" y="835.0" width="17.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="707.5" y="846.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.05%)</title><rect x="705.1" y="819.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="708.1" y="830.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.05%)</title><rect x="705.1" y="803.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="708.1" y="814.0"></text>
</g>
<g>
<title>read (25 samples, 1.37%)</title><rect x="705.7" y="819.0" width="16.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="708.7" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.11%)</title><rect x="721.9" y="867.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="724.9" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.11%)</title><rect x="721.9" y="851.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="724.9" y="862.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=25859] (537 samples, 29.34%)</title><rect x="723.2" y="1011.0" width="346.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="726.2" y="1022.0">[NIO Selector #3 tid=25859]</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.05%)</title><rect x="723.2" y="995.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="726.2" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.05%)</title><rect x="723.2" y="979.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="726.2" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.05%)</title><rect x="723.2" y="963.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="726.2" y="974.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="723.2" y="947.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="726.2" y="958.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.05%)</title><rect x="723.2" y="931.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="726.2" y="942.0"></text>
</g>
<g>
<title>[unknown_Java] (3 samples, 0.16%)</title><rect x="723.8" y="995.0" width="1.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="726.8" y="1006.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.11%)</title><rect x="724.4" y="979.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="727.4" y="990.0"></text>
</g>
<g>
<title>_res (2 samples, 0.11%)</title><rect x="724.4" y="963.0" width="1.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="727.4" y="974.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (533 samples, 29.13%)</title><rect x="725.7" y="995.0" width="343.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="728.7" y="1006.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (283 samples, 15.46%)</title><rect x="726.4" y="979.0" width="182.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="729.4" y="990.0">one/nio/net/JavaSelector..</text>
</g>
<g>
<title>_res (1 samples, 0.05%)</title><rect x="728.3" y="963.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="731.3" y="974.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.11%)</title><rect x="729.0" y="963.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="732.0" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (1 samples, 0.05%)</title><rect x="729.6" y="947.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="732.6" y="958.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.05%)</title><rect x="729.6" y="931.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="732.6" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (277 samples, 15.14%)</title><rect x="730.3" y="963.0" width="178.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="733.3" y="974.0">sun/nio/ch/SelectorImpl..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (277 samples, 15.14%)</title><rect x="730.3" y="947.0" width="178.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="733.3" y="958.0">sun/nio/ch/SelectorImpl..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (277 samples, 15.14%)</title><rect x="730.3" y="931.0" width="178.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="733.3" y="942.0">sun/nio/ch/KQueueSelect..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (273 samples, 14.92%)</title><rect x="730.3" y="915.0" width="176.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="733.3" y="926.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (5 samples, 0.27%)</title><rect x="738.0" y="899.0" width="3.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="741.0" y="910.0"></text>
</g>
<g>
<title>kevent (256 samples, 13.99%)</title><rect x="741.2" y="899.0" width="165.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="744.2" y="910.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 0.16%)</title><rect x="906.3" y="915.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="909.3" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.05%)</title><rect x="906.3" y="899.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="909.3" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.05%)</title><rect x="906.3" y="883.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="909.3" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.11%)</title><rect x="906.9" y="899.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="909.9" y="910.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.05%)</title><rect x="907.6" y="883.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="910.6" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.05%)</title><rect x="907.6" y="867.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="910.6" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.05%)</title><rect x="907.6" y="851.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="910.6" y="862.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.05%)</title><rect x="907.6" y="835.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="910.6" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.05%)</title><rect x="908.2" y="915.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="911.2" y="926.0"></text>
</g>
<g>
<title>java/util/HashSet.isEmpty (1 samples, 0.05%)</title><rect x="908.2" y="899.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="911.2" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.isEmpty (1 samples, 0.05%)</title><rect x="908.2" y="883.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="911.2" y="894.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (249 samples, 13.61%)</title><rect x="908.9" y="979.0" width="160.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="911.9" y="990.0">one/nio/net/Session...</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (248 samples, 13.55%)</title><rect x="908.9" y="963.0" width="159.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="911.9" y="974.0">one/nio/http/HttpSes..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (180 samples, 9.84%)</title><rect x="908.9" y="947.0" width="116.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="911.9" y="958.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (166 samples, 9.07%)</title><rect x="909.5" y="931.0" width="107.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="912.5" y="942.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (165 samples, 9.02%)</title><rect x="910.2" y="915.0" width="106.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="913.2" y="926.0">one/nio/http/..</text>
</g>
<g>
<title>RequestHandler0_status.handleRequest (162 samples, 8.85%)</title><rect x="911.4" y="899.0" width="104.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="914.4" y="910.0">RequestHandl..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (159 samples, 8.69%)</title><rect x="911.4" y="883.0" width="102.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="914.4" y="894.0">one/nio/http..</text>
</g>
<g>
<title>java/util/LinkedList.pollFirst (1 samples, 0.05%)</title><rect x="912.1" y="867.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="915.1" y="878.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (157 samples, 8.58%)</title><rect x="912.7" y="867.0" width="101.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="915.7" y="878.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (12 samples, 0.66%)</title><rect x="912.7" y="851.0" width="7.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="915.7" y="862.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="912.7" y="835.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="915.7" y="846.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (11 samples, 0.60%)</title><rect x="913.4" y="835.0" width="7.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="916.4" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (5 samples, 0.27%)</title><rect x="913.4" y="819.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="916.4" y="830.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.16%)</title><rect x="914.7" y="803.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="917.7" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.05%)</title><rect x="916.0" y="787.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="919.0" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.33%)</title><rect x="916.6" y="819.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="919.6" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.33%)</title><rect x="916.6" y="803.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="919.6" y="814.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.11%)</title><rect x="919.2" y="787.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="922.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.11%)</title><rect x="919.2" y="771.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="922.2" y="782.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (145 samples, 7.92%)</title><rect x="920.5" y="851.0" width="93.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="923.5" y="862.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/Session.write (144 samples, 7.87%)</title><rect x="921.1" y="835.0" width="92.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="924.1" y="846.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (143 samples, 7.81%)</title><rect x="921.1" y="819.0" width="92.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="924.1" y="830.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (143 samples, 7.81%)</title><rect x="921.1" y="803.0" width="92.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="924.1" y="814.0">one/nio/net..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.11%)</title><rect x="921.1" y="787.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="924.1" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="921.8" y="771.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="924.8" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="921.8" y="755.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="924.8" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="921.8" y="739.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="924.8" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="921.8" y="723.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="924.8" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="921.8" y="707.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="924.8" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.05%)</title><rect x="921.8" y="691.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="924.8" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (141 samples, 7.70%)</title><rect x="922.4" y="787.0" width="90.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="925.4" y="798.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (141 samples, 7.70%)</title><rect x="922.4" y="771.0" width="90.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="925.4" y="782.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (141 samples, 7.70%)</title><rect x="922.4" y="755.0" width="90.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="925.4" y="766.0">sun/nio/ch..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.11%)</title><rect x="922.4" y="739.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="925.4" y="750.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.11%)</title><rect x="922.4" y="723.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="925.4" y="734.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.05%)</title><rect x="923.0" y="707.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="926.0" y="718.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.05%)</title><rect x="923.0" y="691.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="926.0" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkSize (1 samples, 0.05%)</title><rect x="923.0" y="675.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="926.0" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (135 samples, 7.38%)</title><rect x="923.7" y="739.0" width="87.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="926.7" y="750.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (135 samples, 7.38%)</title><rect x="923.7" y="723.0" width="87.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="926.7" y="734.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (135 samples, 7.38%)</title><rect x="923.7" y="707.0" width="87.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="926.7" y="718.0">sun/nio/ch..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.11%)</title><rect x="923.7" y="691.0" width="1.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="926.7" y="702.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.05%)</title><rect x="925.0" y="691.0" width="0.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="928.0" y="702.0"></text>
</g>
<g>
<title>write (132 samples, 7.21%)</title><rect x="925.6" y="691.0" width="85.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="928.6" y="702.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.22%)</title><rect x="1010.7" y="739.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1013.7" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.05%)</title><rect x="1010.7" y="723.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1013.7" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.05%)</title><rect x="1010.7" y="707.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1013.7" y="718.0"></text>
</g>
<g>
<title>unsafe_arraycopy (1 samples, 0.05%)</title><rect x="1010.7" y="691.0" width="0.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1013.7" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (3 samples, 0.16%)</title><rect x="1011.4" y="723.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1014.4" y="734.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.05%)</title><rect x="1012.7" y="707.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1015.7" y="718.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.05%)</title><rect x="1012.7" y="691.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1015.7" y="702.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.05%)</title><rect x="1013.3" y="819.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1016.3" y="830.0"></text>
</g>
<g>
<title>__vsnprintf_chk (1 samples, 0.05%)</title><rect x="1013.3" y="803.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1016.3" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.status (3 samples, 0.16%)</title><rect x="1014.0" y="883.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1017.0" y="894.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (3 samples, 0.16%)</title><rect x="1014.0" y="867.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1017.0" y="878.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1015.3" y="851.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1018.3" y="862.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="1015.3" y="835.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1018.3" y="846.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.05%)</title><rect x="1015.9" y="899.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1018.9" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.05%)</title><rect x="1015.9" y="883.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1018.9" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.05%)</title><rect x="1015.9" y="867.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1018.9" y="878.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.05%)</title><rect x="1015.9" y="851.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1018.9" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.05%)</title><rect x="1015.9" y="835.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1018.9" y="846.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (7 samples, 0.38%)</title><rect x="1016.5" y="931.0" width="4.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1019.5" y="942.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (4 samples, 0.22%)</title><rect x="1016.5" y="915.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1019.5" y="926.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.16%)</title><rect x="1017.2" y="899.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1020.2" y="910.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.16%)</title><rect x="1017.2" y="883.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1020.2" y="894.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.05%)</title><rect x="1017.2" y="867.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1020.2" y="878.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.11%)</title><rect x="1017.8" y="867.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1020.8" y="878.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.05%)</title><rect x="1018.5" y="851.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1021.5" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.05%)</title><rect x="1019.1" y="915.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1022.1" y="926.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.05%)</title><rect x="1019.1" y="899.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1022.1" y="910.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (2 samples, 0.11%)</title><rect x="1019.8" y="915.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1022.8" y="926.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.11%)</title><rect x="1021.1" y="931.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1024.1" y="942.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.11%)</title><rect x="1021.1" y="915.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1024.1" y="926.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.11%)</title><rect x="1021.1" y="899.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1024.1" y="910.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.05%)</title><rect x="1021.7" y="883.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1024.7" y="894.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.05%)</title><rect x="1021.7" y="867.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1024.7" y="878.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.22%)</title><rect x="1022.3" y="931.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1025.3" y="942.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.22%)</title><rect x="1022.3" y="915.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1025.3" y="926.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (68 samples, 3.72%)</title><rect x="1024.9" y="947.0" width="43.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1027.9" y="958.0">one/..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (68 samples, 3.72%)</title><rect x="1024.9" y="931.0" width="43.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1027.9" y="942.0">one/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.16%)</title><rect x="1024.9" y="915.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1027.9" y="926.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.11%)</title><rect x="1025.6" y="899.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1028.6" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.11%)</title><rect x="1025.6" y="883.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1028.6" y="894.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1026.2" y="867.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1029.2" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="1026.2" y="851.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1029.2" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="1026.2" y="835.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1029.2" y="846.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.05%)</title><rect x="1026.2" y="819.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1029.2" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (65 samples, 3.55%)</title><rect x="1026.9" y="915.0" width="41.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1029.9" y="926.0">sun..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.05%)</title><rect x="1027.5" y="899.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1030.5" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.05%)</title><rect x="1027.5" y="883.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1030.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.05%)</title><rect x="1027.5" y="867.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1030.5" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.05%)</title><rect x="1027.5" y="851.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1030.5" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (63 samples, 3.44%)</title><rect x="1028.2" y="899.0" width="40.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1031.2" y="910.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (63 samples, 3.44%)</title><rect x="1028.2" y="883.0" width="40.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1031.2" y="894.0">sun..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (4 samples, 0.22%)</title><rect x="1028.2" y="867.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1031.2" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (4 samples, 0.22%)</title><rect x="1028.2" y="851.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1031.2" y="862.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.16%)</title><rect x="1028.8" y="835.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1031.8" y="846.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory0 (2 samples, 0.11%)</title><rect x="1028.8" y="819.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1031.8" y="830.0"></text>
</g>
<g>
<title>Unsafe_CopyMemory0(JNIEnv_*, _jobject*, _jobject*, long, _jobject*, long, long) (2 samples, 0.11%)</title><rect x="1028.8" y="803.0" width="1.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1031.8" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.05%)</title><rect x="1028.8" y="787.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1031.8" y="798.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.05%)</title><rect x="1028.8" y="771.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1031.8" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.05%)</title><rect x="1029.4" y="787.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1032.4" y="798.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.05%)</title><rect x="1029.4" y="771.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1032.4" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.05%)</title><rect x="1030.1" y="819.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1033.1" y="830.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (1 samples, 0.05%)</title><rect x="1030.1" y="803.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1033.1" y="814.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (1 samples, 0.05%)</title><rect x="1030.1" y="787.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1033.1" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (59 samples, 3.22%)</title><rect x="1030.7" y="867.0" width="38.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1033.7" y="878.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (59 samples, 3.22%)</title><rect x="1030.7" y="851.0" width="38.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1033.7" y="862.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (59 samples, 3.22%)</title><rect x="1030.7" y="835.0" width="38.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1033.7" y="846.0">sun..</text>
</g>
<g>
<title>read (55 samples, 3.01%)</title><rect x="1033.3" y="819.0" width="35.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1036.3" y="830.0">read</text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.05%)</title><rect x="1068.8" y="963.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1071.8" y="974.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.05%)</title><rect x="1068.8" y="947.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1071.8" y="958.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.05%)</title><rect x="1068.8" y="931.0" width="0.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1071.8" y="942.0"></text>
</g>
<g>
<title>_res (1 samples, 0.05%)</title><rect x="1068.8" y="915.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1071.8" y="926.0"></text>
</g>
<g>
<title>[tid=11523] (2 samples, 0.11%)</title><rect x="1069.4" y="1011.0" width="1.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1072.4" y="1022.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.11%)</title><rect x="1069.4" y="995.0" width="1.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1072.4" y="1006.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.11%)</title><rect x="1069.4" y="979.0" width="1.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1072.4" y="990.0"></text>
</g>
<g>
<title>_pthread_body (2 samples, 0.11%)</title><rect x="1069.4" y="963.0" width="1.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1072.4" y="974.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.11%)</title><rect x="1069.4" y="947.0" width="1.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1072.4" y="958.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.11%)</title><rect x="1069.4" y="931.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1072.4" y="942.0"></text>
</g>
<g>
<title>GangWorker::loop() (2 samples, 0.11%)</title><rect x="1069.4" y="915.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1072.4" y="926.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.05%)</title><rect x="1069.4" y="899.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1072.4" y="910.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.05%)</title><rect x="1069.4" y="883.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1072.4" y="894.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.05%)</title><rect x="1069.4" y="867.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1072.4" y="878.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.05%)</title><rect x="1069.4" y="851.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1072.4" y="862.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.05%)</title><rect x="1069.4" y="835.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1072.4" y="846.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (1 samples, 0.05%)</title><rect x="1070.1" y="899.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1073.1" y="910.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (1 samples, 0.05%)</title><rect x="1070.1" y="883.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1073.1" y="894.0"></text>
</g>
<g>
<title>[tid=12803] (6 samples, 0.33%)</title><rect x="1070.7" y="1011.0" width="3.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1073.7" y="1022.0"></text>
</g>
<g>
<title>thread_start (6 samples, 0.33%)</title><rect x="1070.7" y="995.0" width="3.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1073.7" y="1006.0"></text>
</g>
<g>
<title>_pthread_start (6 samples, 0.33%)</title><rect x="1070.7" y="979.0" width="3.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1073.7" y="990.0"></text>
</g>
<g>
<title>_pthread_body (6 samples, 0.33%)</title><rect x="1070.7" y="963.0" width="3.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1073.7" y="974.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (6 samples, 0.33%)</title><rect x="1070.7" y="947.0" width="3.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1073.7" y="958.0"></text>
</g>
<g>
<title>Thread::call_run() (6 samples, 0.33%)</title><rect x="1070.7" y="931.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1073.7" y="942.0"></text>
</g>
<g>
<title>VMThread::run() (6 samples, 0.33%)</title><rect x="1070.7" y="915.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1073.7" y="926.0"></text>
</g>
<g>
<title>VMThread::loop() (6 samples, 0.33%)</title><rect x="1070.7" y="899.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1073.7" y="910.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (5 samples, 0.27%)</title><rect x="1070.7" y="883.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1073.7" y="894.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (5 samples, 0.27%)</title><rect x="1070.7" y="867.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1073.7" y="878.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 0.27%)</title><rect x="1070.7" y="851.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1073.7" y="862.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.27%)</title><rect x="1070.7" y="835.0" width="3.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1073.7" y="846.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.05%)</title><rect x="1073.9" y="883.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1076.9" y="894.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.05%)</title><rect x="1073.9" y="867.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1076.9" y="878.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (1 samples, 0.05%)</title><rect x="1073.9" y="851.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1076.9" y="862.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (1 samples, 0.05%)</title><rect x="1073.9" y="835.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1076.9" y="846.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (1 samples, 0.05%)</title><rect x="1073.9" y="819.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1076.9" y="830.0"></text>
</g>
<g>
<title>[tid=15619] (5 samples, 0.27%)</title><rect x="1074.6" y="1011.0" width="3.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1077.6" y="1022.0"></text>
</g>
<g>
<title>thread_start (5 samples, 0.27%)</title><rect x="1074.6" y="995.0" width="3.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1077.6" y="1006.0"></text>
</g>
<g>
<title>_pthread_start (5 samples, 0.27%)</title><rect x="1074.6" y="979.0" width="3.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1077.6" y="990.0"></text>
</g>
<g>
<title>_pthread_body (5 samples, 0.27%)</title><rect x="1074.6" y="963.0" width="3.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1077.6" y="974.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (5 samples, 0.27%)</title><rect x="1074.6" y="947.0" width="3.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1077.6" y="958.0"></text>
</g>
<g>
<title>Thread::call_run() (5 samples, 0.27%)</title><rect x="1074.6" y="931.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1077.6" y="942.0"></text>
</g>
<g>
<title>JavaThread::run() (5 samples, 0.27%)</title><rect x="1074.6" y="915.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1077.6" y="926.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (5 samples, 0.27%)</title><rect x="1074.6" y="899.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1077.6" y="910.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (5 samples, 0.27%)</title><rect x="1074.6" y="883.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1077.6" y="894.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (5 samples, 0.27%)</title><rect x="1074.6" y="867.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1077.6" y="878.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (5 samples, 0.27%)</title><rect x="1074.6" y="851.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1077.6" y="862.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (5 samples, 0.27%)</title><rect x="1074.6" y="835.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1077.6" y="846.0"></text>
</g>
<g>
<title>Compilation::compile_method() (5 samples, 0.27%)</title><rect x="1074.6" y="819.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1077.6" y="830.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (5 samples, 0.27%)</title><rect x="1074.6" y="803.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1077.6" y="814.0"></text>
</g>
<g>
<title>Compilation::build_hir() (3 samples, 0.16%)</title><rect x="1074.6" y="787.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1077.6" y="798.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (3 samples, 0.16%)</title><rect x="1074.6" y="771.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1077.6" y="782.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (3 samples, 0.16%)</title><rect x="1074.6" y="755.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1077.6" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (3 samples, 0.16%)</title><rect x="1074.6" y="739.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1077.6" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 0.16%)</title><rect x="1074.6" y="723.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1077.6" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 0.16%)</title><rect x="1074.6" y="707.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1077.6" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.05%)</title><rect x="1074.6" y="691.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1077.6" y="702.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.05%)</title><rect x="1074.6" y="675.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1077.6" y="686.0"></text>
</g>
<g>
<title>ciField::will_link(ciMethod*, Bytecodes::Code) (1 samples, 0.05%)</title><rect x="1074.6" y="659.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1077.6" y="670.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.05%)</title><rect x="1074.6" y="643.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1077.6" y="654.0"></text>
</g>
<g>
<title>LinkResolver::check_field_accessability(Klass*, Klass*, Klass*, fieldDescriptor const&amp;, Thread*) (1 samples, 0.05%)</title><rect x="1074.6" y="627.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1077.6" y="638.0"></text>
</g>
<g>
<title>Reflection::verify_member_access(Klass const*, Klass const*, Klass const*, AccessFlags, bool, bool, Thread*) (1 samples, 0.05%)</title><rect x="1074.6" y="611.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1077.6" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.11%)</title><rect x="1075.2" y="691.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1078.2" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.05%)</title><rect x="1075.2" y="675.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1078.2" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.05%)</title><rect x="1075.2" y="659.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1078.2" y="670.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.05%)</title><rect x="1075.2" y="643.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1078.2" y="654.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle const&amp;) (1 samples, 0.05%)</title><rect x="1075.2" y="627.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1078.2" y="638.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.05%)</title><rect x="1075.2" y="611.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1078.2" y="622.0"></text>
</g>
<g>
<title>ciMethodData::load_extra_data() (1 samples, 0.05%)</title><rect x="1075.2" y="595.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1078.2" y="606.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.05%)</title><rect x="1075.2" y="579.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1078.2" y="590.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.05%)</title><rect x="1075.2" y="563.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1078.2" y="574.0"></text>
</g>
<g>
<title>ValueStack::copy(ValueStack::Kind, int) (1 samples, 0.05%)</title><rect x="1075.9" y="675.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1078.9" y="686.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.05%)</title><rect x="1075.9" y="659.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1078.9" y="670.0"></text>
</g>
<g>
<title>GrowableArray&lt;Instruction*&gt;::appendAll(GrowableArray&lt;Instruction*&gt; const*) (1 samples, 0.05%)</title><rect x="1075.9" y="643.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1078.9" y="654.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.05%)</title><rect x="1076.5" y="787.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1079.5" y="798.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.05%)</title><rect x="1076.5" y="771.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1079.5" y="782.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_lir_list(LIR_List*) (1 samples, 0.05%)</title><rect x="1076.5" y="755.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1079.5" y="766.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (1 samples, 0.05%)</title><rect x="1076.5" y="739.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1079.5" y="750.0"></text>
</g>
<g>
<title>LIR_Assembler::record_non_safepoint_debug_info() (1 samples, 0.05%)</title><rect x="1076.5" y="723.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1079.5" y="734.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.05%)</title><rect x="1076.5" y="707.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1079.5" y="718.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.05%)</title><rect x="1076.5" y="691.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1079.5" y="702.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.05%)</title><rect x="1077.2" y="787.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1080.2" y="798.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.05%)</title><rect x="1077.2" y="771.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1080.2" y="782.0"></text>
</g>
<g>
<title>LinearScan::eliminate_spill_moves() (1 samples, 0.05%)</title><rect x="1077.2" y="755.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1080.2" y="766.0"></text>
</g>
<g>
<title>[tid=15875] (167 samples, 9.13%)</title><rect x="1077.8" y="1011.0" width="107.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1080.8" y="1022.0">[tid=15875]</text>
</g>
<g>
<title>thread_start (167 samples, 9.13%)</title><rect x="1077.8" y="995.0" width="107.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1080.8" y="1006.0">thread_start</text>
</g>
<g>
<title>_pthread_start (167 samples, 9.13%)</title><rect x="1077.8" y="979.0" width="107.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1080.8" y="990.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (167 samples, 9.13%)</title><rect x="1077.8" y="963.0" width="107.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1080.8" y="974.0">_pthread_body</text>
</g>
<g>
<title>thread_native_entry(Thread*) (167 samples, 9.13%)</title><rect x="1077.8" y="947.0" width="107.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1080.8" y="958.0">thread_native..</text>
</g>
<g>
<title>Thread::call_run() (167 samples, 9.13%)</title><rect x="1077.8" y="931.0" width="107.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1080.8" y="942.0">Thread::call_..</text>
</g>
<g>
<title>JavaThread::run() (167 samples, 9.13%)</title><rect x="1077.8" y="915.0" width="107.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1080.8" y="926.0">JavaThread::r..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (167 samples, 9.13%)</title><rect x="1077.8" y="899.0" width="107.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1080.8" y="910.0">JavaThread::t..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (167 samples, 9.13%)</title><rect x="1077.8" y="883.0" width="107.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1080.8" y="894.0">CompileBroker..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (167 samples, 9.13%)</title><rect x="1077.8" y="867.0" width="107.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1080.8" y="878.0">CompileBroker..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (167 samples, 9.13%)</title><rect x="1077.8" y="851.0" width="107.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1080.8" y="862.0">C2Compiler::c..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (166 samples, 9.07%)</title><rect x="1077.8" y="835.0" width="107.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1080.8" y="846.0">Compile::Comp..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.05%)</title><rect x="1077.8" y="819.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1080.8" y="830.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.05%)</title><rect x="1077.8" y="803.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1080.8" y="814.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.05%)</title><rect x="1077.8" y="787.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1080.8" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.05%)</title><rect x="1077.8" y="771.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1080.8" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.05%)</title><rect x="1077.8" y="755.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1080.8" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1077.8" y="739.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1080.8" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1077.8" y="723.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1080.8" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.05%)</title><rect x="1077.8" y="707.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1080.8" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.05%)</title><rect x="1077.8" y="691.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1080.8" y="702.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.05%)</title><rect x="1077.8" y="675.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1080.8" y="686.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.05%)</title><rect x="1077.8" y="659.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1080.8" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.05%)</title><rect x="1077.8" y="643.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1080.8" y="654.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.05%)</title><rect x="1077.8" y="627.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1080.8" y="638.0"></text>
</g>
<g>
<title>constantPoolHandle::~constantPoolHandle() (1 samples, 0.05%)</title><rect x="1077.8" y="611.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1080.8" y="622.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (108 samples, 5.90%)</title><rect x="1078.4" y="819.0" width="69.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1081.4" y="830.0">Compile..</text>
</g>
<g>
<title>Compile::Output() (6 samples, 0.33%)</title><rect x="1078.4" y="803.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1081.4" y="814.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (4 samples, 0.22%)</title><rect x="1078.4" y="787.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1081.4" y="798.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (2 samples, 0.11%)</title><rect x="1079.7" y="771.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1082.7" y="782.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.05%)</title><rect x="1080.4" y="755.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1083.4" y="766.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.11%)</title><rect x="1081.0" y="787.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1084.0" y="798.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.11%)</title><rect x="1081.0" y="771.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1084.0" y="782.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (2 samples, 0.11%)</title><rect x="1081.0" y="755.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1084.0" y="766.0"></text>
</g>
<g>
<title>CodeBuffer::initialize_section_size(CodeSection*, int) (1 samples, 0.05%)</title><rect x="1081.0" y="739.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1084.0" y="750.0"></text>
</g>
<g>
<title>storePNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.05%)</title><rect x="1081.7" y="739.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1084.7" y="750.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.05%)</title><rect x="1082.3" y="803.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1085.3" y="814.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.05%)</title><rect x="1082.3" y="787.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1085.3" y="798.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.05%)</title><rect x="1082.3" y="771.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1085.3" y="782.0"></text>
</g>
<g>
<title>DebugInformationRecorder::serialize_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.05%)</title><rect x="1082.3" y="755.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1085.3" y="766.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.05%)</title><rect x="1082.3" y="739.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1085.3" y="750.0"></text>
</g>
<g>
<title>DIR_Chunk* GrowableArray&lt;DIR_Chunk*&gt;::insert_sorted&lt;&amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;) (1 samples, 0.05%)</title><rect x="1082.3" y="723.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1085.3" y="734.0"></text>
</g>
<g>
<title>GrowableArray&lt;DIR_Chunk*&gt;::insert_before(int, DIR_Chunk* const&amp;) (1 samples, 0.05%)</title><rect x="1082.3" y="707.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1085.3" y="718.0"></text>
</g>
<g>
<title>Matcher::match() (7 samples, 0.38%)</title><rect x="1083.0" y="803.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1086.0" y="814.0"></text>
</g>
<g>
<title>LoadNNode::Opcode() const (1 samples, 0.05%)</title><rect x="1083.0" y="787.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1086.0" y="798.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.11%)</title><rect x="1083.6" y="787.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1086.6" y="798.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.22%)</title><rect x="1084.9" y="787.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1087.9" y="798.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.16%)</title><rect x="1085.5" y="771.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1088.5" y="782.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.05%)</title><rect x="1085.5" y="755.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1088.5" y="766.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.05%)</title><rect x="1085.5" y="739.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1088.5" y="750.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.11%)</title><rect x="1086.2" y="755.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1089.2" y="766.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.05%)</title><rect x="1086.2" y="739.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1089.2" y="750.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.05%)</title><rect x="1086.2" y="723.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1089.2" y="734.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.05%)</title><rect x="1086.2" y="707.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1089.2" y="718.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.05%)</title><rect x="1086.2" y="691.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1089.2" y="702.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.05%)</title><rect x="1086.2" y="675.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1089.2" y="686.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.05%)</title><rect x="1086.2" y="659.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1089.2" y="670.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.05%)</title><rect x="1086.2" y="643.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1089.2" y="654.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.05%)</title><rect x="1086.8" y="739.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1089.8" y="750.0"></text>
</g>
<g>
<title>Node::is_top() const (1 samples, 0.05%)</title><rect x="1086.8" y="723.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1089.8" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (9 samples, 0.49%)</title><rect x="1087.5" y="803.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1090.5" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (9 samples, 0.49%)</title><rect x="1087.5" y="787.0" width="5.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1090.5" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.05%)</title><rect x="1087.5" y="771.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1090.5" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.05%)</title><rect x="1088.1" y="771.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1091.1" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.05%)</title><rect x="1088.8" y="771.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1091.8" y="782.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.05%)</title><rect x="1088.8" y="755.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1091.8" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.05%)</title><rect x="1089.4" y="771.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1092.4" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.05%)</title><rect x="1090.1" y="771.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1093.1" y="782.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.05%)</title><rect x="1090.1" y="755.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1093.1" y="766.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1090.1" y="739.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1093.1" y="750.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.22%)</title><rect x="1090.7" y="771.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1093.7" y="782.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.16%)</title><rect x="1090.7" y="755.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1093.7" y="766.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.05%)</title><rect x="1090.7" y="739.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1093.7" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.05%)</title><rect x="1091.3" y="739.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1094.3" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.05%)</title><rect x="1092.0" y="739.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1095.0" y="750.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (1 samples, 0.05%)</title><rect x="1092.6" y="755.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1095.6" y="766.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.05%)</title><rect x="1092.6" y="739.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1095.6" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (85 samples, 4.64%)</title><rect x="1093.3" y="803.0" width="54.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1096.3" y="814.0">Phase..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (4 samples, 0.22%)</title><rect x="1093.3" y="787.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1096.3" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (8 samples, 0.44%)</title><rect x="1095.9" y="787.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1098.9" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.05%)</title><rect x="1095.9" y="771.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1098.9" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.05%)</title><rect x="1096.5" y="771.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1099.5" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (5 samples, 0.27%)</title><rect x="1097.1" y="771.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1100.1" y="782.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.11%)</title><rect x="1097.1" y="755.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1100.1" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.11%)</title><rect x="1098.4" y="755.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1101.4" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.05%)</title><rect x="1099.7" y="755.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1102.7" y="766.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.05%)</title><rect x="1100.4" y="771.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1103.4" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (6 samples, 0.33%)</title><rect x="1101.0" y="787.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1104.0" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.05%)</title><rect x="1102.3" y="771.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1105.3" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 0.16%)</title><rect x="1103.0" y="771.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1106.0" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.05%)</title><rect x="1104.2" y="755.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1107.2" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (12 samples, 0.66%)</title><rect x="1104.9" y="787.0" width="7.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1107.9" y="798.0"></text>
</g>
<g>
<title>GrowableArray&lt;unsigned int&gt;::GrowableArray(Arena*, int, int, unsigned int const&amp;) (1 samples, 0.05%)</title><rect x="1110.7" y="771.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1113.7" y="782.0"></text>
</g>
<g>
<title>MachNode::two_adr() const (1 samples, 0.05%)</title><rect x="1111.3" y="771.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1114.3" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.05%)</title><rect x="1112.0" y="771.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1115.0" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(MachSpillCopyNode::SpillType, Node*, Node*, unsigned int) (1 samples, 0.05%)</title><rect x="1112.0" y="755.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1115.0" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (19 samples, 1.04%)</title><rect x="1112.6" y="787.0" width="12.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1115.6" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.05%)</title><rect x="1112.6" y="771.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1115.6" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.05%)</title><rect x="1113.3" y="771.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1116.3" y="782.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.05%)</title><rect x="1113.3" y="755.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1116.3" y="766.0"></text>
</g>
<g>
<title>MachSpillCopyNode::ideal_reg() const (1 samples, 0.05%)</title><rect x="1113.3" y="739.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.3" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (3 samples, 0.16%)</title><rect x="1113.9" y="771.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.9" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.05%)</title><rect x="1113.9" y="755.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1116.9" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.11%)</title><rect x="1114.6" y="755.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1117.6" y="766.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (2 samples, 0.11%)</title><rect x="1114.6" y="739.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1117.6" y="750.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (2 samples, 0.11%)</title><rect x="1114.6" y="723.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1117.6" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (11 samples, 0.60%)</title><rect x="1115.8" y="771.0" width="7.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1118.8" y="782.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.11%)</title><rect x="1116.5" y="755.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1119.5" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.16%)</title><rect x="1117.8" y="755.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1120.8" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.11%)</title><rect x="1119.7" y="755.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1122.7" y="766.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (3 samples, 0.16%)</title><rect x="1121.0" y="755.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1124.0" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (2 samples, 0.11%)</title><rect x="1122.9" y="771.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1125.9" y="782.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.05%)</title><rect x="1122.9" y="755.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1125.9" y="766.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.05%)</title><rect x="1123.6" y="755.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1126.6" y="766.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.05%)</title><rect x="1124.2" y="771.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1127.2" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.05%)</title><rect x="1124.9" y="787.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1127.9" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.05%)</title><rect x="1124.9" y="771.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1127.9" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.05%)</title><rect x="1124.9" y="755.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1127.9" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::de_ssa() (2 samples, 0.11%)</title><rect x="1125.5" y="787.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1128.5" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (8 samples, 0.44%)</title><rect x="1126.8" y="787.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1129.8" y="798.0"></text>
</g>
<g>
<title>RegMask::AND(RegMask const&amp;) (3 samples, 0.16%)</title><rect x="1127.5" y="771.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.5" y="782.0"></text>
</g>
<g>
<title>RegMask::Size() const (3 samples, 0.16%)</title><rect x="1129.4" y="771.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.4" y="782.0"></text>
</g>
<g>
<title>RegMask::is_bound(unsigned int) const (1 samples, 0.05%)</title><rect x="1131.3" y="771.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1134.3" y="782.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.05%)</title><rect x="1131.3" y="755.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1134.3" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.05%)</title><rect x="1132.0" y="787.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.0" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (6 samples, 0.33%)</title><rect x="1132.6" y="787.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.6" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.16%)</title><rect x="1133.9" y="771.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1136.9" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.05%)</title><rect x="1135.2" y="755.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.2" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::yank(Node*, Block*, Node_List*, Node_List*) (1 samples, 0.05%)</title><rect x="1135.2" y="739.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.2" y="750.0"></text>
</g>
<g>
<title>RegMask::find_first_elem() const (1 samples, 0.05%)</title><rect x="1135.8" y="771.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.8" y="782.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.05%)</title><rect x="1135.8" y="755.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1138.8" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.05%)</title><rect x="1136.5" y="787.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1139.5" y="798.0"></text>
</g>
<g>
<title>IndexSet::clear() (1 samples, 0.05%)</title><rect x="1136.5" y="771.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1139.5" y="782.0"></text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.05%)</title><rect x="1136.5" y="755.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1139.5" y="766.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.05%)</title><rect x="1137.1" y="787.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.1" y="798.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.05%)</title><rect x="1137.1" y="771.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1140.1" y="782.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.05%)</title><rect x="1137.1" y="755.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.1" y="766.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.05%)</title><rect x="1137.1" y="739.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1140.1" y="750.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.05%)</title><rect x="1137.1" y="723.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1140.1" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 0.16%)</title><rect x="1137.8" y="787.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1140.8" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (3 samples, 0.16%)</title><rect x="1137.8" y="771.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1140.8" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.05%)</title><rect x="1138.4" y="755.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1141.4" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.05%)</title><rect x="1139.1" y="755.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.1" y="766.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 0.16%)</title><rect x="1139.7" y="787.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.7" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.05%)</title><rect x="1139.7" y="771.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.7" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.05%)</title><rect x="1140.3" y="771.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1143.3" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.05%)</title><rect x="1141.0" y="771.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.0" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (4 samples, 0.22%)</title><rect x="1141.6" y="787.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.6" y="798.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1141.6" y="771.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1144.6" y="782.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1141.6" y="755.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1144.6" y="766.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.05%)</title><rect x="1141.6" y="739.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1144.6" y="750.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.05%)</title><rect x="1141.6" y="723.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1144.6" y="734.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.05%)</title><rect x="1142.3" y="771.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1145.3" y="782.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.11%)</title><rect x="1142.9" y="771.0" width="1.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1145.9" y="782.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 0.33%)</title><rect x="1144.2" y="787.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.2" y="798.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.05%)</title><rect x="1146.2" y="771.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1149.2" y="782.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.11%)</title><rect x="1146.8" y="771.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.8" y="782.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.05%)</title><rect x="1146.8" y="755.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.8" y="766.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.05%)</title><rect x="1147.4" y="755.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.4" y="766.0"></text>
</g>
<g>
<title>Compile::Optimize() (29 samples, 1.58%)</title><rect x="1148.1" y="819.0" width="18.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1151.1" y="830.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.05%)</title><rect x="1148.1" y="803.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1151.1" y="814.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.05%)</title><rect x="1148.1" y="787.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.1" y="798.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.05%)</title><rect x="1148.1" y="771.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1151.1" y="782.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.05%)</title><rect x="1148.1" y="755.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1151.1" y="766.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1148.1" y="739.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1151.1" y="750.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.05%)</title><rect x="1148.1" y="723.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1151.1" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.05%)</title><rect x="1148.7" y="803.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.7" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.05%)</title><rect x="1148.7" y="787.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1151.7" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.05%)</title><rect x="1148.7" y="771.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.7" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_non_escaped_objects(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;) (1 samples, 0.05%)</title><rect x="1148.7" y="755.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.7" y="766.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.05%)</title><rect x="1149.4" y="803.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.4" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (20 samples, 1.09%)</title><rect x="1150.0" y="803.0" width="12.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.0" y="814.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="1150.0" y="787.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1153.0" y="798.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="1150.0" y="771.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.0" y="782.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1150.7" y="787.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.7" y="798.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1150.7" y="771.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.7" y="782.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1150.7" y="755.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.7" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.05%)</title><rect x="1150.7" y="739.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.7" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_post_loop(IdealLoopTree*, Node_List&amp;, CountedLoopNode*, CountedLoopEndNode*, Node*, Node*, CountedLoopNode*&amp;) (1 samples, 0.05%)</title><rect x="1150.7" y="723.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.7" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, PhaseIdealLoop::CloneLoopMode, Node*) (1 samples, 0.05%)</title><rect x="1150.7" y="707.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.7" y="718.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.05%)</title><rect x="1150.7" y="691.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.7" y="702.0"></text>
</g>
<g>
<title>Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1150.7" y="675.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.7" y="686.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.05%)</title><rect x="1150.7" y="659.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.7" y="670.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (3 samples, 0.16%)</title><rect x="1151.3" y="787.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.3" y="798.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.11%)</title><rect x="1151.3" y="771.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.3" y="782.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.11%)</title><rect x="1151.3" y="755.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.3" y="766.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.11%)</title><rect x="1151.3" y="739.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.3" y="750.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.11%)</title><rect x="1151.3" y="723.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.3" y="734.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.11%)</title><rect x="1151.3" y="707.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.3" y="718.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.11%)</title><rect x="1151.3" y="691.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.3" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (2 samples, 0.11%)</title><rect x="1151.3" y="675.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.3" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_follow_branches(Node*, IdealLoopTree*, float, PathFrequency&amp;, Node_Stack&amp;, VectorSet&amp;, Node_List&amp;) (2 samples, 0.11%)</title><rect x="1151.3" y="659.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.3" y="670.0"></text>
</g>
<g>
<title>PathFrequency::to(Node*) (2 samples, 0.11%)</title><rect x="1151.3" y="643.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.3" y="654.0"></text>
</g>
<g>
<title>GrowableArray&lt;float&gt;::at_grow(int, float const&amp;) (1 samples, 0.05%)</title><rect x="1151.3" y="627.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.3" y="638.0"></text>
</g>
<g>
<title>GrowableArray&lt;float&gt;::grow(int) (1 samples, 0.05%)</title><rect x="1151.3" y="611.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.3" y="622.0"></text>
</g>
<g>
<title>Node::unique_ctrl_out() const (1 samples, 0.05%)</title><rect x="1152.0" y="627.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.0" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.05%)</title><rect x="1152.6" y="771.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.6" y="782.0"></text>
</g>
<g>
<title>LoopNode::is_valid_counted_loop() const (1 samples, 0.05%)</title><rect x="1152.6" y="755.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.6" y="766.0"></text>
</g>
<g>
<title>CountedLoopEndNode::loopnode() const (1 samples, 0.05%)</title><rect x="1152.6" y="739.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.6" y="750.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.05%)</title><rect x="1153.2" y="787.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.2" y="798.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="1153.2" y="771.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1156.2" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.05%)</title><rect x="1153.9" y="787.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.9" y="798.0"></text>
</g>
<g>
<title>NTarjan::setdepth(unsigned int, unsigned int*) (1 samples, 0.05%)</title><rect x="1153.9" y="771.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.9" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 0.38%)</title><rect x="1154.5" y="787.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.5" y="798.0"></text>
</g>
<g>
<title>EncodePNode::Opcode() const (1 samples, 0.05%)</title><rect x="1155.8" y="771.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.8" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (4 samples, 0.22%)</title><rect x="1156.5" y="771.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.5" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.11%)</title><rect x="1157.1" y="755.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.1" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.11%)</title><rect x="1157.1" y="739.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.1" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (2 samples, 0.11%)</title><rect x="1157.1" y="723.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.1" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.11%)</title><rect x="1157.1" y="707.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.1" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (2 samples, 0.11%)</title><rect x="1157.1" y="691.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.1" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (2 samples, 0.11%)</title><rect x="1157.1" y="675.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.1" y="686.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (2 samples, 0.11%)</title><rect x="1157.1" y="659.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.1" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.05%)</title><rect x="1158.4" y="755.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.4" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.16%)</title><rect x="1159.0" y="787.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.0" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 0.11%)</title><rect x="1161.0" y="787.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.0" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.05%)</title><rect x="1161.6" y="771.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.6" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.05%)</title><rect x="1161.6" y="755.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.6" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.05%)</title><rect x="1162.3" y="787.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.3" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.05%)</title><rect x="1162.3" y="771.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.3" y="782.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1162.3" y="755.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.3" y="766.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1162.3" y="739.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.3" y="750.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1162.3" y="723.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.3" y="734.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.05%)</title><rect x="1162.3" y="707.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.3" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 0.33%)</title><rect x="1162.9" y="803.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.9" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 0.27%)</title><rect x="1162.9" y="787.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.9" y="798.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1162.9" y="771.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.9" y="782.0"></text>
</g>
<g>
<title>IfNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1162.9" y="755.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.9" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::register_new_node_with_optimizer(Node*, Node*) (1 samples, 0.05%)</title><rect x="1162.9" y="739.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.9" y="750.0"></text>
</g>
<g>
<title>PhaseTransform::set_type_bottom(Node const*) (1 samples, 0.05%)</title><rect x="1162.9" y="723.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.9" y="734.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1163.6" y="771.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.6" y="782.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1163.6" y="755.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.6" y="766.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.05%)</title><rect x="1163.6" y="739.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.6" y="750.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.05%)</title><rect x="1163.6" y="723.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.6" y="734.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.05%)</title><rect x="1164.2" y="771.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.2" y="782.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.05%)</title><rect x="1164.2" y="755.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.2" y="766.0"></text>
</g>
<g>
<title>NodeHash::hash_insert(Node*) (1 samples, 0.05%)</title><rect x="1164.2" y="739.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.2" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.05%)</title><rect x="1164.9" y="771.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.9" y="782.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.05%)</title><rect x="1164.9" y="755.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1167.9" y="766.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1165.5" y="771.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.5" y="782.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.05%)</title><rect x="1165.5" y="755.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.5" y="766.0"></text>
</g>
<g>
<title>StoreNode::Value(PhaseGVN*) const (1 samples, 0.05%)</title><rect x="1166.1" y="787.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.1" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (25 samples, 1.37%)</title><rect x="1166.8" y="819.0" width="16.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.8" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (25 samples, 1.37%)</title><rect x="1166.8" y="803.0" width="16.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (25 samples, 1.37%)</title><rect x="1166.8" y="787.0" width="16.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (25 samples, 1.37%)</title><rect x="1166.8" y="771.0" width="16.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (25 samples, 1.37%)</title><rect x="1166.8" y="755.0" width="16.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.8" y="766.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.05%)</title><rect x="1166.8" y="739.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.8" y="750.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.05%)</title><rect x="1166.8" y="723.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.8" y="734.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.05%)</title><rect x="1166.8" y="707.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.8" y="718.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.05%)</title><rect x="1166.8" y="691.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.8" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.05%)</title><rect x="1166.8" y="675.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.8" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.05%)</title><rect x="1166.8" y="659.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.8" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1166.8" y="643.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.8" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1166.8" y="627.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.8" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.05%)</title><rect x="1166.8" y="611.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.8" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.05%)</title><rect x="1166.8" y="595.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.8" y="606.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.05%)</title><rect x="1166.8" y="579.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.8" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.05%)</title><rect x="1166.8" y="563.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.8" y="574.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.05%)</title><rect x="1166.8" y="547.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.8" y="558.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.05%)</title><rect x="1166.8" y="531.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.8" y="542.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.05%)</title><rect x="1166.8" y="515.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.8" y="526.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol const*) (1 samples, 0.05%)</title><rect x="1166.8" y="499.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.8" y="510.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.05%)</title><rect x="1167.4" y="739.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.4" y="750.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.05%)</title><rect x="1167.4" y="723.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.4" y="734.0"></text>
</g>
<g>
<title>ciMethod::raw_liveness_at_bci(int) (1 samples, 0.05%)</title><rect x="1167.4" y="707.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.4" y="718.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.05%)</title><rect x="1167.4" y="691.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.4" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (22 samples, 1.20%)</title><rect x="1168.1" y="739.0" width="14.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.1" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (22 samples, 1.20%)</title><rect x="1168.1" y="723.0" width="14.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (22 samples, 1.20%)</title><rect x="1168.1" y="707.0" width="14.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (22 samples, 1.20%)</title><rect x="1168.1" y="691.0" width="14.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (21 samples, 1.15%)</title><rect x="1168.1" y="675.0" width="13.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.1" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (21 samples, 1.15%)</title><rect x="1168.1" y="659.0" width="13.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.1" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (21 samples, 1.15%)</title><rect x="1168.1" y="643.0" width="13.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (21 samples, 1.15%)</title><rect x="1168.1" y="627.0" width="13.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (21 samples, 1.15%)</title><rect x="1168.1" y="611.0" width="13.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (20 samples, 1.09%)</title><rect x="1168.1" y="595.0" width="12.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.1" y="606.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.05%)</title><rect x="1168.1" y="579.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.1" y="590.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.05%)</title><rect x="1168.1" y="563.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.1" y="574.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.05%)</title><rect x="1168.1" y="547.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.1" y="558.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.05%)</title><rect x="1168.1" y="531.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.1" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.05%)</title><rect x="1168.1" y="515.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.1" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.05%)</title><rect x="1168.1" y="499.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1171.1" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1168.1" y="483.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.1" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1168.1" y="467.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.1" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.05%)</title><rect x="1168.1" y="451.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.1" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.05%)</title><rect x="1168.1" y="435.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.1" y="446.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.05%)</title><rect x="1168.1" y="419.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.1" y="430.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1168.1" y="403.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.1" y="414.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="1168.1" y="387.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.1" y="398.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="1168.1" y="371.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.1" y="382.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1168.1" y="355.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.1" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (19 samples, 1.04%)</title><rect x="1168.7" y="579.0" width="12.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.7" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (19 samples, 1.04%)</title><rect x="1168.7" y="563.0" width="12.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (19 samples, 1.04%)</title><rect x="1168.7" y="547.0" width="12.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (19 samples, 1.04%)</title><rect x="1168.7" y="531.0" width="12.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (19 samples, 1.04%)</title><rect x="1168.7" y="515.0" width="12.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.7" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (17 samples, 0.93%)</title><rect x="1168.7" y="499.0" width="11.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.7" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (17 samples, 0.93%)</title><rect x="1168.7" y="483.0" width="11.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.7" y="494.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.05%)</title><rect x="1168.7" y="467.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.7" y="478.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.05%)</title><rect x="1168.7" y="451.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.7" y="462.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.05%)</title><rect x="1168.7" y="435.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.7" y="446.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.05%)</title><rect x="1168.7" y="419.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.7" y="430.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.05%)</title><rect x="1168.7" y="403.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.7" y="414.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1168.7" y="387.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.7" y="398.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1168.7" y="371.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (16 samples, 0.87%)</title><rect x="1169.4" y="467.0" width="10.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (16 samples, 0.87%)</title><rect x="1169.4" y="451.0" width="10.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (15 samples, 0.82%)</title><rect x="1169.4" y="435.0" width="9.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.4" y="446.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (3 samples, 0.16%)</title><rect x="1169.4" y="419.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.4" y="430.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.05%)</title><rect x="1169.4" y="403.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.4" y="414.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.05%)</title><rect x="1169.4" y="387.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.4" y="398.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.05%)</title><rect x="1169.4" y="371.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.4" y="382.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.05%)</title><rect x="1169.4" y="355.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.4" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.05%)</title><rect x="1169.4" y="339.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.4" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.05%)</title><rect x="1169.4" y="323.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.4" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1169.4" y="307.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.4" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1169.4" y="291.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.4" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.05%)</title><rect x="1169.4" y="275.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.4" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.05%)</title><rect x="1169.4" y="259.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.4" y="270.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.05%)</title><rect x="1169.4" y="243.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.4" y="254.0"></text>
</g>
<g>
<title>ciField::will_link(ciMethod*, Bytecodes::Code) (1 samples, 0.05%)</title><rect x="1169.4" y="227.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.4" y="238.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.05%)</title><rect x="1169.4" y="211.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.4" y="222.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.11%)</title><rect x="1170.0" y="403.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.0" y="414.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (2 samples, 0.11%)</title><rect x="1170.0" y="387.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.0" y="398.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.11%)</title><rect x="1170.0" y="371.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.0" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.11%)</title><rect x="1170.0" y="355.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.0" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.11%)</title><rect x="1170.0" y="339.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.0" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.11%)</title><rect x="1170.0" y="323.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.0" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.11%)</title><rect x="1170.0" y="307.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.0" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (2 samples, 0.11%)</title><rect x="1170.0" y="291.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.0" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (2 samples, 0.11%)</title><rect x="1170.0" y="275.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.0" y="286.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (2 samples, 0.11%)</title><rect x="1170.0" y="259.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.0" y="270.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (2 samples, 0.11%)</title><rect x="1170.0" y="243.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.0" y="254.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (2 samples, 0.11%)</title><rect x="1170.0" y="227.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.0" y="238.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (2 samples, 0.11%)</title><rect x="1170.0" y="211.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.0" y="222.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (2 samples, 0.11%)</title><rect x="1170.0" y="195.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.0" y="206.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.05%)</title><rect x="1170.7" y="179.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.7" y="190.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.05%)</title><rect x="1170.7" y="163.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.7" y="174.0"></text>
</g>
<g>
<title>ciSymbol::ciSymbol(Symbol*, vmSymbols::SID) (1 samples, 0.05%)</title><rect x="1170.7" y="147.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.7" y="158.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1171.3" y="419.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.3" y="430.0"></text>
</g>
<g>
<title>GraphKit::set_edges_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.05%)</title><rect x="1171.3" y="403.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.3" y="414.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.05%)</title><rect x="1171.3" y="387.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.3" y="398.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1171.3" y="371.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.3" y="382.0"></text>
</g>
<g>
<title>ciEnv::compiler_data() (1 samples, 0.05%)</title><rect x="1171.3" y="355.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.3" y="366.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1171.9" y="419.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.9" y="430.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_access(bool, BasicType, LibraryCallKit::AccessKind, bool) (1 samples, 0.05%)</title><rect x="1171.9" y="403.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.9" y="414.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (1 samples, 0.05%)</title><rect x="1171.9" y="387.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.9" y="398.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.05%)</title><rect x="1171.9" y="371.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.9" y="382.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.05%)</title><rect x="1171.9" y="355.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.9" y="366.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.05%)</title><rect x="1171.9" y="339.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.9" y="350.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.05%)</title><rect x="1171.9" y="323.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.9" y="334.0"></text>
</g>
<g>
<title>IfNode::IfNode(Node*, Node*, float, float) (1 samples, 0.05%)</title><rect x="1171.9" y="307.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.9" y="318.0"></text>
</g>
<g>
<title>Node::init_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1171.9" y="291.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.9" y="302.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.05%)</title><rect x="1171.9" y="275.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.9" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.38%)</title><rect x="1172.6" y="419.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.6" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.38%)</title><rect x="1172.6" y="403.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.6" y="414.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.05%)</title><rect x="1172.6" y="387.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.6" y="398.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.05%)</title><rect x="1172.6" y="371.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.6" y="382.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.05%)</title><rect x="1172.6" y="355.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.6" y="366.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.05%)</title><rect x="1172.6" y="339.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.33%)</title><rect x="1173.2" y="387.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.27%)</title><rect x="1173.2" y="371.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.27%)</title><rect x="1173.2" y="355.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.2" y="366.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1173.2" y="339.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.2" y="350.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_load_store(BasicType, LibraryCallKit::LoadStoreKind, LibraryCallKit::AccessKind) (1 samples, 0.05%)</title><rect x="1173.2" y="323.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.2" y="334.0"></text>
</g>
<g>
<title>GraphKit::access_atomic_cmpxchg_bool_at(Node*, Node*, Node*, TypePtr const*, int, Node*, Node*, Type const*, BasicType, unsigned long long) (1 samples, 0.05%)</title><rect x="1173.2" y="307.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.2" y="318.0"></text>
</g>
<g>
<title>BarrierSetC2::atomic_cmpxchg_bool_at(C2AtomicAccess&amp;, Node*, Node*, Type const*) const (1 samples, 0.05%)</title><rect x="1173.2" y="291.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.2" y="302.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::atomic_cmpxchg_bool_at_resolved(C2AtomicAccess&amp;, Node*, Node*, Type const*) const (1 samples, 0.05%)</title><rect x="1173.2" y="275.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.2" y="286.0"></text>
</g>
<g>
<title>IdealKit::AddP(Node*, Node*, Node*) (1 samples, 0.05%)</title><rect x="1173.2" y="259.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.2" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.22%)</title><rect x="1173.9" y="339.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.9" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.22%)</title><rect x="1173.9" y="323.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.22%)</title><rect x="1173.9" y="307.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.22%)</title><rect x="1173.9" y="291.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.16%)</title><rect x="1173.9" y="275.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.9" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1173.9" y="259.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.9" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1173.9" y="243.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1173.9" y="227.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1173.9" y="211.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1173.9" y="195.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.9" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1173.9" y="179.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.9" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1173.9" y="163.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.9" y="174.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.05%)</title><rect x="1173.9" y="147.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.9" y="158.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.05%)</title><rect x="1173.9" y="131.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.9" y="142.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.05%)</title><rect x="1173.9" y="115.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.9" y="126.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.05%)</title><rect x="1173.9" y="99.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.9" y="110.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.05%)</title><rect x="1173.9" y="83.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.9" y="94.0"></text>
</g>
<g>
<title>MergeMemNode::grow_to_match(MergeMemNode const*) (1 samples, 0.05%)</title><rect x="1173.9" y="67.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.9" y="78.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.05%)</title><rect x="1173.9" y="51.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.9" y="62.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="1173.9" y="35.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1176.9" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.11%)</title><rect x="1174.5" y="259.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.5" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.11%)</title><rect x="1174.5" y="243.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.5" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.11%)</title><rect x="1174.5" y="227.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.5" y="238.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.05%)</title><rect x="1174.5" y="211.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.5" y="222.0"></text>
</g>
<g>
<title>PhaseTransform::set_type_bottom(Node const*) (1 samples, 0.05%)</title><rect x="1174.5" y="195.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.5" y="206.0"></text>
</g>
<g>
<title>Type_Array::grow(unsigned int) (1 samples, 0.05%)</title><rect x="1174.5" y="179.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.5" y="190.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1174.5" y="163.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.5" y="174.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="1174.5" y="147.0" width="0.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1177.5" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1175.2" y="211.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1175.2" y="195.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1175.2" y="179.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.2" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1175.2" y="163.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.2" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1175.2" y="147.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.2" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1175.2" y="131.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.2" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1175.2" y="115.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.2" y="126.0"></text>
</g>
<g>
<title>GraphKit::shared_lock(Node*) (1 samples, 0.05%)</title><rect x="1175.2" y="99.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.2" y="110.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="1175.2" y="83.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1178.2" y="94.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.05%)</title><rect x="1175.8" y="275.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.05%)</title><rect x="1175.8" y="259.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.8" y="270.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (1 samples, 0.05%)</title><rect x="1175.8" y="243.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.8" y="254.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.05%)</title><rect x="1175.8" y="227.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.8" y="238.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.05%)</title><rect x="1175.8" y="211.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.8" y="222.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.05%)</title><rect x="1175.8" y="195.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.8" y="206.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.05%)</title><rect x="1175.8" y="179.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.8" y="190.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseGVN*) (1 samples, 0.05%)</title><rect x="1175.8" y="163.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.8" y="174.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.05%)</title><rect x="1175.8" y="147.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.8" y="158.0"></text>
</g>
<g>
<title>Type::remove_speculative() const (1 samples, 0.05%)</title><rect x="1175.8" y="131.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.8" y="142.0"></text>
</g>
<g>
<title>ciBytecodeStream::reset_to_bci(int) (1 samples, 0.05%)</title><rect x="1176.5" y="371.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.5" y="382.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.16%)</title><rect x="1177.1" y="419.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.1" y="430.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (2 samples, 0.11%)</title><rect x="1177.1" y="403.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.1" y="414.0"></text>
</g>
<g>
<title>CallGenerator::is_inlined_method_handle_intrinsic(JVMState*, ciMethod*) (1 samples, 0.05%)</title><rect x="1177.1" y="387.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.1" y="398.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.05%)</title><rect x="1177.1" y="371.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.1" y="382.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.05%)</title><rect x="1177.1" y="355.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.1" y="366.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1177.1" y="339.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.1" y="350.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.05%)</title><rect x="1177.1" y="323.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.1" y="334.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (1 samples, 0.05%)</title><rect x="1177.1" y="307.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.1" y="318.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (1 samples, 0.05%)</title><rect x="1177.1" y="291.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.1" y="302.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.05%)</title><rect x="1177.1" y="275.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.1" y="286.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.05%)</title><rect x="1177.1" y="259.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.1" y="270.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool) (1 samples, 0.05%)</title><rect x="1177.7" y="387.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.7" y="398.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.05%)</title><rect x="1177.7" y="371.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.7" y="382.0"></text>
</g>
<g>
<title>Node::set_prec(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1177.7" y="355.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.7" y="366.0"></text>
</g>
<g>
<title>UncommonTrapCallGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1178.4" y="403.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.4" y="414.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.05%)</title><rect x="1178.4" y="387.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.4" y="398.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.05%)</title><rect x="1178.4" y="371.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.4" y="382.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.05%)</title><rect x="1178.4" y="355.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.4" y="366.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1178.4" y="339.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.4" y="350.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.05%)</title><rect x="1178.4" y="323.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.4" y="334.0"></text>
</g>
<g>
<title>Node::is_top() const (1 samples, 0.05%)</title><rect x="1178.4" y="307.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.05%)</title><rect x="1179.0" y="435.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.0" y="446.0"></text>
</g>
<g>
<title>Parse::maybe_add_predicate_after_if(Parse::Block*) (1 samples, 0.05%)</title><rect x="1179.0" y="419.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.0" y="430.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.05%)</title><rect x="1179.0" y="403.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.0" y="414.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.05%)</title><rect x="1179.0" y="387.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.0" y="398.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.05%)</title><rect x="1179.0" y="371.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.0" y="382.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.05%)</title><rect x="1179.0" y="355.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.0" y="366.0"></text>
</g>
<g>
<title>GraphKit::set_all_memory(Node*) (1 samples, 0.05%)</title><rect x="1179.0" y="339.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.0" y="350.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.05%)</title><rect x="1179.0" y="323.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.0" y="334.0"></text>
</g>
<g>
<title>MergeMemNode::set_base_memory(Node*) (1 samples, 0.05%)</title><rect x="1179.0" y="307.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.0" y="318.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1179.0" y="291.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.0" y="302.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.05%)</title><rect x="1179.0" y="275.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.0" y="286.0"></text>
</g>
<g>
<title>Node::is_top() const (1 samples, 0.05%)</title><rect x="1179.0" y="259.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.0" y="270.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1179.7" y="499.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.7" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1179.7" y="483.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.7" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1179.7" y="467.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1179.7" y="451.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1179.7" y="435.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1179.7" y="419.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.7" y="430.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.05%)</title><rect x="1179.7" y="403.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.7" y="414.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.05%)</title><rect x="1179.7" y="387.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.7" y="398.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.05%)</title><rect x="1179.7" y="371.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.7" y="382.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.05%)</title><rect x="1179.7" y="355.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.7" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.05%)</title><rect x="1179.7" y="339.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.7" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.05%)</title><rect x="1179.7" y="323.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.7" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1179.7" y="307.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.7" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1179.7" y="291.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.7" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.05%)</title><rect x="1179.7" y="275.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.7" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.05%)</title><rect x="1179.7" y="259.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.7" y="270.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.05%)</title><rect x="1179.7" y="243.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.7" y="254.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.05%)</title><rect x="1179.7" y="227.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.7" y="238.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.05%)</title><rect x="1179.7" y="211.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.7" y="222.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.05%)</title><rect x="1179.7" y="195.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.7" y="206.0"></text>
</g>
<g>
<title>ciField::initialize_from(fieldDescriptor*) (1 samples, 0.05%)</title><rect x="1179.7" y="179.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.7" y="190.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_in_package(char const*, int) (1 samples, 0.05%)</title><rect x="1179.7" y="163.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.7" y="174.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="1179.7" y="147.0" width="0.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1182.7" y="158.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_declared_method_holder() (1 samples, 0.05%)</title><rect x="1180.3" y="499.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.3" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1180.3" y="483.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.3" y="494.0"></text>
</g>
<g>
<title>SafePointNode::pop_monitor() (1 samples, 0.05%)</title><rect x="1181.0" y="595.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.0" y="606.0"></text>
</g>
<g>
<title>Node::del_req_ordered(unsigned int) (1 samples, 0.05%)</title><rect x="1181.0" y="579.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.05%)</title><rect x="1181.6" y="675.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.05%)</title><rect x="1181.6" y="659.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.6" y="670.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.05%)</title><rect x="1181.6" y="643.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.6" y="654.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.05%)</title><rect x="1181.6" y="627.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.6" y="638.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.05%)</title><rect x="1181.6" y="611.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.6" y="622.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.05%)</title><rect x="1181.6" y="595.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.6" y="606.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.05%)</title><rect x="1181.6" y="579.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.6" y="590.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.05%)</title><rect x="1181.6" y="563.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.6" y="574.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.05%)</title><rect x="1181.6" y="547.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.6" y="558.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.05%)</title><rect x="1181.6" y="531.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.6" y="542.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1182.3" y="739.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.3" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1182.3" y="723.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.3" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1182.3" y="707.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1182.3" y="691.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1182.3" y="675.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1182.3" y="659.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.3" y="670.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1182.3" y="643.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.3" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1182.3" y="627.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.3" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1182.3" y="611.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1182.3" y="595.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1182.3" y="579.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1182.3" y="563.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.3" y="574.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.05%)</title><rect x="1182.3" y="547.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.3" y="558.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.05%)</title><rect x="1182.3" y="531.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.3" y="542.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.05%)</title><rect x="1182.3" y="515.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.3" y="526.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.05%)</title><rect x="1182.3" y="499.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.3" y="510.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.05%)</title><rect x="1182.3" y="483.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.3" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.05%)</title><rect x="1182.3" y="467.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.3" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.05%)</title><rect x="1182.3" y="451.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.3" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1182.3" y="435.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.3" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1182.3" y="419.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.3" y="430.0"></text>
</g>
<g>
<title>GrowableArray&lt;ciTypeFlow::Block*&gt;::GrowableArray(Arena*, int, int, ciTypeFlow::Block* const&amp;) (1 samples, 0.05%)</title><rect x="1182.3" y="403.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.3" y="414.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1182.3" y="387.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.3" y="398.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.05%)</title><rect x="1182.9" y="819.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.9" y="830.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (2 samples, 0.11%)</title><rect x="1183.6" y="819.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.6" y="830.0"></text>
</g>
<g>
<title>nmethod::post_compiled_method_load_event() (2 samples, 0.11%)</title><rect x="1183.6" y="803.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.6" y="814.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.11%)</title><rect x="1183.6" y="787.0" width="1.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1186.6" y="798.0"></text>
</g>
<g>
<title>Compile::~Compile() (1 samples, 0.05%)</title><rect x="1184.8" y="835.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.8" y="846.0"></text>
</g>
<g>
<title>Arena::~Arena() (1 samples, 0.05%)</title><rect x="1184.8" y="819.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.8" y="830.0"></text>
</g>
<g>
<title>Arena::destruct_contents() (1 samples, 0.05%)</title><rect x="1184.8" y="803.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.8" y="814.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.05%)</title><rect x="1184.8" y="787.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.8" y="798.0"></text>
</g>
<g>
<title>madvise (1 samples, 0.05%)</title><rect x="1184.8" y="771.0" width="0.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1187.8" y="782.0"></text>
</g>
<g>
<title>[tid=18947] (1 samples, 0.05%)</title><rect x="1185.5" y="1011.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1188.5" y="1022.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.05%)</title><rect x="1185.5" y="995.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1188.5" y="1006.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.05%)</title><rect x="1185.5" y="979.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1188.5" y="990.0"></text>
</g>
<g>
<title>_pthread_body (1 samples, 0.05%)</title><rect x="1185.5" y="963.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1188.5" y="974.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.05%)</title><rect x="1185.5" y="947.0" width="0.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1188.5" y="958.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.05%)</title><rect x="1185.5" y="931.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.5" y="942.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (1 samples, 0.05%)</title><rect x="1185.5" y="915.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.5" y="926.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (1 samples, 0.05%)</title><rect x="1185.5" y="899.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.5" y="910.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (1 samples, 0.05%)</title><rect x="1185.5" y="883.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.5" y="894.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.05%)</title><rect x="1185.5" y="867.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.5" y="878.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.05%)</title><rect x="1185.5" y="851.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.5" y="862.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.05%)</title><rect x="1185.5" y="835.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.5" y="846.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="1185.5" y="819.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1188.5" y="830.0"></text>
</g>
<g>
<title>[tid=22275] (2 samples, 0.11%)</title><rect x="1186.1" y="1011.0" width="1.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1189.1" y="1022.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.11%)</title><rect x="1186.1" y="995.0" width="1.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1189.1" y="1006.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.11%)</title><rect x="1186.1" y="979.0" width="1.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1189.1" y="990.0"></text>
</g>
<g>
<title>_pthread_body (2 samples, 0.11%)</title><rect x="1186.1" y="963.0" width="1.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1189.1" y="974.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.11%)</title><rect x="1186.1" y="947.0" width="1.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1189.1" y="958.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.11%)</title><rect x="1186.1" y="931.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.1" y="942.0"></text>
</g>
<g>
<title>JavaThread::run() (2 samples, 0.11%)</title><rect x="1186.1" y="915.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.1" y="926.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (2 samples, 0.11%)</title><rect x="1186.1" y="899.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.1" y="910.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (2 samples, 0.11%)</title><rect x="1186.1" y="883.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.1" y="894.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.05%)</title><rect x="1186.1" y="867.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.1" y="878.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.05%)</title><rect x="1186.1" y="851.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.1" y="862.0"></text>
</g>
<g>
<title>JvmtiCompiledMethodLoadEventMark::JvmtiCompiledMethodLoadEventMark(JavaThread*, nmethod*, void*) (1 samples, 0.05%)</title><rect x="1186.1" y="835.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.1" y="846.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.05%)</title><rect x="1186.1" y="819.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.1" y="830.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.05%)</title><rect x="1186.1" y="803.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.1" y="814.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.05%)</title><rect x="1186.8" y="867.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.8" y="878.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.05%)</title><rect x="1186.8" y="851.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.8" y="862.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.05%)</title><rect x="1186.8" y="835.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.8" y="846.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="1186.8" y="819.0" width="0.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1189.8" y="830.0"></text>
</g>
<g>
<title>[tid=22531] (2 samples, 0.11%)</title><rect x="1187.4" y="1011.0" width="1.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1190.4" y="1022.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.11%)</title><rect x="1187.4" y="995.0" width="1.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1190.4" y="1006.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.11%)</title><rect x="1187.4" y="979.0" width="1.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1190.4" y="990.0"></text>
</g>
<g>
<title>_pthread_body (2 samples, 0.11%)</title><rect x="1187.4" y="963.0" width="1.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1190.4" y="974.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.11%)</title><rect x="1187.4" y="947.0" width="1.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1190.4" y="958.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.11%)</title><rect x="1187.4" y="931.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.4" y="942.0"></text>
</g>
<g>
<title>WatcherThread::run() (2 samples, 0.11%)</title><rect x="1187.4" y="915.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.4" y="926.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (2 samples, 0.11%)</title><rect x="1187.4" y="899.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.4" y="910.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.11%)</title><rect x="1187.4" y="883.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.4" y="894.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.11%)</title><rect x="1187.4" y="867.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.4" y="878.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.05%)</title><rect x="1187.4" y="851.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.4" y="862.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="1187.4" y="835.0" width="0.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1190.4" y="846.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.05%)</title><rect x="1188.1" y="851.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1191.1" y="862.0"></text>
</g>
<g>
<title>[tid=43267] (2 samples, 0.11%)</title><rect x="1188.7" y="1011.0" width="1.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1191.7" y="1022.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.11%)</title><rect x="1188.7" y="995.0" width="1.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1191.7" y="1006.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.11%)</title><rect x="1188.7" y="979.0" width="1.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1191.7" y="990.0"></text>
</g>
<g>
<title>_pthread_body (2 samples, 0.11%)</title><rect x="1188.7" y="963.0" width="1.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1191.7" y="974.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.11%)</title><rect x="1188.7" y="947.0" width="1.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1191.7" y="958.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.11%)</title><rect x="1188.7" y="931.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.7" y="942.0"></text>
</g>
<g>
<title>JavaThread::run() (2 samples, 0.11%)</title><rect x="1188.7" y="915.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.7" y="926.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (2 samples, 0.11%)</title><rect x="1188.7" y="899.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.7" y="910.0"></text>
</g>
<g>
<title>NMethodSweeper::sweeper_loop() (2 samples, 0.11%)</title><rect x="1188.7" y="883.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.7" y="894.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (2 samples, 0.11%)</title><rect x="1188.7" y="867.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.7" y="878.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (2 samples, 0.11%)</title><rect x="1188.7" y="851.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.7" y="862.0"></text>
</g>
<g>
<title>CodeBlobIterator&lt;CompiledMethod, CompiledMethodFilter&gt;::next() (1 samples, 0.05%)</title><rect x="1188.7" y="835.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.7" y="846.0"></text>
</g>
<g>
<title>CodeBlobIterator&lt;CompiledMethod, CompiledMethodFilter&gt;::next_blob() (1 samples, 0.05%)</title><rect x="1188.7" y="819.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.7" y="830.0"></text>
</g>
<g>
<title>CodeHeap::next(void*) const (1 samples, 0.05%)</title><rect x="1188.7" y="803.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.7" y="814.0"></text>
</g>
<g>
<title>NMethodSweeper::process_compiled_method(CompiledMethod*) (1 samples, 0.05%)</title><rect x="1189.4" y="835.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.4" y="846.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_flush(nmethod*) (1 samples, 0.05%)</title><rect x="1189.4" y="819.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1192.4" y="830.0"></text>
</g>
</g>
</svg>
