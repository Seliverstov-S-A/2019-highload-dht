<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="853"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="853"> </text>
<g id="frames">
<g>
<title>all (5,308 samples, 100.00%)</title><rect x="10.0" y="819.0" width="1180.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="13.0" y="830.0">all</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.04%)</title><rect x="10.0" y="803.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (17 samples, 0.32%)</title><rect x="10.9" y="803.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.9" y="814.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (17 samples, 0.32%)</title><rect x="10.9" y="787.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.9" y="798.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (3 samples, 0.06%)</title><rect x="10.9" y="771.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.9" y="782.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.06%)</title><rect x="10.9" y="755.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.9" y="766.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.04%)</title><rect x="11.1" y="739.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="14.1" y="750.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (3 samples, 0.06%)</title><rect x="11.6" y="771.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="14.6" y="782.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (11 samples, 0.21%)</title><rect x="12.2" y="771.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="15.2" y="782.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (9 samples, 0.17%)</title><rect x="12.7" y="755.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="15.7" y="766.0"></text>
</g>
<g>
<title>[not_walkable] (3 samples, 0.06%)</title><rect x="14.7" y="803.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="17.7" y="814.0"></text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.04%)</title><rect x="15.3" y="803.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="18.3" y="814.0"></text>
</g>
<g>
<title>[unknown_Java] (5 samples, 0.09%)</title><rect x="15.8" y="803.0" width="1.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="18.8" y="814.0"></text>
</g>
<g>
<title>java/lang/Thread.run (3,964 samples, 74.68%)</title><rect x="16.9" y="803.0" width="881.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.9" y="814.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (3,964 samples, 74.68%)</title><rect x="16.9" y="787.0" width="881.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.9" y="798.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (3,964 samples, 74.68%)</title><rect x="16.9" y="771.0" width="881.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="19.9" y="782.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/lang/Thread.interrupted (10 samples, 0.19%)</title><rect x="20.7" y="755.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.7" y="766.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (10 samples, 0.19%)</title><rect x="20.7" y="739.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="23.7" y="750.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (7 samples, 0.13%)</title><rect x="20.7" y="723.0" width="1.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="23.7" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.04%)</title><rect x="21.3" y="707.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="24.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (4 samples, 0.08%)</title><rect x="22.9" y="755.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.08%)</title><rect x="22.9" y="739.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="25.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (3 samples, 0.06%)</title><rect x="23.1" y="723.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.04%)</title><rect x="23.3" y="707.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.3" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.04%)</title><rect x="23.3" y="691.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="26.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (6 samples, 0.11%)</title><rect x="23.8" y="755.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="26.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.06%)</title><rect x="24.4" y="739.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="27.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (2 samples, 0.04%)</title><rect x="24.7" y="723.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="27.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (988 samples, 18.61%)</title><rect x="25.1" y="755.0" width="219.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="28.1" y="766.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (979 samples, 18.44%)</title><rect x="26.5" y="739.0" width="217.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="29.5" y="750.0">java/util/concurrent/LinkedBl..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (863 samples, 16.26%)</title><rect x="26.5" y="723.0" width="191.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="29.5" y="734.0">java/util/concurrent/lock..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (5 samples, 0.09%)</title><rect x="26.5" y="707.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="29.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (4 samples, 0.08%)</title><rect x="27.6" y="707.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="30.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.04%)</title><rect x="28.5" y="707.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="31.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.04%)</title><rect x="28.5" y="691.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="31.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.04%)</title><rect x="28.5" y="675.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="31.5" y="686.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.04%)</title><rect x="28.5" y="659.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="31.5" y="670.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.04%)</title><rect x="28.5" y="643.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="31.5" y="654.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.04%)</title><rect x="28.5" y="627.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="31.5" y="638.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.04%)</title><rect x="28.5" y="611.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="31.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (4 samples, 0.08%)</title><rect x="28.9" y="707.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="31.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.08%)</title><rect x="28.9" y="691.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="31.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.08%)</title><rect x="28.9" y="675.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="31.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.08%)</title><rect x="28.9" y="659.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="31.9" y="670.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (4 samples, 0.08%)</title><rect x="28.9" y="643.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="31.9" y="654.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (4 samples, 0.08%)</title><rect x="28.9" y="627.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="31.9" y="638.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.08%)</title><rect x="28.9" y="611.0" width="0.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="31.9" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (848 samples, 15.98%)</title><rect x="29.8" y="707.0" width="188.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="32.8" y="718.0">java/util/concurrent/loc..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (846 samples, 15.94%)</title><rect x="30.2" y="691.0" width="188.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="33.2" y="702.0">jdk/internal/misc/Unsafe..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.04%)</title><rect x="36.7" y="675.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="39.7" y="686.0"></text>
</g>
<g>
<title>JavaThreadParkedState::~JavaThreadParkedState() (2 samples, 0.04%)</title><rect x="37.1" y="675.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="40.1" y="686.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (812 samples, 15.30%)</title><rect x="37.8" y="675.0" width="180.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="40.8" y="686.0">Unsafe_Park(JNIEnv_*, _..</text>
</g>
<g>
<title>JavaThread::is_suspend_after_native() const (2 samples, 0.04%)</title><rect x="38.7" y="659.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="41.7" y="670.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (2 samples, 0.04%)</title><rect x="39.1" y="659.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="42.1" y="670.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.04%)</title><rect x="39.6" y="659.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="42.6" y="670.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (2 samples, 0.04%)</title><rect x="39.6" y="643.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="42.6" y="654.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (5 samples, 0.09%)</title><rect x="40.0" y="659.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="43.0" y="670.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (3 samples, 0.06%)</title><rect x="41.1" y="659.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="44.1" y="670.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (3 samples, 0.06%)</title><rect x="41.1" y="643.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="44.1" y="654.0"></text>
</g>
<g>
<title>JfrEventSetting::setting(JfrEventId) (2 samples, 0.04%)</title><rect x="41.3" y="627.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="44.3" y="638.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (765 samples, 14.41%)</title><rect x="42.2" y="659.0" width="170.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="45.2" y="670.0">Parker::park(bool, long)</text>
</g>
<g>
<title>__psynch_cvwait (746 samples, 14.05%)</title><rect x="44.2" y="643.0" width="165.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="47.2" y="654.0">__psynch_cvwait</text>
</g>
<g>
<title>_pthread_cond_wait (8 samples, 0.15%)</title><rect x="210.1" y="643.0" width="1.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="213.1" y="654.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (2 samples, 0.04%)</title><rect x="211.4" y="627.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="214.4" y="638.0"></text>
</g>
<g>
<title>_pthread_testcancel (2 samples, 0.04%)</title><rect x="211.9" y="643.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="214.9" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (9 samples, 0.17%)</title><rect x="213.0" y="659.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="216.0" y="670.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.04%)</title><rect x="213.0" y="643.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="216.0" y="654.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (7 samples, 0.13%)</title><rect x="213.4" y="643.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="216.4" y="654.0"></text>
</g>
<g>
<title>Thread::polling_page_addr() (2 samples, 0.04%)</title><rect x="213.6" y="627.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="216.6" y="638.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.08%)</title><rect x="214.1" y="627.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="217.1" y="638.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.06%)</title><rect x="214.1" y="611.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="217.1" y="622.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="215.2" y="659.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="218.2" y="670.0"></text>
</g>
<g>
<title>_pthread_cond_wait (3 samples, 0.06%)</title><rect x="215.6" y="659.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="218.6" y="670.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.04%)</title><rect x="216.5" y="659.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="219.5" y="670.0"></text>
</g>
<g>
<title>pthread_cond_wait (2 samples, 0.04%)</title><rect x="217.0" y="659.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="220.0" y="670.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (4 samples, 0.08%)</title><rect x="217.4" y="659.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="220.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (23 samples, 0.43%)</title><rect x="218.3" y="723.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="221.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (20 samples, 0.38%)</title><rect x="218.7" y="707.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="221.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (18 samples, 0.34%)</title><rect x="219.0" y="691.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="222.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (8 samples, 0.15%)</title><rect x="219.2" y="675.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="222.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (8 samples, 0.15%)</title><rect x="219.2" y="659.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="222.2" y="670.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (7 samples, 0.13%)</title><rect x="219.4" y="643.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="222.4" y="654.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (6 samples, 0.11%)</title><rect x="219.6" y="627.0" width="1.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="222.6" y="638.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (6 samples, 0.11%)</title><rect x="219.6" y="611.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="222.6" y="622.0"></text>
</g>
<g>
<title>__psynch_cvwait (6 samples, 0.11%)</title><rect x="219.6" y="595.0" width="1.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="222.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (9 samples, 0.17%)</title><rect x="221.0" y="675.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="224.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.04%)</title><rect x="222.5" y="659.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="225.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (93 samples, 1.75%)</title><rect x="223.4" y="723.0" width="20.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="226.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (93 samples, 1.75%)</title><rect x="223.4" y="707.0" width="20.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="226.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (93 samples, 1.75%)</title><rect x="223.4" y="691.0" width="20.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="226.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (93 samples, 1.75%)</title><rect x="223.4" y="675.0" width="20.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="226.4" y="686.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (93 samples, 1.75%)</title><rect x="223.4" y="659.0" width="20.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="226.4" y="670.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (86 samples, 1.62%)</title><rect x="225.0" y="643.0" width="19.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="228.0" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.04%)</title><rect x="225.6" y="627.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="228.6" y="638.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.04%)</title><rect x="225.6" y="611.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="228.6" y="622.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.04%)</title><rect x="225.6" y="595.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="228.6" y="606.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="225.6" y="579.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="228.6" y="590.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.04%)</title><rect x="225.6" y="563.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="228.6" y="574.0"></text>
</g>
<g>
<title>__psynch_cvsignal (77 samples, 1.45%)</title><rect x="226.5" y="627.0" width="17.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="229.5" y="638.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.04%)</title><rect x="243.6" y="627.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="246.6" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl$$Lambda$74/45701517.run (2 samples, 0.04%)</title><rect x="244.3" y="739.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="247.3" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl$$Lambda$74/45701517.run (2,937 samples, 55.33%)</title><rect x="245.2" y="755.0" width="652.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="248.2" y="766.0">ru/mail/polis/service/seliverstov/ServiceImpl$$Lambda$74/45701517.run</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (4 samples, 0.08%)</title><rect x="245.6" y="739.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="248.6" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.lambda$executeAsync$4 (2,931 samples, 55.22%)</title><rect x="246.5" y="739.0" width="651.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="249.5" y="750.0">ru/mail/polis/service/seliverstov/ServiceImpl.lambda$executeAsync$4</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (666 samples, 12.55%)</title><rect x="246.5" y="723.0" width="148.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="249.5" y="734.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (20 samples, 0.38%)</title><rect x="246.8" y="707.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="249.8" y="718.0"></text>
</g>
<g>
<title>java/lang/String.length (4 samples, 0.08%)</title><rect x="246.8" y="691.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="249.8" y="702.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (16 samples, 0.30%)</title><rect x="247.6" y="691.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="250.6" y="702.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (15 samples, 0.28%)</title><rect x="247.9" y="675.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="250.9" y="686.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (13 samples, 0.24%)</title><rect x="248.3" y="659.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="251.3" y="670.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (13 samples, 0.24%)</title><rect x="248.3" y="643.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="251.3" y="654.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (12 samples, 0.23%)</title><rect x="248.5" y="627.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="251.5" y="638.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (9 samples, 0.17%)</title><rect x="249.0" y="611.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="252.0" y="622.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (9 samples, 0.17%)</title><rect x="249.0" y="595.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="252.0" y="606.0"></text>
</g>
<g>
<title>__psynch_cvsignal (8 samples, 0.15%)</title><rect x="249.2" y="579.0" width="1.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="252.2" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (628 samples, 11.83%)</title><rect x="251.2" y="707.0" width="139.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="254.2" y="718.0">one/nio/http/Http..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (24 samples, 0.45%)</title><rect x="251.2" y="691.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="254.2" y="702.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.06%)</title><rect x="251.6" y="675.0" width="0.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="254.6" y="686.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (3 samples, 0.06%)</title><rect x="252.3" y="675.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="255.3" y="686.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (16 samples, 0.30%)</title><rect x="253.0" y="675.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="256.0" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (4 samples, 0.08%)</title><rect x="253.4" y="659.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="256.4" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (10 samples, 0.19%)</title><rect x="254.3" y="659.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="257.3" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (10 samples, 0.19%)</title><rect x="254.3" y="643.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="257.3" y="654.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.04%)</title><rect x="255.4" y="627.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="258.4" y="638.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.04%)</title><rect x="255.4" y="611.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="258.4" y="622.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.04%)</title><rect x="255.9" y="627.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="258.9" y="638.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (604 samples, 11.38%)</title><rect x="256.5" y="691.0" width="134.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="259.5" y="702.0">one/nio/net/Sessi..</text>
</g>
<g>
<title>one/nio/net/Session.write (604 samples, 11.38%)</title><rect x="256.5" y="675.0" width="134.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="259.5" y="686.0">one/nio/net/Sessi..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (604 samples, 11.38%)</title><rect x="256.5" y="659.0" width="134.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="259.5" y="670.0">one/nio/net/Sessi..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (604 samples, 11.38%)</title><rect x="256.5" y="643.0" width="134.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="259.5" y="654.0">one/nio/net/JavaS..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (604 samples, 11.38%)</title><rect x="256.5" y="627.0" width="134.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="259.5" y="638.0">sun/nio/ch/Socket..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (27 samples, 0.51%)</title><rect x="256.5" y="611.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="259.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (27 samples, 0.51%)</title><rect x="256.5" y="595.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="259.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (27 samples, 0.51%)</title><rect x="256.5" y="579.0" width="6.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="259.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (27 samples, 0.51%)</title><rect x="256.5" y="563.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="259.5" y="574.0"></text>
</g>
<g>
<title>__cxx_global_var_init (3 samples, 0.06%)</title><rect x="258.1" y="547.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="261.1" y="558.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.04%)</title><rect x="258.8" y="547.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="261.8" y="558.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (12 samples, 0.23%)</title><rect x="259.6" y="547.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="262.6" y="558.0"></text>
</g>
<g>
<title>gettimeofday (6 samples, 0.11%)</title><rect x="259.6" y="531.0" width="1.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="262.6" y="542.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (6 samples, 0.11%)</title><rect x="259.6" y="515.0" width="1.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="262.6" y="526.0"></text>
</g>
<g>
<title>_res (2 samples, 0.04%)</title><rect x="260.5" y="499.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="263.5" y="510.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (6 samples, 0.11%)</title><rect x="261.0" y="531.0" width="1.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="264.0" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (577 samples, 10.87%)</title><rect x="262.5" y="611.0" width="128.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="265.5" y="622.0">sun/nio/ch/IOUti..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (577 samples, 10.87%)</title><rect x="262.5" y="595.0" width="128.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="265.5" y="606.0">sun/nio/ch/IOUti..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (551 samples, 10.38%)</title><rect x="262.8" y="579.0" width="122.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="265.8" y="590.0">sun/nio/ch/IOUt..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (551 samples, 10.38%)</title><rect x="262.8" y="563.0" width="122.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="265.8" y="574.0">sun/nio/ch/Sock..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (551 samples, 10.38%)</title><rect x="262.8" y="547.0" width="122.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="265.8" y="558.0">sun/nio/ch/File..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (4 samples, 0.08%)</title><rect x="267.4" y="531.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="270.4" y="542.0"></text>
</g>
<g>
<title>convertReturnVal (2 samples, 0.04%)</title><rect x="268.3" y="531.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="271.3" y="542.0"></text>
</g>
<g>
<title>write (524 samples, 9.87%)</title><rect x="268.8" y="531.0" width="116.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="271.8" y="542.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (25 samples, 0.47%)</title><rect x="385.3" y="579.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="388.3" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (9 samples, 0.17%)</title><rect x="385.5" y="563.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="388.5" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (6 samples, 0.11%)</title><rect x="386.1" y="547.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="389.1" y="558.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="387.0" y="531.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="390.0" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (15 samples, 0.28%)</title><rect x="387.5" y="563.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="390.5" y="574.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.04%)</title><rect x="390.1" y="547.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="393.1" y="558.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.04%)</title><rect x="390.1" y="531.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="393.1" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (14 samples, 0.26%)</title><rect x="390.8" y="707.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="393.8" y="718.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.04%)</title><rect x="391.3" y="691.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="394.3" y="702.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (10 samples, 0.19%)</title><rect x="391.7" y="691.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="394.7" y="702.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.06%)</title><rect x="391.7" y="675.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="394.7" y="686.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (7 samples, 0.13%)</title><rect x="392.4" y="675.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="395.4" y="686.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (4 samples, 0.08%)</title><rect x="393.0" y="659.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="396.0" y="670.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (4 samples, 0.08%)</title><rect x="393.0" y="643.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="396.0" y="654.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (4 samples, 0.08%)</title><rect x="393.0" y="627.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="396.0" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (2 samples, 0.04%)</title><rect x="393.9" y="707.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="396.9" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl$$Lambda$73/2031386504.act (2,265 samples, 42.67%)</title><rect x="394.6" y="723.0" width="503.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="397.6" y="734.0">ru/mail/polis/service/seliverstov/ServiceImpl$$Lambda$73/2031386504.act</text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.lambda$entity$2 (2,265 samples, 42.67%)</title><rect x="394.6" y="707.0" width="503.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="397.6" y="718.0">ru/mail/polis/service/seliverstov/ServiceImpl.lambda$entity$2</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.15%)</title><rect x="394.6" y="691.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="397.6" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.15%)</title><rect x="394.6" y="675.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="397.6" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.13%)</title><rect x="394.8" y="659.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="397.8" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.13%)</title><rect x="394.8" y="643.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="397.8" y="654.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.13%)</title><rect x="394.8" y="627.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="397.8" y="638.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.04%)</title><rect x="395.0" y="611.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="398.0" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.06%)</title><rect x="395.7" y="611.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="398.7" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.06%)</title><rect x="395.7" y="595.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="398.7" y="606.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.04%)</title><rect x="395.9" y="579.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="398.9" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (2,256 samples, 42.50%)</title><rect x="396.6" y="691.0" width="501.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="399.6" y="702.0">ru/mail/polis/dao/DAOImpl.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,223 samples, 41.88%)</title><rect x="397.3" y="675.0" width="494.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="400.3" y="686.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,223 samples, 41.88%)</title><rect x="397.3" y="659.0" width="494.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="400.3" y="670.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (2,210 samples, 41.64%)</title><rect x="400.1" y="643.0" width="491.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="403.1" y="654.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.06%)</title><rect x="401.7" y="627.0" width="0.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="404.7" y="638.0"></text>
</g>
<g>
<title>operator delete(void*) (4 samples, 0.08%)</title><rect x="402.4" y="627.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="405.4" y="638.0"></text>
</g>
<g>
<title>operator delete[](void*) (2 samples, 0.04%)</title><rect x="403.3" y="627.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="406.3" y="638.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (2,190 samples, 41.26%)</title><rect x="404.4" y="627.0" width="486.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="407.4" y="638.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions co..</text>
</g>
<g>
<title>free (7 samples, 0.13%)</title><rect x="406.1" y="611.0" width="1.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="409.1" y="622.0"></text>
</g>
<g>
<title>tiny_size (3 samples, 0.06%)</title><rect x="407.0" y="595.0" width="0.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="410.0" y="606.0"></text>
</g>
<g>
<title>free_tiny (15 samples, 0.28%)</title><rect x="407.7" y="611.0" width="3.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="410.7" y="622.0"></text>
</g>
<g>
<title>tiny_free_no_lock (11 samples, 0.21%)</title><rect x="408.6" y="595.0" width="2.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="411.6" y="606.0"></text>
</g>
<g>
<title>tiny_free_list_remove_ptr (2 samples, 0.04%)</title><rect x="410.6" y="579.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="413.6" y="590.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (10 samples, 0.19%)</title><rect x="411.0" y="611.0" width="2.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="414.0" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.08%)</title><rect x="412.4" y="595.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="415.4" y="606.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (4 samples, 0.08%)</title><rect x="412.4" y="579.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="415.4" y="590.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.04%)</title><rect x="412.6" y="563.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="415.6" y="574.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="412.6" y="547.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="415.6" y="558.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.04%)</title><rect x="412.6" y="531.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="415.6" y="542.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="412.6" y="515.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="415.6" y="526.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (15 samples, 0.28%)</title><rect x="413.3" y="611.0" width="3.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="416.3" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (5 samples, 0.09%)</title><rect x="414.8" y="595.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="417.8" y="606.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (4 samples, 0.08%)</title><rect x="415.0" y="579.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="418.0" y="590.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.06%)</title><rect x="415.3" y="563.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="418.3" y="574.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.06%)</title><rect x="415.3" y="547.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="418.3" y="558.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.04%)</title><rect x="415.3" y="531.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="418.3" y="542.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="415.9" y="595.0" width="0.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="418.9" y="606.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="416.6" y="611.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="419.6" y="622.0"></text>
</g>
<g>
<title>operator new(unsigned long) (20 samples, 0.38%)</title><rect x="417.0" y="611.0" width="4.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="420.0" y="622.0"></text>
</g>
<g>
<title>malloc (20 samples, 0.38%)</title><rect x="417.0" y="595.0" width="4.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="420.0" y="606.0"></text>
</g>
<g>
<title>malloc_zone_malloc (19 samples, 0.36%)</title><rect x="417.0" y="579.0" width="4.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="420.0" y="590.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (18 samples, 0.34%)</title><rect x="417.3" y="563.0" width="4.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="420.3" y="574.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (16 samples, 0.30%)</title><rect x="417.7" y="547.0" width="3.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="420.7" y="558.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (5 samples, 0.09%)</title><rect x="420.2" y="531.0" width="1.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="423.2" y="542.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (2,104 samples, 39.64%)</title><rect x="421.5" y="611.0" width="467.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="424.5" y="622.0">rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2,102 samples, 39.60%)</title><rect x="421.9" y="595.0" width="467.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="424.9" y="606.0">rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::Colu..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2,098 samples, 39.53%)</title><rect x="421.9" y="579.0" width="466.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="424.9" y="590.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFa..</text>
</g>
<g>
<title>__cxxabiv1::__class_type_info::process_static_type_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int) const (2 samples, 0.04%)</title><rect x="422.2" y="563.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="425.2" y="574.0"></text>
</g>
<g>
<title>free (3 samples, 0.06%)</title><rect x="422.6" y="563.0" width="0.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="425.6" y="574.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (4 samples, 0.08%)</title><rect x="423.3" y="563.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="426.3" y="574.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (2,044 samples, 38.51%)</title><rect x="424.2" y="563.0" width="454.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="427.2" y="574.0">rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (2,028 samples, 38.21%)</title><rect x="425.0" y="547.0" width="450.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="428.0" y="558.0">rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocks..</text>
</g>
<g>
<title>_dispatch_queue_attrs (6 samples, 0.11%)</title><rect x="435.5" y="531.0" width="1.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="438.5" y="542.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (6 samples, 0.11%)</title><rect x="437.9" y="531.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="440.9" y="542.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="438.8" y="515.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="441.8" y="526.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (590 samples, 11.12%)</title><rect x="439.3" y="531.0" width="131.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="442.3" y="542.0">rocksdb::DBImpl:..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (580 samples, 10.93%)</title><rect x="440.4" y="515.0" width="128.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="443.4" y="526.0">rocksdb::DBImpl:..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (573 samples, 10.80%)</title><rect x="441.9" y="499.0" width="127.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="444.9" y="510.0">rocksdb::log::Wr..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (9 samples, 0.17%)</title><rect x="442.4" y="483.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="445.4" y="494.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (562 samples, 10.59%)</title><rect x="444.4" y="483.0" width="124.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="447.4" y="494.0">rocksdb::log::W..</text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync() (4 samples, 0.08%)</title><rect x="446.4" y="467.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="449.4" y="478.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Flush() (2 samples, 0.04%)</title><rect x="447.3" y="467.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="450.3" y="478.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (4 samples, 0.08%)</title><rect x="447.7" y="467.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="450.7" y="478.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="448.2" y="451.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="451.2" y="462.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (542 samples, 10.21%)</title><rect x="448.6" y="467.0" width="120.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="451.6" y="478.0">rocksdb::Writab..</text>
</g>
<g>
<title>_dispatch_queue_attrs (3 samples, 0.06%)</title><rect x="449.3" y="451.0" width="0.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="452.3" y="462.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (534 samples, 10.06%)</title><rect x="450.4" y="451.0" width="118.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="453.4" y="462.0">rocksdb::Writa..</text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;) (7 samples, 0.13%)</title><rect x="451.1" y="435.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="454.1" y="446.0"></text>
</g>
<g>
<title>write (524 samples, 9.87%)</title><rect x="452.6" y="435.0" width="116.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="455.6" y="446.0">write</text>
</g>
<g>
<title>rocksdb::WriteBatch::Clear() (3 samples, 0.06%)</title><rect x="569.3" y="515.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="572.3" y="526.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (2 samples, 0.04%)</title><rect x="569.5" y="499.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="572.5" y="510.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="570.0" y="515.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="573.0" y="526.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (3 samples, 0.06%)</title><rect x="570.9" y="531.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="573.9" y="542.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (161 samples, 3.03%)</title><rect x="571.5" y="531.0" width="35.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="574.5" y="542.0">roc..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::Continue() (2 samples, 0.04%)</title><rect x="575.8" y="515.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="578.8" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (139 samples, 2.62%)</title><rect x="576.2" y="515.0" width="30.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="579.2" y="526.0">ro..</text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (3 samples, 0.06%)</title><rect x="577.5" y="499.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="580.5" y="510.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (130 samples, 2.45%)</title><rect x="578.2" y="499.0" width="28.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="581.2" y="510.0">ro..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (2 samples, 0.04%)</title><rect x="578.9" y="483.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="581.9" y="494.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (125 samples, 2.35%)</title><rect x="579.3" y="483.0" width="27.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="582.3" y="494.0">r..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (2 samples, 0.04%)</title><rect x="580.4" y="467.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="583.4" y="478.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (110 samples, 2.07%)</title><rect x="580.9" y="467.0" width="24.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="583.9" y="478.0">r..</text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="583.3" y="451.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="586.3" y="462.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (3 samples, 0.06%)</title><rect x="583.8" y="451.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="586.8" y="462.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.04%)</title><rect x="584.7" y="451.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="587.7" y="462.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (90 samples, 1.70%)</title><rect x="585.3" y="451.0" width="20.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="588.3" y="462.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (4 samples, 0.08%)</title><rect x="595.3" y="435.0" width="0.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="598.3" y="446.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (4 samples, 0.08%)</title><rect x="596.2" y="435.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="599.2" y="446.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (3 samples, 0.06%)</title><rect x="596.4" y="419.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="599.4" y="430.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (3 samples, 0.06%)</title><rect x="597.1" y="435.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="600.1" y="446.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (31 samples, 0.58%)</title><rect x="597.8" y="435.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="600.8" y="446.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (4 samples, 0.08%)</title><rect x="598.9" y="419.0" width="0.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="601.9" y="430.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.04%)</title><rect x="599.8" y="419.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="602.8" y="430.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (19 samples, 0.36%)</title><rect x="600.2" y="419.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="603.2" y="430.0"></text>
</g>
<g>
<title>_platform_memcmp (13 samples, 0.24%)</title><rect x="601.6" y="403.0" width="2.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="604.6" y="414.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.04%)</title><rect x="604.9" y="435.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="607.9" y="446.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (7 samples, 0.13%)</title><rect x="605.3" y="467.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="608.3" y="478.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (78 samples, 1.47%)</title><rect x="607.3" y="531.0" width="17.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="610.3" y="542.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (64 samples, 1.21%)</title><rect x="610.2" y="515.0" width="14.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="613.2" y="526.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (2 samples, 0.04%)</title><rect x="610.4" y="499.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="613.4" y="510.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (61 samples, 1.15%)</title><rect x="610.9" y="499.0" width="13.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="613.9" y="510.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (59 samples, 1.11%)</title><rect x="611.3" y="483.0" width="13.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="614.3" y="494.0"></text>
</g>
<g>
<title>operator new(unsigned long) (6 samples, 0.11%)</title><rect x="611.8" y="467.0" width="1.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="614.8" y="478.0"></text>
</g>
<g>
<title>malloc (6 samples, 0.11%)</title><rect x="611.8" y="451.0" width="1.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="614.8" y="462.0"></text>
</g>
<g>
<title>malloc_zone_malloc (5 samples, 0.09%)</title><rect x="612.0" y="435.0" width="1.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="615.0" y="446.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.08%)</title><rect x="612.2" y="419.0" width="0.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="615.2" y="430.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.06%)</title><rect x="612.4" y="403.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="615.4" y="414.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (2 samples, 0.04%)</title><rect x="612.7" y="387.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="615.7" y="398.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (2 samples, 0.04%)</title><rect x="613.1" y="467.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="616.1" y="478.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (48 samples, 0.90%)</title><rect x="613.6" y="467.0" width="10.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="616.6" y="478.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.04%)</title><rect x="615.1" y="451.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="618.1" y="462.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (39 samples, 0.73%)</title><rect x="615.6" y="451.0" width="8.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="618.6" y="462.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (2 samples, 0.04%)</title><rect x="616.2" y="435.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="619.2" y="446.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (34 samples, 0.64%)</title><rect x="616.7" y="435.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="619.7" y="446.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (3 samples, 0.06%)</title><rect x="621.6" y="419.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="624.6" y="430.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.04%)</title><rect x="621.8" y="403.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="624.8" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (7 samples, 0.13%)</title><rect x="622.2" y="419.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="625.2" y="430.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.04%)</title><rect x="622.9" y="403.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="625.9" y="414.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.04%)</title><rect x="623.3" y="403.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="626.3" y="414.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.04%)</title><rect x="623.8" y="419.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="626.8" y="430.0"></text>
</g>
<g>
<title>rocksdb::WriteController::IsStopped() const (2 samples, 0.04%)</title><rect x="624.7" y="531.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="627.7" y="542.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (591 samples, 11.13%)</title><rect x="625.1" y="531.0" width="131.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="628.1" y="542.0">rocksdb::WriteTh..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (590 samples, 11.12%)</title><rect x="625.1" y="515.0" width="131.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="628.1" y="526.0">rocksdb::WriteTh..</text>
</g>
<g>
<title>sched_yield (2 samples, 0.04%)</title><rect x="630.2" y="499.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="633.2" y="510.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (6 samples, 0.11%)</title><rect x="630.7" y="499.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="633.7" y="510.0"></text>
</g>
<g>
<title>clock_gettime (5 samples, 0.09%)</title><rect x="630.7" y="483.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="633.7" y="494.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (3 samples, 0.06%)</title><rect x="630.9" y="467.0" width="0.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="633.9" y="478.0"></text>
</g>
<g>
<title>_res (2 samples, 0.04%)</title><rect x="630.9" y="451.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="633.9" y="462.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (3 samples, 0.06%)</title><rect x="632.0" y="499.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="635.0" y="510.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.06%)</title><rect x="632.0" y="483.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="635.0" y="494.0"></text>
</g>
<g>
<title>xdrrec_ops (555 samples, 10.46%)</title><rect x="632.9" y="499.0" width="123.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="635.9" y="510.0">xdrrec_ops</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (7 samples, 0.13%)</title><rect x="756.7" y="531.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="759.7" y="542.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (7 samples, 0.13%)</title><rect x="756.7" y="515.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="759.7" y="526.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (4 samples, 0.08%)</title><rect x="756.9" y="499.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="759.9" y="510.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.06%)</title><rect x="756.9" y="483.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="759.9" y="494.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (2 samples, 0.04%)</title><rect x="757.8" y="499.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="760.8" y="510.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (2 samples, 0.04%)</title><rect x="757.8" y="483.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="760.8" y="494.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (2 samples, 0.04%)</title><rect x="757.8" y="467.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="760.8" y="478.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (58 samples, 1.09%)</title><rect x="758.3" y="531.0" width="12.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="761.3" y="542.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.06%)</title><rect x="758.9" y="515.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="761.9" y="526.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (43 samples, 0.81%)</title><rect x="759.6" y="515.0" width="9.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="762.6" y="526.0"></text>
</g>
<g>
<title>__psynch_cvsignal (43 samples, 0.81%)</title><rect x="759.6" y="499.0" width="9.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="762.6" y="510.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (8 samples, 0.15%)</title><rect x="769.4" y="515.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="772.4" y="526.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (8 samples, 0.15%)</title><rect x="769.4" y="499.0" width="1.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="772.4" y="510.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (7 samples, 0.13%)</title><rect x="769.4" y="483.0" width="1.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="772.4" y="494.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (394 samples, 7.42%)</title><rect x="771.2" y="531.0" width="87.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="774.2" y="542.0">rocksdb::W..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (387 samples, 7.29%)</title><rect x="771.8" y="515.0" width="86.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="774.8" y="526.0">rocksdb::W..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (297 samples, 5.60%)</title><rect x="777.4" y="499.0" width="66.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="780.4" y="510.0">std::__..</text>
</g>
<g>
<title>__psynch_cvwait (250 samples, 4.71%)</title><rect x="777.8" y="483.0" width="55.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="780.8" y="494.0">__psy..</text>
</g>
<g>
<title>_pthread_cond_wait (43 samples, 0.81%)</title><rect x="833.4" y="483.0" width="9.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="836.4" y="494.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (38 samples, 0.72%)</title><rect x="834.5" y="467.0" width="8.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="837.5" y="478.0"></text>
</g>
<g>
<title>__psynch_mutexwait (35 samples, 0.66%)</title><rect x="834.8" y="451.0" width="7.7" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="837.8" y="462.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_wait (2 samples, 0.04%)</title><rect x="842.5" y="451.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="845.5" y="462.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.04%)</title><rect x="843.0" y="483.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="846.0" y="494.0"></text>
</g>
<g>
<title>std::__1::mutex::lock() (3 samples, 0.06%)</title><rect x="843.4" y="499.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="846.4" y="510.0"></text>
</g>
<g>
<title>_pthread_mutex_lock_init_slow (2 samples, 0.04%)</title><rect x="843.6" y="483.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="846.6" y="494.0"></text>
</g>
<g>
<title>xdrrec_ops (60 samples, 1.13%)</title><rect x="844.5" y="499.0" width="13.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="847.5" y="510.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::__1::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (2 samples, 0.04%)</title><rect x="857.9" y="515.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="860.9" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (60 samples, 1.13%)</title><rect x="858.8" y="531.0" width="13.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="861.8" y="542.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.04%)</title><rect x="859.2" y="515.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="862.2" y="526.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (41 samples, 0.77%)</title><rect x="859.7" y="515.0" width="9.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="862.7" y="526.0"></text>
</g>
<g>
<title>__psynch_cvsignal (37 samples, 0.70%)</title><rect x="859.7" y="499.0" width="8.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="862.7" y="510.0"></text>
</g>
<g>
<title>pthread_cond_signal (4 samples, 0.08%)</title><rect x="867.9" y="499.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="870.9" y="510.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (14 samples, 0.26%)</title><rect x="868.8" y="515.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="871.8" y="526.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (14 samples, 0.26%)</title><rect x="868.8" y="499.0" width="3.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="871.8" y="510.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (13 samples, 0.24%)</title><rect x="869.0" y="483.0" width="2.9" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="872.0" y="494.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::AssertHeld() (2 samples, 0.04%)</title><rect x="872.1" y="531.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="875.1" y="542.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (2 samples, 0.04%)</title><rect x="872.5" y="531.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="875.5" y="542.0"></text>
</g>
<g>
<title>std::__1::condition_variable::~condition_variable() (2 samples, 0.04%)</title><rect x="873.0" y="531.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="876.0" y="542.0"></text>
</g>
<g>
<title>pthread_cond_destroy (2 samples, 0.04%)</title><rect x="873.0" y="515.0" width="0.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="876.0" y="526.0"></text>
</g>
<g>
<title>std::__1::mutex::~mutex() (2 samples, 0.04%)</title><rect x="873.7" y="531.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="876.7" y="542.0"></text>
</g>
<g>
<title>pthread_mutex_destroy (2 samples, 0.04%)</title><rect x="873.7" y="515.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="876.7" y="526.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.06%)</title><rect x="874.3" y="531.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="877.3" y="542.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (4 samples, 0.08%)</title><rect x="875.0" y="531.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="878.0" y="542.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (4 samples, 0.08%)</title><rect x="875.0" y="515.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="878.0" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.04%)</title><rect x="875.9" y="547.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="878.9" y="558.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (4 samples, 0.08%)</title><rect x="876.3" y="547.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="879.3" y="558.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (3 samples, 0.06%)</title><rect x="877.9" y="547.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="880.9" y="558.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (3 samples, 0.06%)</title><rect x="878.5" y="563.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="881.5" y="574.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (11 samples, 0.21%)</title><rect x="879.2" y="563.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="882.2" y="574.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (7 samples, 0.13%)</title><rect x="879.7" y="547.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="882.7" y="558.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (5 samples, 0.09%)</title><rect x="880.1" y="531.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="883.1" y="542.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="880.8" y="515.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="883.8" y="526.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (2 samples, 0.04%)</title><rect x="881.2" y="547.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="884.2" y="558.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (16 samples, 0.30%)</title><rect x="881.7" y="563.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="884.7" y="574.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (10 samples, 0.19%)</title><rect x="881.9" y="547.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="884.9" y="558.0"></text>
</g>
<g>
<title>operator new(unsigned long) (10 samples, 0.19%)</title><rect x="881.9" y="531.0" width="2.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="884.9" y="542.0"></text>
</g>
<g>
<title>malloc (10 samples, 0.19%)</title><rect x="881.9" y="515.0" width="2.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="884.9" y="526.0"></text>
</g>
<g>
<title>malloc_zone_malloc (9 samples, 0.17%)</title><rect x="882.1" y="499.0" width="2.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="885.1" y="510.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (9 samples, 0.17%)</title><rect x="882.1" y="483.0" width="2.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="885.1" y="494.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (9 samples, 0.17%)</title><rect x="882.1" y="467.0" width="2.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="885.1" y="478.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (5 samples, 0.09%)</title><rect x="883.0" y="451.0" width="1.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="886.0" y="462.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (3 samples, 0.06%)</title><rect x="884.1" y="547.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="887.1" y="558.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (2 samples, 0.04%)</title><rect x="884.3" y="531.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="887.3" y="542.0"></text>
</g>
<g>
<title>std::bad_variant_access::~bad_variant_access() (2 samples, 0.04%)</title><rect x="884.8" y="547.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="887.8" y="558.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (12 samples, 0.23%)</title><rect x="885.2" y="563.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="888.2" y="574.0"></text>
</g>
<g>
<title>free (6 samples, 0.11%)</title><rect x="885.7" y="547.0" width="1.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="888.7" y="558.0"></text>
</g>
<g>
<title>tiny_size (3 samples, 0.06%)</title><rect x="886.3" y="531.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="889.3" y="542.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.04%)</title><rect x="887.0" y="547.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="890.0" y="558.0"></text>
</g>
<g>
<title>szone_size (2 samples, 0.04%)</title><rect x="887.4" y="547.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="890.4" y="558.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (2 samples, 0.04%)</title><rect x="887.9" y="563.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="890.9" y="574.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (2 samples, 0.04%)</title><rect x="888.8" y="579.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="891.8" y="590.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (4 samples, 0.08%)</title><rect x="889.2" y="611.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="892.2" y="622.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (4 samples, 0.08%)</title><rect x="890.3" y="611.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="893.3" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.shiftByte (14 samples, 0.26%)</title><rect x="891.4" y="675.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="894.4" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.toArray (14 samples, 0.26%)</title><rect x="891.4" y="659.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="894.4" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (6 samples, 0.11%)</title><rect x="891.7" y="643.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="894.7" y="654.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (6 samples, 0.11%)</title><rect x="891.7" y="627.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="894.7" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.08%)</title><rect x="892.1" y="611.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="895.1" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.08%)</title><rect x="892.1" y="595.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="895.1" y="606.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.08%)</title><rect x="892.1" y="579.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="895.1" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (7 samples, 0.13%)</title><rect x="893.0" y="643.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="896.0" y="654.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.13%)</title><rect x="893.0" y="627.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="896.0" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.11%)</title><rect x="893.2" y="611.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="896.2" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="893.7" y="595.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="896.7" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.06%)</title><rect x="893.9" y="579.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="896.9" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.toArray (16 samples, 0.30%)</title><rect x="894.6" y="675.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="897.6" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (15 samples, 0.28%)</title><rect x="894.6" y="659.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="897.6" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (10 samples, 0.19%)</title><rect x="895.4" y="643.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="898.4" y="654.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.04%)</title><rect x="896.8" y="627.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="899.8" y="638.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="897.2" y="627.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="900.2" y="638.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,158 samples, 21.82%)</title><rect x="898.3" y="803.0" width="257.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="901.3" y="814.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (3 samples, 0.06%)</title><rect x="900.3" y="787.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="903.3" y="798.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (3 samples, 0.06%)</title><rect x="900.3" y="771.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="903.3" y="782.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (683 samples, 12.87%)</title><rect x="901.2" y="787.0" width="151.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="904.2" y="798.0">one/nio/net/JavaSel..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (8 samples, 0.15%)</title><rect x="901.2" y="771.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="904.2" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.04%)</title><rect x="901.7" y="755.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="904.7" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.04%)</title><rect x="901.7" y="739.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="904.7" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (4 samples, 0.08%)</title><rect x="902.1" y="755.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="905.1" y="766.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (4 samples, 0.08%)</title><rect x="902.1" y="739.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="905.1" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.04%)</title><rect x="902.3" y="723.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="905.3" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (2 samples, 0.04%)</title><rect x="902.3" y="707.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="905.3" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.04%)</title><rect x="902.3" y="691.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="905.3" y="702.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (10 samples, 0.19%)</title><rect x="903.0" y="771.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="906.0" y="782.0"></text>
</g>
<g>
<title>_res (2 samples, 0.04%)</title><rect x="903.4" y="755.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="906.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (4 samples, 0.08%)</title><rect x="903.9" y="755.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="906.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (2 samples, 0.04%)</title><rect x="904.3" y="739.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="907.3" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (2 samples, 0.04%)</title><rect x="904.3" y="723.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="907.3" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (664 samples, 12.51%)</title><rect x="905.2" y="771.0" width="147.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="908.2" y="782.0">sun/nio/ch/Selector..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (664 samples, 12.51%)</title><rect x="905.2" y="755.0" width="147.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="908.2" y="766.0">sun/nio/ch/Selector..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (664 samples, 12.51%)</title><rect x="905.2" y="739.0" width="147.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="908.2" y="750.0">sun/nio/ch/KQueueSe..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (645 samples, 12.15%)</title><rect x="905.4" y="723.0" width="143.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="908.4" y="734.0">sun/nio/ch/KQueue...</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (8 samples, 0.15%)</title><rect x="911.5" y="707.0" width="1.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="914.5" y="718.0"></text>
</g>
<g>
<title>kevent (610 samples, 11.49%)</title><rect x="913.2" y="707.0" width="135.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="916.2" y="718.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 0.06%)</title><rect x="1048.8" y="723.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1051.8" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.06%)</title><rect x="1048.8" y="707.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1051.8" y="718.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.06%)</title><rect x="1048.8" y="691.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1051.8" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.06%)</title><rect x="1048.8" y="675.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1051.8" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.06%)</title><rect x="1048.8" y="659.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1051.8" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.04%)</title><rect x="1049.5" y="723.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1052.5" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (13 samples, 0.24%)</title><rect x="1049.9" y="723.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1052.9" y="734.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (9 samples, 0.17%)</title><rect x="1050.8" y="707.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1053.8" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (5 samples, 0.09%)</title><rect x="1051.3" y="691.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1054.3" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (5 samples, 0.09%)</title><rect x="1051.3" y="675.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1054.3" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (5 samples, 0.09%)</title><rect x="1051.3" y="659.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1054.3" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (2 samples, 0.04%)</title><rect x="1052.4" y="691.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1055.4" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (462 samples, 8.70%)</title><rect x="1053.1" y="787.0" width="102.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1056.1" y="798.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (450 samples, 8.48%)</title><rect x="1054.8" y="771.0" width="100.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1057.8" y="782.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (307 samples, 5.78%)</title><rect x="1055.5" y="755.0" width="68.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1058.5" y="766.0">one/nio..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.04%)</title><rect x="1057.1" y="739.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1060.1" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (229 samples, 4.31%)</title><rect x="1057.5" y="739.0" width="50.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1060.5" y="750.0">one/n..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (225 samples, 4.24%)</title><rect x="1058.4" y="723.0" width="50.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1061.4" y="734.0">one/n..</text>
</g>
<g>
<title>one/nio/http/PathMapper.find (7 samples, 0.13%)</title><rect x="1058.8" y="707.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1061.8" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.09%)</title><rect x="1059.3" y="691.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1062.3" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.06%)</title><rect x="1059.3" y="675.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1062.3" y="686.0"></text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 0.04%)</title><rect x="1059.5" y="659.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1062.5" y="670.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="1059.5" y="643.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1062.5" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.04%)</title><rect x="1060.0" y="675.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1063.0" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.04%)</title><rect x="1060.4" y="707.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1063.4" y="718.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.04%)</title><rect x="1060.4" y="691.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1063.4" y="702.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.04%)</title><rect x="1060.4" y="675.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1063.4" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.handleDefault (214 samples, 4.03%)</title><rect x="1060.8" y="707.0" width="47.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1063.8" y="718.0">ru/m..</text>
</g>
<g>
<title>one/nio/http/Request.getPath (6 samples, 0.11%)</title><rect x="1061.3" y="691.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1064.3" y="702.0"></text>
</g>
<g>
<title>java/lang/String.substring (6 samples, 0.11%)</title><rect x="1061.3" y="675.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1064.3" y="686.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6 samples, 0.11%)</title><rect x="1061.3" y="659.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1064.3" y="670.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.06%)</title><rect x="1061.3" y="643.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1064.3" y="654.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.06%)</title><rect x="1062.0" y="643.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1065.0" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.entity (206 samples, 3.88%)</title><rect x="1062.6" y="691.0" width="45.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1065.6" y="702.0">ru/m..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (6 samples, 0.11%)</title><rect x="1063.5" y="675.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1066.5" y="686.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.06%)</title><rect x="1064.2" y="659.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1067.2" y="670.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.06%)</title><rect x="1064.2" y="643.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1067.2" y="654.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.06%)</title><rect x="1064.2" y="627.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1067.2" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.06%)</title><rect x="1064.2" y="611.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1067.2" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/Node.primaryFor (2 samples, 0.04%)</title><rect x="1064.8" y="675.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1067.8" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/seliverstov/ServiceImpl.executeAsync (194 samples, 3.65%)</title><rect x="1065.3" y="675.0" width="43.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1068.3" y="686.0">ru/m..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (194 samples, 3.65%)</title><rect x="1065.3" y="659.0" width="43.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1068.3" y="670.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (193 samples, 3.64%)</title><rect x="1065.5" y="643.0" width="42.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1068.5" y="654.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.enqueue (3 samples, 0.06%)</title><rect x="1065.7" y="627.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1068.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (187 samples, 3.52%)</title><rect x="1066.4" y="627.0" width="41.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1069.4" y="638.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (4 samples, 0.08%)</title><rect x="1066.4" y="611.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1069.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 0.06%)</title><rect x="1066.4" y="595.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1069.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 0.06%)</title><rect x="1066.4" y="579.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1069.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (183 samples, 3.45%)</title><rect x="1067.3" y="611.0" width="40.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1070.3" y="622.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (183 samples, 3.45%)</title><rect x="1067.3" y="595.0" width="40.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1070.3" y="606.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (183 samples, 3.45%)</title><rect x="1067.3" y="579.0" width="40.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1070.3" y="590.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (180 samples, 3.39%)</title><rect x="1067.5" y="563.0" width="40.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1070.5" y="574.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (180 samples, 3.39%)</title><rect x="1067.5" y="547.0" width="40.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1070.5" y="558.0">jdk..</text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.04%)</title><rect x="1068.4" y="531.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1071.4" y="542.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (170 samples, 3.20%)</title><rect x="1068.8" y="531.0" width="37.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1071.8" y="542.0">Uns..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (4 samples, 0.08%)</title><rect x="1069.5" y="515.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1072.5" y="526.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.04%)</title><rect x="1070.4" y="515.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1073.4" y="526.0"></text>
</g>
<g>
<title>Thread::last_handle_mark() const (2 samples, 0.04%)</title><rect x="1070.4" y="499.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1073.4" y="510.0"></text>
</g>
<g>
<title>JavaThread::jni_environment_offset() (2 samples, 0.04%)</title><rect x="1070.8" y="515.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1073.8" y="526.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (2 samples, 0.04%)</title><rect x="1071.3" y="515.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1074.3" y="526.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.04%)</title><rect x="1071.7" y="515.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1074.7" y="526.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (2 samples, 0.04%)</title><rect x="1071.7" y="499.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1074.7" y="510.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (2 samples, 0.04%)</title><rect x="1071.7" y="483.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1074.7" y="494.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (2 samples, 0.04%)</title><rect x="1071.7" y="467.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1074.7" y="478.0"></text>
</g>
<g>
<title>Thread::current() (6 samples, 0.11%)</title><rect x="1072.4" y="515.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1075.4" y="526.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (5 samples, 0.09%)</title><rect x="1072.6" y="499.0" width="1.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1075.6" y="510.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (6 samples, 0.11%)</title><rect x="1074.0" y="515.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1077.0" y="526.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (5 samples, 0.09%)</title><rect x="1074.2" y="499.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1077.2" y="510.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.08%)</title><rect x="1074.4" y="483.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1077.4" y="494.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.08%)</title><rect x="1074.4" y="467.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1077.4" y="478.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.06%)</title><rect x="1075.3" y="515.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1078.3" y="526.0"></text>
</g>
<g>
<title>__psynch_cvsignal (129 samples, 2.43%)</title><rect x="1076.2" y="515.0" width="28.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1079.2" y="526.0">__..</text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.04%)</title><rect x="1105.3" y="515.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1108.3" y="526.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.04%)</title><rect x="1105.7" y="515.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1108.7" y="526.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.04%)</title><rect x="1106.2" y="515.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1109.2" y="526.0"></text>
</g>
<g>
<title>pthread_cond_signal (3 samples, 0.06%)</title><rect x="1106.9" y="531.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1109.9" y="542.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.04%)</title><rect x="1107.5" y="563.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1110.5" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.04%)</title><rect x="1108.0" y="627.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1111.0" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (22 samples, 0.41%)</title><rect x="1108.4" y="739.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1111.4" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (13 samples, 0.24%)</title><rect x="1108.6" y="723.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1111.6" y="734.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (11 samples, 0.21%)</title><rect x="1109.1" y="707.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1112.1" y="718.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (11 samples, 0.21%)</title><rect x="1109.1" y="691.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1112.1" y="702.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.08%)</title><rect x="1110.2" y="675.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1113.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.04%)</title><rect x="1111.1" y="675.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1114.1" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.15%)</title><rect x="1111.5" y="723.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1114.5" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.15%)</title><rect x="1111.5" y="707.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1114.5" y="718.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (23 samples, 0.43%)</title><rect x="1113.3" y="739.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1116.3" y="750.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (7 samples, 0.13%)</title><rect x="1114.2" y="723.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1117.2" y="734.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (7 samples, 0.13%)</title><rect x="1114.2" y="707.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1117.2" y="718.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.04%)</title><rect x="1115.3" y="691.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1118.3" y="702.0"></text>
</g>
<g>
<title>one/nio/http/Request.setBody (12 samples, 0.23%)</title><rect x="1115.7" y="723.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1118.7" y="734.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="1117.8" y="707.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1120.8" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (5 samples, 0.09%)</title><rect x="1118.4" y="739.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1121.4" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (11 samples, 0.21%)</title><rect x="1119.5" y="739.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1122.5" y="750.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (10 samples, 0.19%)</title><rect x="1119.8" y="723.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1122.8" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (10 samples, 0.19%)</title><rect x="1119.8" y="707.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1122.8" y="718.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="1121.5" y="691.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1124.5" y="702.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.15%)</title><rect x="1122.0" y="739.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1125.0" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.15%)</title><rect x="1122.0" y="723.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1125.0" y="734.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (2 samples, 0.04%)</title><rect x="1123.3" y="707.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1126.3" y="718.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (140 samples, 2.64%)</title><rect x="1123.8" y="755.0" width="31.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1126.8" y="766.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (139 samples, 2.62%)</title><rect x="1123.8" y="739.0" width="30.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1126.8" y="750.0">on..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.08%)</title><rect x="1124.2" y="723.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1127.2" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="1124.2" y="707.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1127.2" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="1124.2" y="691.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1127.2" y="702.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1124.6" y="675.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1127.6" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (133 samples, 2.51%)</title><rect x="1125.1" y="723.0" width="29.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1128.1" y="734.0">su..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (14 samples, 0.26%)</title><rect x="1125.1" y="707.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1128.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (14 samples, 0.26%)</title><rect x="1125.1" y="691.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1128.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (6 samples, 0.11%)</title><rect x="1125.1" y="675.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1128.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1125.3" y="659.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1128.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (2 samples, 0.04%)</title><rect x="1125.8" y="659.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1128.8" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (2 samples, 0.04%)</title><rect x="1125.8" y="643.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1128.8" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.set (2 samples, 0.04%)</title><rect x="1125.8" y="627.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1128.8" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (8 samples, 0.15%)</title><rect x="1126.4" y="675.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1129.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (8 samples, 0.15%)</title><rect x="1126.4" y="659.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1129.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.06%)</title><rect x="1126.6" y="643.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1129.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (4 samples, 0.08%)</title><rect x="1127.3" y="643.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1130.3" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (4 samples, 0.08%)</title><rect x="1127.3" y="627.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1130.3" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (4 samples, 0.08%)</title><rect x="1127.3" y="611.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1130.3" y="622.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.06%)</title><rect x="1127.3" y="595.0" width="0.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1130.3" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (119 samples, 2.24%)</title><rect x="1128.2" y="707.0" width="26.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1131.2" y="718.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (119 samples, 2.24%)</title><rect x="1128.2" y="691.0" width="26.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1131.2" y="702.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (113 samples, 2.13%)</title><rect x="1128.2" y="675.0" width="25.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1131.2" y="686.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (112 samples, 2.11%)</title><rect x="1128.4" y="659.0" width="24.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1131.4" y="670.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (112 samples, 2.11%)</title><rect x="1128.4" y="643.0" width="24.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1131.4" y="654.0">s..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (4 samples, 0.08%)</title><rect x="1129.8" y="627.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1132.8" y="638.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.04%)</title><rect x="1130.2" y="611.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1133.2" y="622.0"></text>
</g>
<g>
<title>read (102 samples, 1.92%)</title><rect x="1130.6" y="627.0" width="22.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1133.6" y="638.0">r..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (6 samples, 0.11%)</title><rect x="1153.3" y="675.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1156.3" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (5 samples, 0.09%)</title><rect x="1153.5" y="659.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1156.5" y="670.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.08%)</title><rect x="1153.8" y="643.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1156.8" y="654.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.08%)</title><rect x="1153.8" y="627.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1156.8" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.08%)</title><rect x="1153.8" y="611.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1156.8" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (4 samples, 0.08%)</title><rect x="1153.8" y="595.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1156.8" y="606.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.08%)</title><rect x="1154.9" y="771.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.9" y="782.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.06%)</title><rect x="1154.9" y="755.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1157.9" y="766.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (3 samples, 0.06%)</title><rect x="1154.9" y="739.0" width="0.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1157.9" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.04%)</title><rect x="1155.8" y="803.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.8" y="814.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (3 samples, 0.06%)</title><rect x="1156.2" y="803.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.2" y="814.0"></text>
</g>
<g>
<title>start_wqthread (2 samples, 0.04%)</title><rect x="1156.9" y="803.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1159.9" y="814.0"></text>
</g>
<g>
<title>_pthread_wqthread (2 samples, 0.04%)</title><rect x="1156.9" y="787.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1159.9" y="798.0"></text>
</g>
<g>
<title>_dispatch_kevent_worker_thread (2 samples, 0.04%)</title><rect x="1156.9" y="771.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1159.9" y="782.0"></text>
</g>
<g>
<title>_dispatch_lane_serial_drain (2 samples, 0.04%)</title><rect x="1156.9" y="755.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1159.9" y="766.0"></text>
</g>
<g>
<title>_dispatch_source_invoke (2 samples, 0.04%)</title><rect x="1156.9" y="739.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1159.9" y="750.0"></text>
</g>
<g>
<title>_dispatch_continuation_pop (2 samples, 0.04%)</title><rect x="1156.9" y="723.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1159.9" y="734.0"></text>
</g>
<g>
<title>_dispatch_client_callout (2 samples, 0.04%)</title><rect x="1156.9" y="707.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1159.9" y="718.0"></text>
</g>
<g>
<title>malloc_memory_event_handler (2 samples, 0.04%)</title><rect x="1156.9" y="691.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1159.9" y="702.0"></text>
</g>
<g>
<title>malloc_zone_pressure_relief (2 samples, 0.04%)</title><rect x="1156.9" y="675.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1159.9" y="686.0"></text>
</g>
<g>
<title>szone_pressure_relief (2 samples, 0.04%)</title><rect x="1156.9" y="659.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1159.9" y="670.0"></text>
</g>
<g>
<title>tiny_madvise_pressure_relief (2 samples, 0.04%)</title><rect x="1156.9" y="643.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1159.9" y="654.0"></text>
</g>
<g>
<title>thread_start (139 samples, 2.62%)</title><rect x="1157.3" y="803.0" width="30.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1160.3" y="814.0">th..</text>
</g>
<g>
<title>_pthread_start (139 samples, 2.62%)</title><rect x="1157.3" y="787.0" width="30.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1160.3" y="798.0">_p..</text>
</g>
<g>
<title>_pthread_body (139 samples, 2.62%)</title><rect x="1157.3" y="771.0" width="30.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1160.3" y="782.0">_p..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (139 samples, 2.62%)</title><rect x="1157.3" y="755.0" width="30.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1160.3" y="766.0">th..</text>
</g>
<g>
<title>Thread::call_run() (139 samples, 2.62%)</title><rect x="1157.3" y="739.0" width="30.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.3" y="750.0">Th..</text>
</g>
<g>
<title>ConcurrentGCThread::run() (4 samples, 0.08%)</title><rect x="1157.3" y="723.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.3" y="734.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (4 samples, 0.08%)</title><rect x="1157.3" y="707.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.3" y="718.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (3 samples, 0.06%)</title><rect x="1157.5" y="691.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.5" y="702.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.06%)</title><rect x="1157.5" y="675.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.5" y="686.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.06%)</title><rect x="1157.5" y="659.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.5" y="670.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.06%)</title><rect x="1157.5" y="643.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.5" y="654.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.06%)</title><rect x="1157.5" y="627.0" width="0.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1160.5" y="638.0"></text>
</g>
<g>
<title>JavaThread::run() (130 samples, 2.45%)</title><rect x="1158.4" y="723.0" width="28.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.4" y="734.0">Ja..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (130 samples, 2.45%)</title><rect x="1158.4" y="707.0" width="28.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.4" y="718.0">Ja..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (130 samples, 2.45%)</title><rect x="1158.4" y="691.0" width="28.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.4" y="702.0">Co..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (129 samples, 2.43%)</title><rect x="1158.4" y="675.0" width="28.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.4" y="686.0">Co..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (123 samples, 2.32%)</title><rect x="1158.4" y="659.0" width="27.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.4" y="670.0">C..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (123 samples, 2.32%)</title><rect x="1158.4" y="643.0" width="27.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.4" y="654.0">C..</text>
</g>
<g>
<title>Compile::Code_Gen() (72 samples, 1.36%)</title><rect x="1158.4" y="627.0" width="16.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.4" y="638.0"></text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.04%)</title><rect x="1158.4" y="611.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.4" y="622.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.04%)</title><rect x="1158.9" y="611.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.9" y="622.0"></text>
</g>
<g>
<title>Matcher::match() (8 samples, 0.15%)</title><rect x="1159.3" y="611.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1162.3" y="622.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (7 samples, 0.13%)</title><rect x="1159.3" y="595.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.3" y="606.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (4 samples, 0.08%)</title><rect x="1160.0" y="579.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.0" y="590.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (3 samples, 0.06%)</title><rect x="1160.2" y="563.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.2" y="574.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (8 samples, 0.15%)</title><rect x="1161.5" y="611.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.5" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (8 samples, 0.15%)</title><rect x="1161.5" y="595.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.5" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.04%)</title><rect x="1162.0" y="579.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.0" y="590.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.08%)</title><rect x="1162.4" y="579.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.4" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (50 samples, 0.94%)</title><rect x="1163.3" y="611.0" width="11.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.3" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (10 samples, 0.19%)</title><rect x="1164.2" y="595.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.2" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (2 samples, 0.04%)</title><rect x="1166.0" y="579.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.0" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(MachSpillCopyNode::SpillType, Node*, Node*, unsigned int) (2 samples, 0.04%)</title><rect x="1166.0" y="563.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.0" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 0.17%)</title><rect x="1166.4" y="595.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.4" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (3 samples, 0.06%)</title><rect x="1166.7" y="579.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.7" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.04%)</title><rect x="1166.9" y="563.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.9" y="574.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (2 samples, 0.04%)</title><rect x="1166.9" y="547.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.9" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.06%)</title><rect x="1167.3" y="579.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.3" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (2 samples, 0.04%)</title><rect x="1168.0" y="579.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.0" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (3 samples, 0.06%)</title><rect x="1168.4" y="595.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.4" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.04%)</title><rect x="1168.7" y="579.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.7" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (6 samples, 0.11%)</title><rect x="1169.1" y="595.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.1" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 0.09%)</title><rect x="1170.7" y="595.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.7" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.06%)</title><rect x="1171.1" y="579.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.1" y="590.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.04%)</title><rect x="1172.0" y="595.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.0" y="606.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.04%)</title><rect x="1172.0" y="579.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.0" y="590.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.04%)</title><rect x="1172.4" y="595.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.4" y="606.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 0.11%)</title><rect x="1172.9" y="595.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.9" y="606.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.04%)</title><rect x="1173.8" y="579.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.8" y="590.0"></text>
</g>
<g>
<title>Compile::Optimize() (40 samples, 0.75%)</title><rect x="1174.4" y="627.0" width="8.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.4" y="638.0"></text>
</g>
<g>
<title>Compile::optimize_loops(PhaseIterGVN&amp;, LoopOptsMode) (15 samples, 0.28%)</title><rect x="1174.7" y="611.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.7" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (15 samples, 0.28%)</title><rect x="1174.7" y="595.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.7" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.04%)</title><rect x="1175.1" y="579.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.1" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 0.13%)</title><rect x="1175.6" y="579.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.6" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (3 samples, 0.06%)</title><rect x="1176.4" y="563.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.4" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (2 samples, 0.04%)</title><rect x="1176.7" y="547.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.7" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (2 samples, 0.04%)</title><rect x="1176.7" y="531.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.7" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.04%)</title><rect x="1177.1" y="579.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.1" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 0.04%)</title><rect x="1177.6" y="579.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.6" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.04%)</title><rect x="1177.6" y="563.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.6" y="574.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (3 samples, 0.06%)</title><rect x="1178.0" y="611.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.0" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (13 samples, 0.24%)</title><rect x="1179.1" y="611.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.1" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 0.08%)</title><rect x="1179.1" y="595.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.1" y="606.0"></text>
</g>
<g>
<title>NTarjan::LINK(NTarjan*, NTarjan*) (2 samples, 0.04%)</title><rect x="1179.3" y="579.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.3" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.04%)</title><rect x="1180.0" y="595.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.0" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.08%)</title><rect x="1180.4" y="595.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.4" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (3 samples, 0.06%)</title><rect x="1180.7" y="579.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.7" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 0.06%)</title><rect x="1180.7" y="563.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.7" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.04%)</title><rect x="1180.7" y="547.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.7" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (2 samples, 0.04%)</title><rect x="1180.7" y="531.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.7" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.04%)</title><rect x="1180.7" y="515.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.7" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (2 samples, 0.04%)</title><rect x="1180.7" y="499.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.7" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (2 samples, 0.04%)</title><rect x="1180.7" y="483.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.7" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 0.04%)</title><rect x="1181.3" y="595.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.3" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.09%)</title><rect x="1182.0" y="611.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.0" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 0.09%)</title><rect x="1182.0" y="595.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.0" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.19%)</title><rect x="1183.3" y="627.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.3" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.19%)</title><rect x="1183.3" y="611.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.19%)</title><rect x="1183.3" y="595.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.19%)</title><rect x="1183.3" y="579.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.19%)</title><rect x="1183.3" y="563.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.3" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.19%)</title><rect x="1183.3" y="547.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.3" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.19%)</title><rect x="1183.3" y="531.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.19%)</title><rect x="1183.3" y="515.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.19%)</title><rect x="1183.3" y="499.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.19%)</title><rect x="1183.3" y="483.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.3" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.17%)</title><rect x="1183.6" y="467.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.6" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.17%)</title><rect x="1183.6" y="451.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.17%)</title><rect x="1183.6" y="435.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.17%)</title><rect x="1183.6" y="419.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.17%)</title><rect x="1183.6" y="403.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.6" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.09%)</title><rect x="1183.8" y="387.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.8" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.09%)</title><rect x="1183.8" y="371.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.08%)</title><rect x="1184.0" y="355.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.08%)</title><rect x="1184.0" y="339.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.08%)</title><rect x="1184.0" y="323.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.0" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.08%)</title><rect x="1184.0" y="307.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.0" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.08%)</title><rect x="1184.0" y="291.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.08%)</title><rect x="1184.0" y="275.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.08%)</title><rect x="1184.0" y="259.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.08%)</title><rect x="1184.0" y="243.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.0" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="1184.2" y="227.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.2" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.06%)</title><rect x="1184.2" y="211.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.06%)</title><rect x="1184.2" y="195.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.06%)</title><rect x="1184.2" y="179.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.2" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1184.2" y="163.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.2" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1184.2" y="147.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.2" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1184.2" y="131.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.2" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1184.2" y="115.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.2" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1184.2" y="99.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.2" y="110.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1184.2" y="83.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.2" y="94.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="1184.9" y="387.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.9" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="1184.9" y="371.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.9" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.06%)</title><rect x="1184.9" y="355.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.06%)</title><rect x="1184.9" y="339.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.06%)</title><rect x="1184.9" y="323.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.06%)</title><rect x="1184.9" y="307.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.9" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="1184.9" y="291.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.9" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.06%)</title><rect x="1184.9" y="275.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.06%)</title><rect x="1184.9" y="259.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.06%)</title><rect x="1184.9" y="243.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.06%)</title><rect x="1184.9" y="227.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.9" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="1184.9" y="211.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.9" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.06%)</title><rect x="1184.9" y="195.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.06%)</title><rect x="1184.9" y="179.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.06%)</title><rect x="1184.9" y="163.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.9" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.06%)</title><rect x="1184.9" y="147.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.9" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1184.9" y="131.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.9" y="142.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1184.9" y="115.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.9" y="126.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1184.9" y="99.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.9" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1184.9" y="83.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.9" y="94.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1184.9" y="67.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.9" y="78.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1184.9" y="51.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.9" y="62.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1184.9" y="35.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.9" y="46.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (6 samples, 0.11%)</title><rect x="1185.8" y="659.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.8" y="670.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (6 samples, 0.11%)</title><rect x="1185.8" y="643.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.8" y="654.0"></text>
</g>
<g>
<title>Compilation::compile_method() (6 samples, 0.11%)</title><rect x="1185.8" y="627.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.8" y="638.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (6 samples, 0.11%)</title><rect x="1185.8" y="611.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.8" y="622.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (4 samples, 0.08%)</title><rect x="1186.2" y="595.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.2" y="606.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (3 samples, 0.06%)</title><rect x="1186.4" y="579.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.4" y="590.0"></text>
</g>
<g>
<title>WatcherThread::run() (3 samples, 0.06%)</title><rect x="1187.6" y="723.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.6" y="734.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (3 samples, 0.06%)</title><rect x="1187.6" y="707.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.6" y="718.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.06%)</title><rect x="1187.6" y="691.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.6" y="702.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.06%)</title><rect x="1187.6" y="675.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.6" y="686.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.06%)</title><rect x="1187.6" y="659.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.6" y="670.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.06%)</title><rect x="1187.6" y="643.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1190.6" y="654.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (8 samples, 0.15%)</title><rect x="1188.2" y="803.0" width="1.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1191.2" y="814.0"></text>
</g>
</g>
</svg>
